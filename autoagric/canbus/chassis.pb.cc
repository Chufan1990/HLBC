// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/canbus/chassis.proto

#include "autoagric/canbus/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace canbus {
constexpr Chassis::Chassis(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , engine_rpm_(0)
  , speed_mps_(0)
  , odometer_m_(0)
  , fuel_range_m_(0)
  , throttle_percentage_(0)
  , brake_percentage_(0)
  , steering_percentage_(0)
  , engine_started_(false)
  , parking_brake_(false)
  , high_beam_signal_(false)
  , low_beam_signal_(false)
  , steering_torque_nm_(0)
  , left_turn_signal_(false)
  , right_turn_signal_(false)
  , horn_(false)
  , wiper_(false)
  , disengage_status_(false)
  , driving_mode_(0)

  , error_code_(0)

  , gear_location_(0)

  , steering_timestamp_(0)
  , chassis_error_mask_(0){}
struct ChassisDefaultTypeInternal {
  constexpr ChassisDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChassisDefaultTypeInternal() {}
  union {
    Chassis _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChassisDefaultTypeInternal _Chassis_default_instance_;
}  // namespace canbus
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcanbus_2fchassis_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fcanbus_2fchassis_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcanbus_2fchassis_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcanbus_2fchassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, engine_started_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, engine_rpm_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, speed_mps_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, odometer_m_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, fuel_range_m_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, throttle_percentage_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, brake_percentage_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, steering_percentage_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, steering_torque_nm_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, high_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, low_beam_signal_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, left_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, right_turn_signal_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, horn_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, wiper_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, disengage_status_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, error_code_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, gear_location_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, steering_timestamp_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, header_),
  PROTOBUF_FIELD_OFFSET(::autoagric::canbus::Chassis, chassis_error_mask_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, -1, sizeof(::autoagric::canbus::Chassis)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::canbus::_Chassis_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcanbus_2fchassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036autoagric/canbus/chassis.proto\022\020autoag"
  "ric.canbus\032\035autoagric/common/header.prot"
  "o\"\372\t\n\007Chassis\022\026\n\016engine_started\030\003 \001(\010\022\022\n"
  "\nengine_rpm\030\004 \001(\002\022\026\n\tspeed_mps\030\005 \001(\002H\000\210\001"
  "\001\022\022\n\nodometer_m\030\006 \001(\002\022\024\n\014fuel_range_m\030\007 "
  "\001(\005\022\033\n\023throttle_percentage\030\010 \001(\002\022\030\n\020brak"
  "e_percentage\030\t \001(\002\022 \n\023steering_percentag"
  "e\030\013 \001(\002H\001\210\001\001\022\032\n\022steering_torque_nm\030\014 \001(\002"
  "\022\025\n\rparking_brake\030\r \001(\010\022\030\n\020high_beam_sig"
  "nal\030\016 \001(\010\022\027\n\017low_beam_signal\030\017 \001(\010\022\030\n\020le"
  "ft_turn_signal\030\020 \001(\010\022\031\n\021right_turn_signa"
  "l\030\021 \001(\010\022\014\n\004horn\030\022 \001(\010\022\r\n\005wiper\030\023 \001(\010\022\030\n\020"
  "disengage_status\030\024 \001(\010\022;\n\014driving_mode\030\025"
  " \001(\0162%.autoagric.canbus.Chassis.DrivingM"
  "ode\0227\n\nerror_code\030\026 \001(\0162#.autoagric.canb"
  "us.Chassis.ErrorCode\022B\n\rgear_location\030\027 "
  "\001(\0162&.autoagric.canbus.Chassis.GearPosit"
  "ionH\002\210\001\001\022\032\n\022steering_timestamp\030\030 \001(\001\022(\n\006"
  "header\030\031 \001(\0132\030.autoagric.common.Header\022\032"
  "\n\022chassis_error_mask\030\032 \001(\005\"y\n\013DrivingMod"
  "e\022\023\n\017COMPLETE_MANUAL\020\000\022\027\n\023COMPLETE_AUTO_"
  "DRIVE\020\001\022\023\n\017AUTO_STEER_ONLY\020\002\022\023\n\017AUTO_SPE"
  "ED_ONLY\020\003\022\022\n\016EMERGENCY_MODE\020\004\"\203\001\n\014GearPo"
  "sition\022\r\n\tGEAR_NONE\020\000\022\020\n\014GEAR_PARKING\020\001\022"
  "\020\n\014GEAR_REVERSE\020\002\022\020\n\014GEAR_NEUTRAL\020\003\022\016\n\nG"
  "EAR_DRIVE\020\004\022\014\n\010GEAR_LOW\020\005\022\020\n\014GEAR_INVALI"
  "D\020\006\"\200\002\n\tErrorCode\022\014\n\010NO_ERROR\020\000\022\025\n\021CMD_N"
  "OT_IN_PERIOD\020\001\022\021\n\rCHASSIS_ERROR\020\002\022\032\n\026CHA"
  "SSIS_ERROR_ON_STEER\020\006\022\032\n\026CHASSIS_ERROR_O"
  "N_BRAKE\020\007\022\035\n\031CHASSIS_ERROR_ON_THROTTLE\020\010"
  "\022\031\n\025CHASSIS_ERROR_ON_GEAR\020\t\022\027\n\023MANUAL_IN"
  "TERVENTION\020\003\022\035\n\031CHASSIS_CAN_NOT_IN_PERIO"
  "D\020\004\022\021\n\rUNKNOWN_ERROR\020\005B\014\n\n_speed_mpsB\026\n\024"
  "_steering_percentageB\020\n\016_gear_locationb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fcanbus_2fchassis_2eproto_deps[1] = {
  &::descriptor_table_autoagric_2fcommon_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcanbus_2fchassis_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcanbus_2fchassis_2eproto = {
  false, false, 1366, descriptor_table_protodef_autoagric_2fcanbus_2fchassis_2eproto, "autoagric/canbus/chassis.proto", 
  &descriptor_table_autoagric_2fcanbus_2fchassis_2eproto_once, descriptor_table_autoagric_2fcanbus_2fchassis_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fcanbus_2fchassis_2eproto::offsets,
  file_level_metadata_autoagric_2fcanbus_2fchassis_2eproto, file_level_enum_descriptors_autoagric_2fcanbus_2fchassis_2eproto, file_level_service_descriptors_autoagric_2fcanbus_2fchassis_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcanbus_2fchassis_2eproto_getter() {
  return &descriptor_table_autoagric_2fcanbus_2fchassis_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcanbus_2fchassis_2eproto(&descriptor_table_autoagric_2fcanbus_2fchassis_2eproto);
namespace autoagric {
namespace canbus {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fcanbus_2fchassis_2eproto);
  return file_level_enum_descriptors_autoagric_2fcanbus_2fchassis_2eproto[0];
}
bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
constexpr Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
constexpr Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
constexpr Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
constexpr Chassis_DrivingMode Chassis::EMERGENCY_MODE;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MIN;
constexpr Chassis_DrivingMode Chassis::DrivingMode_MAX;
constexpr int Chassis::DrivingMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fcanbus_2fchassis_2eproto);
  return file_level_enum_descriptors_autoagric_2fcanbus_2fchassis_2eproto[1];
}
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Chassis_GearPosition Chassis::GEAR_NONE;
constexpr Chassis_GearPosition Chassis::GEAR_PARKING;
constexpr Chassis_GearPosition Chassis::GEAR_REVERSE;
constexpr Chassis_GearPosition Chassis::GEAR_NEUTRAL;
constexpr Chassis_GearPosition Chassis::GEAR_DRIVE;
constexpr Chassis_GearPosition Chassis::GEAR_LOW;
constexpr Chassis_GearPosition Chassis::GEAR_INVALID;
constexpr Chassis_GearPosition Chassis::GearPosition_MIN;
constexpr Chassis_GearPosition Chassis::GearPosition_MAX;
constexpr int Chassis::GearPosition_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fcanbus_2fchassis_2eproto);
  return file_level_enum_descriptors_autoagric_2fcanbus_2fchassis_2eproto[2];
}
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Chassis_ErrorCode Chassis::NO_ERROR;
constexpr Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_STEER;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_BRAKE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_THROTTLE;
constexpr Chassis_ErrorCode Chassis::CHASSIS_ERROR_ON_GEAR;
constexpr Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
constexpr Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
constexpr Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MIN;
constexpr Chassis_ErrorCode Chassis::ErrorCode_MAX;
constexpr int Chassis::ErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Chassis::_Internal {
 public:
  using HasBits = decltype(std::declval<Chassis>()._has_bits_);
  static void set_has_speed_mps(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steering_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gear_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autoagric::common::Header& header(const Chassis* msg);
};

const ::autoagric::common::Header&
Chassis::_Internal::header(const Chassis* msg) {
  return *msg->header_;
}
void Chassis::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Chassis::Chassis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::autoagric::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&engine_rpm_, &from.engine_rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&chassis_error_mask_) -
    reinterpret_cast<char*>(&engine_rpm_)) + sizeof(chassis_error_mask_));
  // @@protoc_insertion_point(copy_constructor:autoagric.canbus.Chassis)
}

inline void Chassis::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chassis_error_mask_) -
    reinterpret_cast<char*>(&header_)) + sizeof(chassis_error_mask_));
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:autoagric.canbus.Chassis)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Chassis::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void Chassis::ArenaDtor(void* object) {
  Chassis* _this = reinterpret_cast< Chassis* >(object);
  (void)_this;
}
void Chassis::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Chassis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.canbus.Chassis)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  engine_rpm_ = 0;
  speed_mps_ = 0;
  ::memset(&odometer_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_percentage_) -
      reinterpret_cast<char*>(&odometer_m_)) + sizeof(brake_percentage_));
  steering_percentage_ = 0;
  ::memset(&engine_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&engine_started_)) + sizeof(error_code_));
  gear_location_ = 0;
  ::memset(&steering_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chassis_error_mask_) -
      reinterpret_cast<char*>(&steering_timestamp_)) + sizeof(chassis_error_mask_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Chassis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool engine_started = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          engine_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float engine_rpm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          engine_rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_mps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_speed_mps(&has_bits);
          speed_mps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float odometer_m = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          odometer_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 fuel_range_m = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          fuel_range_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float throttle_percentage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          throttle_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float brake_percentage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          brake_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float steering_percentage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_steering_percentage(&has_bits);
          steering_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float steering_torque_nm = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          steering_torque_nm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool parking_brake = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool high_beam_signal = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          high_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool low_beam_signal = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          low_beam_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool left_turn_signal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          left_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool right_turn_signal = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          right_turn_signal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool horn = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wiper = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          wiper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disengage_status = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          disengage_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.canbus.Chassis.DrivingMode driving_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_driving_mode(static_cast<::autoagric::canbus::Chassis_DrivingMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.canbus.Chassis.ErrorCode error_code = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error_code(static_cast<::autoagric::canbus::Chassis_ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // optional .autoagric.canbus.Chassis.GearPosition gear_location = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear_location(static_cast<::autoagric::canbus::Chassis_GearPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // double steering_timestamp = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          steering_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Header header = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 chassis_error_mask = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          chassis_error_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Chassis::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.canbus.Chassis)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool engine_started = 3;
  if (this->_internal_engine_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_engine_started(), target);
  }

  // float engine_rpm = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_engine_rpm = this->_internal_engine_rpm();
  uint32_t raw_engine_rpm;
  memcpy(&raw_engine_rpm, &tmp_engine_rpm, sizeof(tmp_engine_rpm));
  if (raw_engine_rpm != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_engine_rpm(), target);
  }

  // optional float speed_mps = 5;
  if (_internal_has_speed_mps()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_speed_mps(), target);
  }

  // float odometer_m = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odometer_m = this->_internal_odometer_m();
  uint32_t raw_odometer_m;
  memcpy(&raw_odometer_m, &tmp_odometer_m, sizeof(tmp_odometer_m));
  if (raw_odometer_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_odometer_m(), target);
  }

  // int32 fuel_range_m = 7;
  if (this->_internal_fuel_range_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_fuel_range_m(), target);
  }

  // float throttle_percentage = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_throttle_percentage = this->_internal_throttle_percentage();
  uint32_t raw_throttle_percentage;
  memcpy(&raw_throttle_percentage, &tmp_throttle_percentage, sizeof(tmp_throttle_percentage));
  if (raw_throttle_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_throttle_percentage(), target);
  }

  // float brake_percentage = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brake_percentage = this->_internal_brake_percentage();
  uint32_t raw_brake_percentage;
  memcpy(&raw_brake_percentage, &tmp_brake_percentage, sizeof(tmp_brake_percentage));
  if (raw_brake_percentage != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_brake_percentage(), target);
  }

  // optional float steering_percentage = 11;
  if (_internal_has_steering_percentage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_steering_percentage(), target);
  }

  // float steering_torque_nm = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_steering_torque_nm = this->_internal_steering_torque_nm();
  uint32_t raw_steering_torque_nm;
  memcpy(&raw_steering_torque_nm, &tmp_steering_torque_nm, sizeof(tmp_steering_torque_nm));
  if (raw_steering_torque_nm != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_steering_torque_nm(), target);
  }

  // bool parking_brake = 13;
  if (this->_internal_parking_brake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_parking_brake(), target);
  }

  // bool high_beam_signal = 14;
  if (this->_internal_high_beam_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_high_beam_signal(), target);
  }

  // bool low_beam_signal = 15;
  if (this->_internal_low_beam_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_low_beam_signal(), target);
  }

  // bool left_turn_signal = 16;
  if (this->_internal_left_turn_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_left_turn_signal(), target);
  }

  // bool right_turn_signal = 17;
  if (this->_internal_right_turn_signal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_right_turn_signal(), target);
  }

  // bool horn = 18;
  if (this->_internal_horn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_horn(), target);
  }

  // bool wiper = 19;
  if (this->_internal_wiper() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_wiper(), target);
  }

  // bool disengage_status = 20;
  if (this->_internal_disengage_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_disengage_status(), target);
  }

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 21;
  if (this->_internal_driving_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_driving_mode(), target);
  }

  // .autoagric.canbus.Chassis.ErrorCode error_code = 22;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_error_code(), target);
  }

  // optional .autoagric.canbus.Chassis.GearPosition gear_location = 23;
  if (_internal_has_gear_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_gear_location(), target);
  }

  // double steering_timestamp = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_timestamp = this->_internal_steering_timestamp();
  uint64_t raw_steering_timestamp;
  memcpy(&raw_steering_timestamp, &tmp_steering_timestamp, sizeof(tmp_steering_timestamp));
  if (raw_steering_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_steering_timestamp(), target);
  }

  // .autoagric.common.Header header = 25;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::header(this), target, stream);
  }

  // int32 chassis_error_mask = 26;
  if (this->_internal_chassis_error_mask() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_chassis_error_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.canbus.Chassis)
  return target;
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.canbus.Chassis)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.Header header = 25;
  if (this->_internal_has_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // float engine_rpm = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_engine_rpm = this->_internal_engine_rpm();
  uint32_t raw_engine_rpm;
  memcpy(&raw_engine_rpm, &tmp_engine_rpm, sizeof(tmp_engine_rpm));
  if (raw_engine_rpm != 0) {
    total_size += 1 + 4;
  }

  // optional float speed_mps = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  // float odometer_m = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odometer_m = this->_internal_odometer_m();
  uint32_t raw_odometer_m;
  memcpy(&raw_odometer_m, &tmp_odometer_m, sizeof(tmp_odometer_m));
  if (raw_odometer_m != 0) {
    total_size += 1 + 4;
  }

  // int32 fuel_range_m = 7;
  if (this->_internal_fuel_range_m() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fuel_range_m());
  }

  // float throttle_percentage = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_throttle_percentage = this->_internal_throttle_percentage();
  uint32_t raw_throttle_percentage;
  memcpy(&raw_throttle_percentage, &tmp_throttle_percentage, sizeof(tmp_throttle_percentage));
  if (raw_throttle_percentage != 0) {
    total_size += 1 + 4;
  }

  // float brake_percentage = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brake_percentage = this->_internal_brake_percentage();
  uint32_t raw_brake_percentage;
  memcpy(&raw_brake_percentage, &tmp_brake_percentage, sizeof(tmp_brake_percentage));
  if (raw_brake_percentage != 0) {
    total_size += 1 + 4;
  }

  // optional float steering_percentage = 11;
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  // bool engine_started = 3;
  if (this->_internal_engine_started() != 0) {
    total_size += 1 + 1;
  }

  // bool parking_brake = 13;
  if (this->_internal_parking_brake() != 0) {
    total_size += 1 + 1;
  }

  // bool high_beam_signal = 14;
  if (this->_internal_high_beam_signal() != 0) {
    total_size += 1 + 1;
  }

  // bool low_beam_signal = 15;
  if (this->_internal_low_beam_signal() != 0) {
    total_size += 1 + 1;
  }

  // float steering_torque_nm = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_steering_torque_nm = this->_internal_steering_torque_nm();
  uint32_t raw_steering_torque_nm;
  memcpy(&raw_steering_torque_nm, &tmp_steering_torque_nm, sizeof(tmp_steering_torque_nm));
  if (raw_steering_torque_nm != 0) {
    total_size += 1 + 4;
  }

  // bool left_turn_signal = 16;
  if (this->_internal_left_turn_signal() != 0) {
    total_size += 2 + 1;
  }

  // bool right_turn_signal = 17;
  if (this->_internal_right_turn_signal() != 0) {
    total_size += 2 + 1;
  }

  // bool horn = 18;
  if (this->_internal_horn() != 0) {
    total_size += 2 + 1;
  }

  // bool wiper = 19;
  if (this->_internal_wiper() != 0) {
    total_size += 2 + 1;
  }

  // bool disengage_status = 20;
  if (this->_internal_disengage_status() != 0) {
    total_size += 2 + 1;
  }

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 21;
  if (this->_internal_driving_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
  }

  // .autoagric.canbus.Chassis.ErrorCode error_code = 22;
  if (this->_internal_error_code() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  // optional .autoagric.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00000004u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
  }

  // double steering_timestamp = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_timestamp = this->_internal_steering_timestamp();
  uint64_t raw_steering_timestamp;
  memcpy(&raw_steering_timestamp, &tmp_steering_timestamp, sizeof(tmp_steering_timestamp));
  if (raw_steering_timestamp != 0) {
    total_size += 2 + 8;
  }

  // int32 chassis_error_mask = 26;
  if (this->_internal_chassis_error_mask() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_chassis_error_mask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Chassis::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Chassis::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Chassis::GetClassData() const { return &_class_data_; }

void Chassis::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Chassis *>(to)->MergeFrom(
      static_cast<const Chassis &>(from));
}


void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::autoagric::common::Header::MergeFrom(from._internal_header());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_engine_rpm = from._internal_engine_rpm();
  uint32_t raw_engine_rpm;
  memcpy(&raw_engine_rpm, &tmp_engine_rpm, sizeof(tmp_engine_rpm));
  if (raw_engine_rpm != 0) {
    _internal_set_engine_rpm(from._internal_engine_rpm());
  }
  if (from._internal_has_speed_mps()) {
    _internal_set_speed_mps(from._internal_speed_mps());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_odometer_m = from._internal_odometer_m();
  uint32_t raw_odometer_m;
  memcpy(&raw_odometer_m, &tmp_odometer_m, sizeof(tmp_odometer_m));
  if (raw_odometer_m != 0) {
    _internal_set_odometer_m(from._internal_odometer_m());
  }
  if (from._internal_fuel_range_m() != 0) {
    _internal_set_fuel_range_m(from._internal_fuel_range_m());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_throttle_percentage = from._internal_throttle_percentage();
  uint32_t raw_throttle_percentage;
  memcpy(&raw_throttle_percentage, &tmp_throttle_percentage, sizeof(tmp_throttle_percentage));
  if (raw_throttle_percentage != 0) {
    _internal_set_throttle_percentage(from._internal_throttle_percentage());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_brake_percentage = from._internal_brake_percentage();
  uint32_t raw_brake_percentage;
  memcpy(&raw_brake_percentage, &tmp_brake_percentage, sizeof(tmp_brake_percentage));
  if (raw_brake_percentage != 0) {
    _internal_set_brake_percentage(from._internal_brake_percentage());
  }
  if (from._internal_has_steering_percentage()) {
    _internal_set_steering_percentage(from._internal_steering_percentage());
  }
  if (from._internal_engine_started() != 0) {
    _internal_set_engine_started(from._internal_engine_started());
  }
  if (from._internal_parking_brake() != 0) {
    _internal_set_parking_brake(from._internal_parking_brake());
  }
  if (from._internal_high_beam_signal() != 0) {
    _internal_set_high_beam_signal(from._internal_high_beam_signal());
  }
  if (from._internal_low_beam_signal() != 0) {
    _internal_set_low_beam_signal(from._internal_low_beam_signal());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_steering_torque_nm = from._internal_steering_torque_nm();
  uint32_t raw_steering_torque_nm;
  memcpy(&raw_steering_torque_nm, &tmp_steering_torque_nm, sizeof(tmp_steering_torque_nm));
  if (raw_steering_torque_nm != 0) {
    _internal_set_steering_torque_nm(from._internal_steering_torque_nm());
  }
  if (from._internal_left_turn_signal() != 0) {
    _internal_set_left_turn_signal(from._internal_left_turn_signal());
  }
  if (from._internal_right_turn_signal() != 0) {
    _internal_set_right_turn_signal(from._internal_right_turn_signal());
  }
  if (from._internal_horn() != 0) {
    _internal_set_horn(from._internal_horn());
  }
  if (from._internal_wiper() != 0) {
    _internal_set_wiper(from._internal_wiper());
  }
  if (from._internal_disengage_status() != 0) {
    _internal_set_disengage_status(from._internal_disengage_status());
  }
  if (from._internal_driving_mode() != 0) {
    _internal_set_driving_mode(from._internal_driving_mode());
  }
  if (from._internal_error_code() != 0) {
    _internal_set_error_code(from._internal_error_code());
  }
  if (from._internal_has_gear_location()) {
    _internal_set_gear_location(from._internal_gear_location());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_timestamp = from._internal_steering_timestamp();
  uint64_t raw_steering_timestamp;
  memcpy(&raw_steering_timestamp, &tmp_steering_timestamp, sizeof(tmp_steering_timestamp));
  if (raw_steering_timestamp != 0) {
    _internal_set_steering_timestamp(from._internal_steering_timestamp());
  }
  if (from._internal_chassis_error_mask() != 0) {
    _internal_set_chassis_error_mask(from._internal_chassis_error_mask());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::InternalSwap(Chassis* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Chassis, chassis_error_mask_)
      + sizeof(Chassis::chassis_error_mask_)
      - PROTOBUF_FIELD_OFFSET(Chassis, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Chassis::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcanbus_2fchassis_2eproto_getter, &descriptor_table_autoagric_2fcanbus_2fchassis_2eproto_once,
      file_level_metadata_autoagric_2fcanbus_2fchassis_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace canbus
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::canbus::Chassis* Arena::CreateMaybeMessage< ::autoagric::canbus::Chassis >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::canbus::Chassis >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
