// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/canbus/chassis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcanbus_2fchassis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcanbus_2fchassis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/common/header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcanbus_2fchassis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcanbus_2fchassis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcanbus_2fchassis_2eproto;
namespace autoagric {
namespace canbus {
class Chassis;
struct ChassisDefaultTypeInternal;
extern ChassisDefaultTypeInternal _Chassis_default_instance_;
}  // namespace canbus
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::canbus::Chassis* Arena::CreateMaybeMessage<::autoagric::canbus::Chassis>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace canbus {

enum Chassis_DrivingMode : int {
  Chassis_DrivingMode_COMPLETE_MANUAL = 0,
  Chassis_DrivingMode_COMPLETE_AUTO_DRIVE = 1,
  Chassis_DrivingMode_AUTO_STEER_ONLY = 2,
  Chassis_DrivingMode_AUTO_SPEED_ONLY = 3,
  Chassis_DrivingMode_EMERGENCY_MODE = 4,
  Chassis_DrivingMode_Chassis_DrivingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Chassis_DrivingMode_Chassis_DrivingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Chassis_DrivingMode_IsValid(int value);
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MIN = Chassis_DrivingMode_COMPLETE_MANUAL;
constexpr Chassis_DrivingMode Chassis_DrivingMode_DrivingMode_MAX = Chassis_DrivingMode_EMERGENCY_MODE;
constexpr int Chassis_DrivingMode_DrivingMode_ARRAYSIZE = Chassis_DrivingMode_DrivingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_DrivingMode_descriptor();
template<typename T>
inline const std::string& Chassis_DrivingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_DrivingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_DrivingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_DrivingMode_descriptor(), enum_t_value);
}
inline bool Chassis_DrivingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Chassis_DrivingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_DrivingMode>(
    Chassis_DrivingMode_descriptor(), name, value);
}
enum Chassis_GearPosition : int {
  Chassis_GearPosition_GEAR_NONE = 0,
  Chassis_GearPosition_GEAR_PARKING = 1,
  Chassis_GearPosition_GEAR_REVERSE = 2,
  Chassis_GearPosition_GEAR_NEUTRAL = 3,
  Chassis_GearPosition_GEAR_DRIVE = 4,
  Chassis_GearPosition_GEAR_LOW = 5,
  Chassis_GearPosition_GEAR_INVALID = 6,
  Chassis_GearPosition_Chassis_GearPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Chassis_GearPosition_Chassis_GearPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Chassis_GearPosition_IsValid(int value);
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MIN = Chassis_GearPosition_GEAR_NONE;
constexpr Chassis_GearPosition Chassis_GearPosition_GearPosition_MAX = Chassis_GearPosition_GEAR_INVALID;
constexpr int Chassis_GearPosition_GearPosition_ARRAYSIZE = Chassis_GearPosition_GearPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_GearPosition_descriptor();
template<typename T>
inline const std::string& Chassis_GearPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_GearPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_GearPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_GearPosition_descriptor(), enum_t_value);
}
inline bool Chassis_GearPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Chassis_GearPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_GearPosition>(
    Chassis_GearPosition_descriptor(), name, value);
}
enum Chassis_ErrorCode : int {
  Chassis_ErrorCode_NO_ERROR = 0,
  Chassis_ErrorCode_CMD_NOT_IN_PERIOD = 1,
  Chassis_ErrorCode_CHASSIS_ERROR = 2,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER = 6,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE = 7,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE = 8,
  Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR = 9,
  Chassis_ErrorCode_MANUAL_INTERVENTION = 3,
  Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD = 4,
  Chassis_ErrorCode_UNKNOWN_ERROR = 5,
  Chassis_ErrorCode_Chassis_ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Chassis_ErrorCode_Chassis_ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Chassis_ErrorCode_IsValid(int value);
constexpr Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MIN = Chassis_ErrorCode_NO_ERROR;
constexpr Chassis_ErrorCode Chassis_ErrorCode_ErrorCode_MAX = Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR;
constexpr int Chassis_ErrorCode_ErrorCode_ARRAYSIZE = Chassis_ErrorCode_ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Chassis_ErrorCode_descriptor();
template<typename T>
inline const std::string& Chassis_ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Chassis_ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Chassis_ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Chassis_ErrorCode_descriptor(), enum_t_value);
}
inline bool Chassis_ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Chassis_ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Chassis_ErrorCode>(
    Chassis_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Chassis final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.canbus.Chassis) */ {
 public:
  inline Chassis() : Chassis(nullptr) {}
  ~Chassis() override;
  explicit constexpr Chassis(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chassis(const Chassis& from);
  Chassis(Chassis&& from) noexcept
    : Chassis() {
    *this = ::std::move(from);
  }

  inline Chassis& operator=(const Chassis& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chassis& operator=(Chassis&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Chassis& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chassis* internal_default_instance() {
    return reinterpret_cast<const Chassis*>(
               &_Chassis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Chassis& a, Chassis& b) {
    a.Swap(&b);
  }
  inline void Swap(Chassis* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chassis* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Chassis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Chassis>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Chassis& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Chassis& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chassis* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.canbus.Chassis";
  }
  protected:
  explicit Chassis(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Chassis_DrivingMode DrivingMode;
  static constexpr DrivingMode COMPLETE_MANUAL =
    Chassis_DrivingMode_COMPLETE_MANUAL;
  static constexpr DrivingMode COMPLETE_AUTO_DRIVE =
    Chassis_DrivingMode_COMPLETE_AUTO_DRIVE;
  static constexpr DrivingMode AUTO_STEER_ONLY =
    Chassis_DrivingMode_AUTO_STEER_ONLY;
  static constexpr DrivingMode AUTO_SPEED_ONLY =
    Chassis_DrivingMode_AUTO_SPEED_ONLY;
  static constexpr DrivingMode EMERGENCY_MODE =
    Chassis_DrivingMode_EMERGENCY_MODE;
  static inline bool DrivingMode_IsValid(int value) {
    return Chassis_DrivingMode_IsValid(value);
  }
  static constexpr DrivingMode DrivingMode_MIN =
    Chassis_DrivingMode_DrivingMode_MIN;
  static constexpr DrivingMode DrivingMode_MAX =
    Chassis_DrivingMode_DrivingMode_MAX;
  static constexpr int DrivingMode_ARRAYSIZE =
    Chassis_DrivingMode_DrivingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DrivingMode_descriptor() {
    return Chassis_DrivingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& DrivingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DrivingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DrivingMode_Name.");
    return Chassis_DrivingMode_Name(enum_t_value);
  }
  static inline bool DrivingMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DrivingMode* value) {
    return Chassis_DrivingMode_Parse(name, value);
  }

  typedef Chassis_GearPosition GearPosition;
  static constexpr GearPosition GEAR_NONE =
    Chassis_GearPosition_GEAR_NONE;
  static constexpr GearPosition GEAR_PARKING =
    Chassis_GearPosition_GEAR_PARKING;
  static constexpr GearPosition GEAR_REVERSE =
    Chassis_GearPosition_GEAR_REVERSE;
  static constexpr GearPosition GEAR_NEUTRAL =
    Chassis_GearPosition_GEAR_NEUTRAL;
  static constexpr GearPosition GEAR_DRIVE =
    Chassis_GearPosition_GEAR_DRIVE;
  static constexpr GearPosition GEAR_LOW =
    Chassis_GearPosition_GEAR_LOW;
  static constexpr GearPosition GEAR_INVALID =
    Chassis_GearPosition_GEAR_INVALID;
  static inline bool GearPosition_IsValid(int value) {
    return Chassis_GearPosition_IsValid(value);
  }
  static constexpr GearPosition GearPosition_MIN =
    Chassis_GearPosition_GearPosition_MIN;
  static constexpr GearPosition GearPosition_MAX =
    Chassis_GearPosition_GearPosition_MAX;
  static constexpr int GearPosition_ARRAYSIZE =
    Chassis_GearPosition_GearPosition_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GearPosition_descriptor() {
    return Chassis_GearPosition_descriptor();
  }
  template<typename T>
  static inline const std::string& GearPosition_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GearPosition>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GearPosition_Name.");
    return Chassis_GearPosition_Name(enum_t_value);
  }
  static inline bool GearPosition_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      GearPosition* value) {
    return Chassis_GearPosition_Parse(name, value);
  }

  typedef Chassis_ErrorCode ErrorCode;
  static constexpr ErrorCode NO_ERROR =
    Chassis_ErrorCode_NO_ERROR;
  static constexpr ErrorCode CMD_NOT_IN_PERIOD =
    Chassis_ErrorCode_CMD_NOT_IN_PERIOD;
  static constexpr ErrorCode CHASSIS_ERROR =
    Chassis_ErrorCode_CHASSIS_ERROR;
  static constexpr ErrorCode CHASSIS_ERROR_ON_STEER =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_STEER;
  static constexpr ErrorCode CHASSIS_ERROR_ON_BRAKE =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_BRAKE;
  static constexpr ErrorCode CHASSIS_ERROR_ON_THROTTLE =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_THROTTLE;
  static constexpr ErrorCode CHASSIS_ERROR_ON_GEAR =
    Chassis_ErrorCode_CHASSIS_ERROR_ON_GEAR;
  static constexpr ErrorCode MANUAL_INTERVENTION =
    Chassis_ErrorCode_MANUAL_INTERVENTION;
  static constexpr ErrorCode CHASSIS_CAN_NOT_IN_PERIOD =
    Chassis_ErrorCode_CHASSIS_CAN_NOT_IN_PERIOD;
  static constexpr ErrorCode UNKNOWN_ERROR =
    Chassis_ErrorCode_UNKNOWN_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return Chassis_ErrorCode_IsValid(value);
  }
  static constexpr ErrorCode ErrorCode_MIN =
    Chassis_ErrorCode_ErrorCode_MIN;
  static constexpr ErrorCode ErrorCode_MAX =
    Chassis_ErrorCode_ErrorCode_MAX;
  static constexpr int ErrorCode_ARRAYSIZE =
    Chassis_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ErrorCode_descriptor() {
    return Chassis_ErrorCode_descriptor();
  }
  template<typename T>
  static inline const std::string& ErrorCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ErrorCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ErrorCode_Name.");
    return Chassis_ErrorCode_Name(enum_t_value);
  }
  static inline bool ErrorCode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ErrorCode* value) {
    return Chassis_ErrorCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 25,
    kEngineRpmFieldNumber = 4,
    kSpeedMpsFieldNumber = 5,
    kOdometerMFieldNumber = 6,
    kFuelRangeMFieldNumber = 7,
    kThrottlePercentageFieldNumber = 8,
    kBrakePercentageFieldNumber = 9,
    kSteeringPercentageFieldNumber = 11,
    kEngineStartedFieldNumber = 3,
    kParkingBrakeFieldNumber = 13,
    kHighBeamSignalFieldNumber = 14,
    kLowBeamSignalFieldNumber = 15,
    kSteeringTorqueNmFieldNumber = 12,
    kLeftTurnSignalFieldNumber = 16,
    kRightTurnSignalFieldNumber = 17,
    kHornFieldNumber = 18,
    kWiperFieldNumber = 19,
    kDisengageStatusFieldNumber = 20,
    kDrivingModeFieldNumber = 21,
    kErrorCodeFieldNumber = 22,
    kGearLocationFieldNumber = 23,
    kSteeringTimestampFieldNumber = 24,
    kChassisErrorMaskFieldNumber = 26,
  };
  // .autoagric.common.Header header = 25;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autoagric::common::Header& header() const;
  PROTOBUF_NODISCARD ::autoagric::common::Header* release_header();
  ::autoagric::common::Header* mutable_header();
  void set_allocated_header(::autoagric::common::Header* header);
  private:
  const ::autoagric::common::Header& _internal_header() const;
  ::autoagric::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autoagric::common::Header* header);
  ::autoagric::common::Header* unsafe_arena_release_header();

  // float engine_rpm = 4;
  void clear_engine_rpm();
  float engine_rpm() const;
  void set_engine_rpm(float value);
  private:
  float _internal_engine_rpm() const;
  void _internal_set_engine_rpm(float value);
  public:

  // optional float speed_mps = 5;
  bool has_speed_mps() const;
  private:
  bool _internal_has_speed_mps() const;
  public:
  void clear_speed_mps();
  float speed_mps() const;
  void set_speed_mps(float value);
  private:
  float _internal_speed_mps() const;
  void _internal_set_speed_mps(float value);
  public:

  // float odometer_m = 6;
  void clear_odometer_m();
  float odometer_m() const;
  void set_odometer_m(float value);
  private:
  float _internal_odometer_m() const;
  void _internal_set_odometer_m(float value);
  public:

  // int32 fuel_range_m = 7;
  void clear_fuel_range_m();
  int32_t fuel_range_m() const;
  void set_fuel_range_m(int32_t value);
  private:
  int32_t _internal_fuel_range_m() const;
  void _internal_set_fuel_range_m(int32_t value);
  public:

  // float throttle_percentage = 8;
  void clear_throttle_percentage();
  float throttle_percentage() const;
  void set_throttle_percentage(float value);
  private:
  float _internal_throttle_percentage() const;
  void _internal_set_throttle_percentage(float value);
  public:

  // float brake_percentage = 9;
  void clear_brake_percentage();
  float brake_percentage() const;
  void set_brake_percentage(float value);
  private:
  float _internal_brake_percentage() const;
  void _internal_set_brake_percentage(float value);
  public:

  // optional float steering_percentage = 11;
  bool has_steering_percentage() const;
  private:
  bool _internal_has_steering_percentage() const;
  public:
  void clear_steering_percentage();
  float steering_percentage() const;
  void set_steering_percentage(float value);
  private:
  float _internal_steering_percentage() const;
  void _internal_set_steering_percentage(float value);
  public:

  // bool engine_started = 3;
  void clear_engine_started();
  bool engine_started() const;
  void set_engine_started(bool value);
  private:
  bool _internal_engine_started() const;
  void _internal_set_engine_started(bool value);
  public:

  // bool parking_brake = 13;
  void clear_parking_brake();
  bool parking_brake() const;
  void set_parking_brake(bool value);
  private:
  bool _internal_parking_brake() const;
  void _internal_set_parking_brake(bool value);
  public:

  // bool high_beam_signal = 14;
  void clear_high_beam_signal();
  bool high_beam_signal() const;
  void set_high_beam_signal(bool value);
  private:
  bool _internal_high_beam_signal() const;
  void _internal_set_high_beam_signal(bool value);
  public:

  // bool low_beam_signal = 15;
  void clear_low_beam_signal();
  bool low_beam_signal() const;
  void set_low_beam_signal(bool value);
  private:
  bool _internal_low_beam_signal() const;
  void _internal_set_low_beam_signal(bool value);
  public:

  // float steering_torque_nm = 12;
  void clear_steering_torque_nm();
  float steering_torque_nm() const;
  void set_steering_torque_nm(float value);
  private:
  float _internal_steering_torque_nm() const;
  void _internal_set_steering_torque_nm(float value);
  public:

  // bool left_turn_signal = 16;
  void clear_left_turn_signal();
  bool left_turn_signal() const;
  void set_left_turn_signal(bool value);
  private:
  bool _internal_left_turn_signal() const;
  void _internal_set_left_turn_signal(bool value);
  public:

  // bool right_turn_signal = 17;
  void clear_right_turn_signal();
  bool right_turn_signal() const;
  void set_right_turn_signal(bool value);
  private:
  bool _internal_right_turn_signal() const;
  void _internal_set_right_turn_signal(bool value);
  public:

  // bool horn = 18;
  void clear_horn();
  bool horn() const;
  void set_horn(bool value);
  private:
  bool _internal_horn() const;
  void _internal_set_horn(bool value);
  public:

  // bool wiper = 19;
  void clear_wiper();
  bool wiper() const;
  void set_wiper(bool value);
  private:
  bool _internal_wiper() const;
  void _internal_set_wiper(bool value);
  public:

  // bool disengage_status = 20;
  void clear_disengage_status();
  bool disengage_status() const;
  void set_disengage_status(bool value);
  private:
  bool _internal_disengage_status() const;
  void _internal_set_disengage_status(bool value);
  public:

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 21;
  void clear_driving_mode();
  ::autoagric::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value);
  private:
  ::autoagric::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value);
  public:

  // .autoagric.canbus.Chassis.ErrorCode error_code = 22;
  void clear_error_code();
  ::autoagric::canbus::Chassis_ErrorCode error_code() const;
  void set_error_code(::autoagric::canbus::Chassis_ErrorCode value);
  private:
  ::autoagric::canbus::Chassis_ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::autoagric::canbus::Chassis_ErrorCode value);
  public:

  // optional .autoagric.canbus.Chassis.GearPosition gear_location = 23;
  bool has_gear_location() const;
  private:
  bool _internal_has_gear_location() const;
  public:
  void clear_gear_location();
  ::autoagric::canbus::Chassis_GearPosition gear_location() const;
  void set_gear_location(::autoagric::canbus::Chassis_GearPosition value);
  private:
  ::autoagric::canbus::Chassis_GearPosition _internal_gear_location() const;
  void _internal_set_gear_location(::autoagric::canbus::Chassis_GearPosition value);
  public:

  // double steering_timestamp = 24;
  void clear_steering_timestamp();
  double steering_timestamp() const;
  void set_steering_timestamp(double value);
  private:
  double _internal_steering_timestamp() const;
  void _internal_set_steering_timestamp(double value);
  public:

  // int32 chassis_error_mask = 26;
  void clear_chassis_error_mask();
  int32_t chassis_error_mask() const;
  void set_chassis_error_mask(int32_t value);
  private:
  int32_t _internal_chassis_error_mask() const;
  void _internal_set_chassis_error_mask(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.canbus.Chassis)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autoagric::common::Header* header_;
  float engine_rpm_;
  float speed_mps_;
  float odometer_m_;
  int32_t fuel_range_m_;
  float throttle_percentage_;
  float brake_percentage_;
  float steering_percentage_;
  bool engine_started_;
  bool parking_brake_;
  bool high_beam_signal_;
  bool low_beam_signal_;
  float steering_torque_nm_;
  bool left_turn_signal_;
  bool right_turn_signal_;
  bool horn_;
  bool wiper_;
  bool disengage_status_;
  int driving_mode_;
  int error_code_;
  int gear_location_;
  double steering_timestamp_;
  int32_t chassis_error_mask_;
  friend struct ::TableStruct_autoagric_2fcanbus_2fchassis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Chassis

// bool engine_started = 3;
inline void Chassis::clear_engine_started() {
  engine_started_ = false;
}
inline bool Chassis::_internal_engine_started() const {
  return engine_started_;
}
inline bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.engine_started)
  return _internal_engine_started();
}
inline void Chassis::_internal_set_engine_started(bool value) {
  
  engine_started_ = value;
}
inline void Chassis::set_engine_started(bool value) {
  _internal_set_engine_started(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.engine_started)
}

// float engine_rpm = 4;
inline void Chassis::clear_engine_rpm() {
  engine_rpm_ = 0;
}
inline float Chassis::_internal_engine_rpm() const {
  return engine_rpm_;
}
inline float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.engine_rpm)
  return _internal_engine_rpm();
}
inline void Chassis::_internal_set_engine_rpm(float value) {
  
  engine_rpm_ = value;
}
inline void Chassis::set_engine_rpm(float value) {
  _internal_set_engine_rpm(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5;
inline bool Chassis::_internal_has_speed_mps() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Chassis::has_speed_mps() const {
  return _internal_has_speed_mps();
}
inline void Chassis::clear_speed_mps() {
  speed_mps_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Chassis::_internal_speed_mps() const {
  return speed_mps_;
}
inline float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.speed_mps)
  return _internal_speed_mps();
}
inline void Chassis::_internal_set_speed_mps(float value) {
  _has_bits_[0] |= 0x00000001u;
  speed_mps_ = value;
}
inline void Chassis::set_speed_mps(float value) {
  _internal_set_speed_mps(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.speed_mps)
}

// float odometer_m = 6;
inline void Chassis::clear_odometer_m() {
  odometer_m_ = 0;
}
inline float Chassis::_internal_odometer_m() const {
  return odometer_m_;
}
inline float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.odometer_m)
  return _internal_odometer_m();
}
inline void Chassis::_internal_set_odometer_m(float value) {
  
  odometer_m_ = value;
}
inline void Chassis::set_odometer_m(float value) {
  _internal_set_odometer_m(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.odometer_m)
}

// int32 fuel_range_m = 7;
inline void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
}
inline int32_t Chassis::_internal_fuel_range_m() const {
  return fuel_range_m_;
}
inline int32_t Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.fuel_range_m)
  return _internal_fuel_range_m();
}
inline void Chassis::_internal_set_fuel_range_m(int32_t value) {
  
  fuel_range_m_ = value;
}
inline void Chassis::set_fuel_range_m(int32_t value) {
  _internal_set_fuel_range_m(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.fuel_range_m)
}

// float throttle_percentage = 8;
inline void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = 0;
}
inline float Chassis::_internal_throttle_percentage() const {
  return throttle_percentage_;
}
inline float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.throttle_percentage)
  return _internal_throttle_percentage();
}
inline void Chassis::_internal_set_throttle_percentage(float value) {
  
  throttle_percentage_ = value;
}
inline void Chassis::set_throttle_percentage(float value) {
  _internal_set_throttle_percentage(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.throttle_percentage)
}

// float brake_percentage = 9;
inline void Chassis::clear_brake_percentage() {
  brake_percentage_ = 0;
}
inline float Chassis::_internal_brake_percentage() const {
  return brake_percentage_;
}
inline float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.brake_percentage)
  return _internal_brake_percentage();
}
inline void Chassis::_internal_set_brake_percentage(float value) {
  
  brake_percentage_ = value;
}
inline void Chassis::set_brake_percentage(float value) {
  _internal_set_brake_percentage(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11;
inline bool Chassis::_internal_has_steering_percentage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Chassis::has_steering_percentage() const {
  return _internal_has_steering_percentage();
}
inline void Chassis::clear_steering_percentage() {
  steering_percentage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Chassis::_internal_steering_percentage() const {
  return steering_percentage_;
}
inline float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.steering_percentage)
  return _internal_steering_percentage();
}
inline void Chassis::_internal_set_steering_percentage(float value) {
  _has_bits_[0] |= 0x00000002u;
  steering_percentage_ = value;
}
inline void Chassis::set_steering_percentage(float value) {
  _internal_set_steering_percentage(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.steering_percentage)
}

// float steering_torque_nm = 12;
inline void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = 0;
}
inline float Chassis::_internal_steering_torque_nm() const {
  return steering_torque_nm_;
}
inline float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.steering_torque_nm)
  return _internal_steering_torque_nm();
}
inline void Chassis::_internal_set_steering_torque_nm(float value) {
  
  steering_torque_nm_ = value;
}
inline void Chassis::set_steering_torque_nm(float value) {
  _internal_set_steering_torque_nm(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.steering_torque_nm)
}

// bool parking_brake = 13;
inline void Chassis::clear_parking_brake() {
  parking_brake_ = false;
}
inline bool Chassis::_internal_parking_brake() const {
  return parking_brake_;
}
inline bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.parking_brake)
  return _internal_parking_brake();
}
inline void Chassis::_internal_set_parking_brake(bool value) {
  
  parking_brake_ = value;
}
inline void Chassis::set_parking_brake(bool value) {
  _internal_set_parking_brake(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.parking_brake)
}

// bool high_beam_signal = 14;
inline void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
}
inline bool Chassis::_internal_high_beam_signal() const {
  return high_beam_signal_;
}
inline bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.high_beam_signal)
  return _internal_high_beam_signal();
}
inline void Chassis::_internal_set_high_beam_signal(bool value) {
  
  high_beam_signal_ = value;
}
inline void Chassis::set_high_beam_signal(bool value) {
  _internal_set_high_beam_signal(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.high_beam_signal)
}

// bool low_beam_signal = 15;
inline void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
}
inline bool Chassis::_internal_low_beam_signal() const {
  return low_beam_signal_;
}
inline bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.low_beam_signal)
  return _internal_low_beam_signal();
}
inline void Chassis::_internal_set_low_beam_signal(bool value) {
  
  low_beam_signal_ = value;
}
inline void Chassis::set_low_beam_signal(bool value) {
  _internal_set_low_beam_signal(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.low_beam_signal)
}

// bool left_turn_signal = 16;
inline void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
}
inline bool Chassis::_internal_left_turn_signal() const {
  return left_turn_signal_;
}
inline bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.left_turn_signal)
  return _internal_left_turn_signal();
}
inline void Chassis::_internal_set_left_turn_signal(bool value) {
  
  left_turn_signal_ = value;
}
inline void Chassis::set_left_turn_signal(bool value) {
  _internal_set_left_turn_signal(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.left_turn_signal)
}

// bool right_turn_signal = 17;
inline void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
}
inline bool Chassis::_internal_right_turn_signal() const {
  return right_turn_signal_;
}
inline bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.right_turn_signal)
  return _internal_right_turn_signal();
}
inline void Chassis::_internal_set_right_turn_signal(bool value) {
  
  right_turn_signal_ = value;
}
inline void Chassis::set_right_turn_signal(bool value) {
  _internal_set_right_turn_signal(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.right_turn_signal)
}

// bool horn = 18;
inline void Chassis::clear_horn() {
  horn_ = false;
}
inline bool Chassis::_internal_horn() const {
  return horn_;
}
inline bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.horn)
  return _internal_horn();
}
inline void Chassis::_internal_set_horn(bool value) {
  
  horn_ = value;
}
inline void Chassis::set_horn(bool value) {
  _internal_set_horn(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.horn)
}

// bool wiper = 19;
inline void Chassis::clear_wiper() {
  wiper_ = false;
}
inline bool Chassis::_internal_wiper() const {
  return wiper_;
}
inline bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.wiper)
  return _internal_wiper();
}
inline void Chassis::_internal_set_wiper(bool value) {
  
  wiper_ = value;
}
inline void Chassis::set_wiper(bool value) {
  _internal_set_wiper(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.wiper)
}

// bool disengage_status = 20;
inline void Chassis::clear_disengage_status() {
  disengage_status_ = false;
}
inline bool Chassis::_internal_disengage_status() const {
  return disengage_status_;
}
inline bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.disengage_status)
  return _internal_disengage_status();
}
inline void Chassis::_internal_set_disengage_status(bool value) {
  
  disengage_status_ = value;
}
inline void Chassis::set_disengage_status(bool value) {
  _internal_set_disengage_status(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.disengage_status)
}

// .autoagric.canbus.Chassis.DrivingMode driving_mode = 21;
inline void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::autoagric::canbus::Chassis_DrivingMode Chassis::_internal_driving_mode() const {
  return static_cast< ::autoagric::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline ::autoagric::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.driving_mode)
  return _internal_driving_mode();
}
inline void Chassis::_internal_set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value) {
  
  driving_mode_ = value;
}
inline void Chassis::set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.driving_mode)
}

// .autoagric.canbus.Chassis.ErrorCode error_code = 22;
inline void Chassis::clear_error_code() {
  error_code_ = 0;
}
inline ::autoagric::canbus::Chassis_ErrorCode Chassis::_internal_error_code() const {
  return static_cast< ::autoagric::canbus::Chassis_ErrorCode >(error_code_);
}
inline ::autoagric::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.error_code)
  return _internal_error_code();
}
inline void Chassis::_internal_set_error_code(::autoagric::canbus::Chassis_ErrorCode value) {
  
  error_code_ = value;
}
inline void Chassis::set_error_code(::autoagric::canbus::Chassis_ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.error_code)
}

// optional .autoagric.canbus.Chassis.GearPosition gear_location = 23;
inline bool Chassis::_internal_has_gear_location() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Chassis::has_gear_location() const {
  return _internal_has_gear_location();
}
inline void Chassis::clear_gear_location() {
  gear_location_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::autoagric::canbus::Chassis_GearPosition Chassis::_internal_gear_location() const {
  return static_cast< ::autoagric::canbus::Chassis_GearPosition >(gear_location_);
}
inline ::autoagric::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.gear_location)
  return _internal_gear_location();
}
inline void Chassis::_internal_set_gear_location(::autoagric::canbus::Chassis_GearPosition value) {
  _has_bits_[0] |= 0x00000004u;
  gear_location_ = value;
}
inline void Chassis::set_gear_location(::autoagric::canbus::Chassis_GearPosition value) {
  _internal_set_gear_location(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.gear_location)
}

// double steering_timestamp = 24;
inline void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
}
inline double Chassis::_internal_steering_timestamp() const {
  return steering_timestamp_;
}
inline double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.steering_timestamp)
  return _internal_steering_timestamp();
}
inline void Chassis::_internal_set_steering_timestamp(double value) {
  
  steering_timestamp_ = value;
}
inline void Chassis::set_steering_timestamp(double value) {
  _internal_set_steering_timestamp(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.steering_timestamp)
}

// .autoagric.common.Header header = 25;
inline bool Chassis::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Chassis::has_header() const {
  return _internal_has_header();
}
inline const ::autoagric::common::Header& Chassis::_internal_header() const {
  const ::autoagric::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::common::Header&>(
      ::autoagric::common::_Header_default_instance_);
}
inline const ::autoagric::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.header)
  return _internal_header();
}
inline void Chassis::unsafe_arena_set_allocated_header(
    ::autoagric::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.canbus.Chassis.header)
}
inline ::autoagric::common::Header* Chassis::release_header() {
  
  ::autoagric::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::common::Header* Chassis::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autoagric.canbus.Chassis.header)
  
  ::autoagric::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::autoagric::common::Header* Chassis::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::autoagric::common::Header* Chassis::mutable_header() {
  ::autoagric::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autoagric.canbus.Chassis.header)
  return _msg;
}
inline void Chassis::set_allocated_header(::autoagric::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autoagric.canbus.Chassis.header)
}

// int32 chassis_error_mask = 26;
inline void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
}
inline int32_t Chassis::_internal_chassis_error_mask() const {
  return chassis_error_mask_;
}
inline int32_t Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:autoagric.canbus.Chassis.chassis_error_mask)
  return _internal_chassis_error_mask();
}
inline void Chassis::_internal_set_chassis_error_mask(int32_t value) {
  
  chassis_error_mask_ = value;
}
inline void Chassis::set_chassis_error_mask(int32_t value) {
  _internal_set_chassis_error_mask(value);
  // @@protoc_insertion_point(field_set:autoagric.canbus.Chassis.chassis_error_mask)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace autoagric

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autoagric::canbus::Chassis_DrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::canbus::Chassis_DrivingMode>() {
  return ::autoagric::canbus::Chassis_DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::autoagric::canbus::Chassis_GearPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::canbus::Chassis_GearPosition>() {
  return ::autoagric::canbus::Chassis_GearPosition_descriptor();
}
template <> struct is_proto_enum< ::autoagric::canbus::Chassis_ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::canbus::Chassis_ErrorCode>() {
  return ::autoagric::canbus::Chassis_ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcanbus_2fchassis_2eproto
