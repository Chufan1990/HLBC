// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/prediction/prediction_obstacle.proto

#include "autoagric/prediction/prediction_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace prediction {
constexpr ObstacleIntent::ObstacleIntent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct ObstacleIntentDefaultTypeInternal {
  constexpr ObstacleIntentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleIntentDefaultTypeInternal() {}
  union {
    ObstacleIntent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleIntentDefaultTypeInternal _ObstacleIntent_default_instance_;
constexpr Intent::Intent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct IntentDefaultTypeInternal {
  constexpr IntentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntentDefaultTypeInternal() {}
  union {
    Intent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntentDefaultTypeInternal _Intent_default_instance_;
constexpr PredictionObstacle::PredictionObstacle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_()
  , feature_()
  , perception_obstacle_(nullptr)
  , intent_(nullptr)
  , priority_(nullptr)
  , interactive_tag_(nullptr)
  , timestamp_(0)
  , predicted_period_(0)
  , is_static_(false){}
struct PredictionObstacleDefaultTypeInternal {
  constexpr PredictionObstacleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionObstacleDefaultTypeInternal() {}
  union {
    PredictionObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PredictionObstacleDefaultTypeInternal _PredictionObstacle_default_instance_;
constexpr PredictionObstacles::PredictionObstacles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : prediction_obstacle_()
  , header_(nullptr)
  , intent_(nullptr)
  , scenario_(nullptr)
  , start_timestamp_(0)
  , end_timestamp_(0)
  , perception_error_code_(0)
{}
struct PredictionObstaclesDefaultTypeInternal {
  constexpr PredictionObstaclesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionObstaclesDefaultTypeInternal() {}
  union {
    PredictionObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PredictionObstaclesDefaultTypeInternal _PredictionObstacles_default_instance_;
}  // namespace prediction
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fprediction_2fprediction_5fobstacle_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fprediction_2fprediction_5fobstacle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::ObstacleIntent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::ObstacleIntent, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Intent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Intent, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, perception_obstacle_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, predicted_period_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, trajectory_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, intent_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, priority_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, interactive_tag_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, is_static_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacle, feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, header_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, prediction_obstacle_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, perception_error_code_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, intent_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionObstacles, scenario_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::prediction::ObstacleIntent)},
  { 7, -1, -1, sizeof(::autoagric::prediction::Intent)},
  { 14, -1, -1, sizeof(::autoagric::prediction::PredictionObstacle)},
  { 29, -1, -1, sizeof(::autoagric::prediction::PredictionObstacles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_ObstacleIntent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_Intent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_PredictionObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_PredictionObstacles_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.autoagric/prediction/prediction_obstac"
  "le.proto\022\024autoagric.prediction\032!autoagri"
  "c/common/error_code.proto\032\035autoagric/com"
  "mon/header.proto\032#autoagric/prediction/s"
  "cenario.proto\032.autoagric/perception/perc"
  "eption_obstacle.proto\032\"autoagric/predict"
  "ion/feature.proto\"\360\001\n\016ObstacleIntent\0227\n\004"
  "type\030\001 \001(\0162).autoagric.prediction.Obstac"
  "leIntent.Type\"\244\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004S"
  "TOP\020\001\022\016\n\nSTATIONARY\020\002\022\n\n\006MOVING\020\003\022\017\n\013CHA"
  "NGE_LANE\020\004\022\024\n\020LOW_ACCELERATION\020\005\022\025\n\021HIGH"
  "_ACCELERATION\020\006\022\024\n\020LOW_DECELERATION\020\007\022\025\n"
  "\021HIGH_DECELERATION\020\010\"u\n\006Intent\022/\n\004type\030\001"
  " \001(\0162!.autoagric.prediction.Intent.Type\""
  ":\n\004Type\022\013\n\007UNKNOWN\020\000\022\010\n\004STOP\020\001\022\n\n\006CRUISE"
  "\020\002\022\017\n\013CHANGE_LANE\020\003\"\270\003\n\022PredictionObstac"
  "le\022E\n\023perception_obstacle\030\001 \001(\0132(.autoag"
  "ric.perception.PerceptionObstacle\022\021\n\ttim"
  "estamp\030\002 \001(\001\022\030\n\020predicted_period\030\003 \001(\001\0224"
  "\n\ntrajectory\030\004 \003(\0132 .autoagric.predictio"
  "n.Trajectory\0224\n\006intent\030\005 \001(\0132$.autoagric"
  ".prediction.ObstacleIntent\0228\n\010priority\030\006"
  " \001(\0132&.autoagric.prediction.ObstaclePrio"
  "rity\022E\n\017interactive_tag\030\t \001(\0132,.autoagri"
  "c.prediction.ObstacleInteractiveTag\022\021\n\ti"
  "s_static\030\007 \001(\010\022.\n\007feature\030\010 \003(\0132\035.autoag"
  "ric.prediction.Feature\"\322\002\n\023PredictionObs"
  "tacles\022(\n\006header\030\001 \001(\0132\030.autoagric.commo"
  "n.Header\022E\n\023prediction_obstacle\030\002 \003(\0132(."
  "autoagric.prediction.PredictionObstacle\022"
  ":\n\025perception_error_code\030\003 \001(\0162\033.autoagr"
  "ic.common.ErrorCode\022\027\n\017start_timestamp\030\004"
  " \001(\001\022\025\n\rend_timestamp\030\005 \001(\001\022,\n\006intent\030\006 "
  "\001(\0132\034.autoagric.prediction.Intent\0220\n\010sce"
  "nario\030\007 \001(\0132\036.autoagric.prediction.Scena"
  "riob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_deps[5] = {
  &::descriptor_table_autoagric_2fcommon_2ferror_5fcode_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fheader_2eproto,
  &::descriptor_table_autoagric_2fperception_2fperception_5fobstacle_2eproto,
  &::descriptor_table_autoagric_2fprediction_2ffeature_2eproto,
  &::descriptor_table_autoagric_2fprediction_2fscenario_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto = {
  false, false, 1411, descriptor_table_protodef_autoagric_2fprediction_2fprediction_5fobstacle_2eproto, "autoagric/prediction/prediction_obstacle.proto", 
  &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_once, descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_deps, 5, 4,
  schemas, file_default_instances, TableStruct_autoagric_2fprediction_2fprediction_5fobstacle_2eproto::offsets,
  file_level_metadata_autoagric_2fprediction_2fprediction_5fobstacle_2eproto, file_level_enum_descriptors_autoagric_2fprediction_2fprediction_5fobstacle_2eproto, file_level_service_descriptors_autoagric_2fprediction_2fprediction_5fobstacle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_getter() {
  return &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fprediction_2fprediction_5fobstacle_2eproto(&descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto);
namespace autoagric {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleIntent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[0];
}
bool ObstacleIntent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstacleIntent_Type ObstacleIntent::UNKNOWN;
constexpr ObstacleIntent_Type ObstacleIntent::STOP;
constexpr ObstacleIntent_Type ObstacleIntent::STATIONARY;
constexpr ObstacleIntent_Type ObstacleIntent::MOVING;
constexpr ObstacleIntent_Type ObstacleIntent::CHANGE_LANE;
constexpr ObstacleIntent_Type ObstacleIntent::LOW_ACCELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::HIGH_ACCELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::LOW_DECELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::HIGH_DECELERATION;
constexpr ObstacleIntent_Type ObstacleIntent::Type_MIN;
constexpr ObstacleIntent_Type ObstacleIntent::Type_MAX;
constexpr int ObstacleIntent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Intent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto);
  return file_level_enum_descriptors_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[1];
}
bool Intent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Intent_Type Intent::UNKNOWN;
constexpr Intent_Type Intent::STOP;
constexpr Intent_Type Intent::CRUISE;
constexpr Intent_Type Intent::CHANGE_LANE;
constexpr Intent_Type Intent::Type_MIN;
constexpr Intent_Type Intent::Type_MAX;
constexpr int Intent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ObstacleIntent::_Internal {
 public:
};

ObstacleIntent::ObstacleIntent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.ObstacleIntent)
}
ObstacleIntent::ObstacleIntent(const ObstacleIntent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.ObstacleIntent)
}

inline void ObstacleIntent::SharedCtor() {
type_ = 0;
}

ObstacleIntent::~ObstacleIntent() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.ObstacleIntent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleIntent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleIntent::ArenaDtor(void* object) {
  ObstacleIntent* _this = reinterpret_cast< ObstacleIntent* >(object);
  (void)_this;
}
void ObstacleIntent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleIntent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleIntent::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.ObstacleIntent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleIntent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.prediction.ObstacleIntent.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::autoagric::prediction::ObstacleIntent_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleIntent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.ObstacleIntent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.prediction.ObstacleIntent.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.ObstacleIntent)
  return target;
}

size_t ObstacleIntent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.ObstacleIntent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.prediction.ObstacleIntent.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleIntent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleIntent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleIntent::GetClassData() const { return &_class_data_; }

void ObstacleIntent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleIntent *>(to)->MergeFrom(
      static_cast<const ObstacleIntent &>(from));
}


void ObstacleIntent::MergeFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.ObstacleIntent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleIntent::CopyFrom(const ObstacleIntent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.ObstacleIntent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleIntent::IsInitialized() const {
  return true;
}

void ObstacleIntent::InternalSwap(ObstacleIntent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleIntent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[0]);
}

// ===================================================================

class Intent::_Internal {
 public:
};

Intent::Intent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.Intent)
}
Intent::Intent(const Intent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.Intent)
}

inline void Intent::SharedCtor() {
type_ = 0;
}

Intent::~Intent() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.Intent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Intent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Intent::ArenaDtor(void* object) {
  Intent* _this = reinterpret_cast< Intent* >(object);
  (void)_this;
}
void Intent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Intent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Intent::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.Intent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Intent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.prediction.Intent.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::autoagric::prediction::Intent_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Intent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.Intent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.prediction.Intent.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.Intent)
  return target;
}

size_t Intent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.Intent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.prediction.Intent.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Intent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Intent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Intent::GetClassData() const { return &_class_data_; }

void Intent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Intent *>(to)->MergeFrom(
      static_cast<const Intent &>(from));
}


void Intent::MergeFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.Intent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Intent::CopyFrom(const Intent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.Intent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  return true;
}

void Intent::InternalSwap(Intent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Intent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[1]);
}

// ===================================================================

class PredictionObstacle::_Internal {
 public:
  static const ::autoagric::perception::PerceptionObstacle& perception_obstacle(const PredictionObstacle* msg);
  static const ::autoagric::prediction::ObstacleIntent& intent(const PredictionObstacle* msg);
  static const ::autoagric::prediction::ObstaclePriority& priority(const PredictionObstacle* msg);
  static const ::autoagric::prediction::ObstacleInteractiveTag& interactive_tag(const PredictionObstacle* msg);
};

const ::autoagric::perception::PerceptionObstacle&
PredictionObstacle::_Internal::perception_obstacle(const PredictionObstacle* msg) {
  return *msg->perception_obstacle_;
}
const ::autoagric::prediction::ObstacleIntent&
PredictionObstacle::_Internal::intent(const PredictionObstacle* msg) {
  return *msg->intent_;
}
const ::autoagric::prediction::ObstaclePriority&
PredictionObstacle::_Internal::priority(const PredictionObstacle* msg) {
  return *msg->priority_;
}
const ::autoagric::prediction::ObstacleInteractiveTag&
PredictionObstacle::_Internal::interactive_tag(const PredictionObstacle* msg) {
  return *msg->interactive_tag_;
}
void PredictionObstacle::clear_perception_obstacle() {
  if (GetArenaForAllocation() == nullptr && perception_obstacle_ != nullptr) {
    delete perception_obstacle_;
  }
  perception_obstacle_ = nullptr;
}
void PredictionObstacle::clear_trajectory() {
  trajectory_.Clear();
}
void PredictionObstacle::clear_priority() {
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
}
void PredictionObstacle::clear_interactive_tag() {
  if (GetArenaForAllocation() == nullptr && interactive_tag_ != nullptr) {
    delete interactive_tag_;
  }
  interactive_tag_ = nullptr;
}
void PredictionObstacle::clear_feature() {
  feature_.Clear();
}
PredictionObstacle::PredictionObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trajectory_(arena),
  feature_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.PredictionObstacle)
}
PredictionObstacle::PredictionObstacle(const PredictionObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectory_(from.trajectory_),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_perception_obstacle()) {
    perception_obstacle_ = new ::autoagric::perception::PerceptionObstacle(*from.perception_obstacle_);
  } else {
    perception_obstacle_ = nullptr;
  }
  if (from._internal_has_intent()) {
    intent_ = new ::autoagric::prediction::ObstacleIntent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::autoagric::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_interactive_tag()) {
    interactive_tag_ = new ::autoagric::prediction::ObstacleInteractiveTag(*from.interactive_tag_);
  } else {
    interactive_tag_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(is_static_));
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.PredictionObstacle)
}

inline void PredictionObstacle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&perception_obstacle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_static_) -
    reinterpret_cast<char*>(&perception_obstacle_)) + sizeof(is_static_));
}

PredictionObstacle::~PredictionObstacle() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.PredictionObstacle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete perception_obstacle_;
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete interactive_tag_;
}

void PredictionObstacle::ArenaDtor(void* object) {
  PredictionObstacle* _this = reinterpret_cast< PredictionObstacle* >(object);
  (void)_this;
}
void PredictionObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictionObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.PredictionObstacle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_.Clear();
  feature_.Clear();
  if (GetArenaForAllocation() == nullptr && perception_obstacle_ != nullptr) {
    delete perception_obstacle_;
  }
  perception_obstacle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && intent_ != nullptr) {
    delete intent_;
  }
  intent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaForAllocation() == nullptr && interactive_tag_ != nullptr) {
    delete interactive_tag_;
  }
  interactive_tag_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_static_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(is_static_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.perception.PerceptionObstacle perception_obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_perception_obstacle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double predicted_period = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          predicted_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.prediction.Trajectory trajectory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.ObstacleIntent intent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.ObstaclePriority priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_static = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          is_static_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.prediction.Feature feature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.ObstacleInteractiveTag interactive_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_interactive_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionObstacle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.PredictionObstacle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.perception.PerceptionObstacle perception_obstacle = 1;
  if (this->_internal_has_perception_obstacle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::perception_obstacle(this), target, stream);
  }

  // double timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // double predicted_period = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_predicted_period = this->_internal_predicted_period();
  uint64_t raw_predicted_period;
  memcpy(&raw_predicted_period, &tmp_predicted_period, sizeof(tmp_predicted_period));
  if (raw_predicted_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_predicted_period(), target);
  }

  // repeated .autoagric.prediction.Trajectory trajectory = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_trajectory(i), target, stream);
  }

  // .autoagric.prediction.ObstacleIntent intent = 5;
  if (this->_internal_has_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::intent(this), target, stream);
  }

  // .autoagric.prediction.ObstaclePriority priority = 6;
  if (this->_internal_has_priority()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::priority(this), target, stream);
  }

  // bool is_static = 7;
  if (this->_internal_is_static() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_static(), target);
  }

  // repeated .autoagric.prediction.Feature feature = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_feature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_feature(i), target, stream);
  }

  // .autoagric.prediction.ObstacleInteractiveTag interactive_tag = 9;
  if (this->_internal_has_interactive_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::interactive_tag(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.PredictionObstacle)
  return target;
}

size_t PredictionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.PredictionObstacle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.prediction.Trajectory trajectory = 4;
  total_size += 1UL * this->_internal_trajectory_size();
  for (const auto& msg : this->trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autoagric.prediction.Feature feature = 8;
  total_size += 1UL * this->_internal_feature_size();
  for (const auto& msg : this->feature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .autoagric.perception.PerceptionObstacle perception_obstacle = 1;
  if (this->_internal_has_perception_obstacle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *perception_obstacle_);
  }

  // .autoagric.prediction.ObstacleIntent intent = 5;
  if (this->_internal_has_intent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intent_);
  }

  // .autoagric.prediction.ObstaclePriority priority = 6;
  if (this->_internal_has_priority()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .autoagric.prediction.ObstacleInteractiveTag interactive_tag = 9;
  if (this->_internal_has_interactive_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interactive_tag_);
  }

  // double timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  // double predicted_period = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_predicted_period = this->_internal_predicted_period();
  uint64_t raw_predicted_period;
  memcpy(&raw_predicted_period, &tmp_predicted_period, sizeof(tmp_predicted_period));
  if (raw_predicted_period != 0) {
    total_size += 1 + 8;
  }

  // bool is_static = 7;
  if (this->_internal_is_static() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionObstacle::GetClassData() const { return &_class_data_; }

void PredictionObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionObstacle *>(to)->MergeFrom(
      static_cast<const PredictionObstacle &>(from));
}


void PredictionObstacle::MergeFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.PredictionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_.MergeFrom(from.trajectory_);
  feature_.MergeFrom(from.feature_);
  if (from._internal_has_perception_obstacle()) {
    _internal_mutable_perception_obstacle()->::autoagric::perception::PerceptionObstacle::MergeFrom(from._internal_perception_obstacle());
  }
  if (from._internal_has_intent()) {
    _internal_mutable_intent()->::autoagric::prediction::ObstacleIntent::MergeFrom(from._internal_intent());
  }
  if (from._internal_has_priority()) {
    _internal_mutable_priority()->::autoagric::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
  }
  if (from._internal_has_interactive_tag()) {
    _internal_mutable_interactive_tag()->::autoagric::prediction::ObstacleInteractiveTag::MergeFrom(from._internal_interactive_tag());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_predicted_period = from._internal_predicted_period();
  uint64_t raw_predicted_period;
  memcpy(&raw_predicted_period, &tmp_predicted_period, sizeof(tmp_predicted_period));
  if (raw_predicted_period != 0) {
    _internal_set_predicted_period(from._internal_predicted_period());
  }
  if (from._internal_is_static() != 0) {
    _internal_set_is_static(from._internal_is_static());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionObstacle::CopyFrom(const PredictionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.PredictionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacle::IsInitialized() const {
  return true;
}

void PredictionObstacle::InternalSwap(PredictionObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  trajectory_.InternalSwap(&other->trajectory_);
  feature_.InternalSwap(&other->feature_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionObstacle, is_static_)
      + sizeof(PredictionObstacle::is_static_)
      - PROTOBUF_FIELD_OFFSET(PredictionObstacle, perception_obstacle_)>(
          reinterpret_cast<char*>(&perception_obstacle_),
          reinterpret_cast<char*>(&other->perception_obstacle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[2]);
}

// ===================================================================

class PredictionObstacles::_Internal {
 public:
  static const ::autoagric::common::Header& header(const PredictionObstacles* msg);
  static const ::autoagric::prediction::Intent& intent(const PredictionObstacles* msg);
  static const ::autoagric::prediction::Scenario& scenario(const PredictionObstacles* msg);
};

const ::autoagric::common::Header&
PredictionObstacles::_Internal::header(const PredictionObstacles* msg) {
  return *msg->header_;
}
const ::autoagric::prediction::Intent&
PredictionObstacles::_Internal::intent(const PredictionObstacles* msg) {
  return *msg->intent_;
}
const ::autoagric::prediction::Scenario&
PredictionObstacles::_Internal::scenario(const PredictionObstacles* msg) {
  return *msg->scenario_;
}
void PredictionObstacles::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void PredictionObstacles::clear_scenario() {
  if (GetArenaForAllocation() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
}
PredictionObstacles::PredictionObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  prediction_obstacle_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.PredictionObstacles)
}
PredictionObstacles::PredictionObstacles(const PredictionObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      prediction_obstacle_(from.prediction_obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::autoagric::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_intent()) {
    intent_ = new ::autoagric::prediction::Intent(*from.intent_);
  } else {
    intent_ = nullptr;
  }
  if (from._internal_has_scenario()) {
    scenario_ = new ::autoagric::prediction::Scenario(*from.scenario_);
  } else {
    scenario_ = nullptr;
  }
  ::memcpy(&start_timestamp_, &from.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&perception_error_code_) -
    reinterpret_cast<char*>(&start_timestamp_)) + sizeof(perception_error_code_));
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.PredictionObstacles)
}

inline void PredictionObstacles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&perception_error_code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(perception_error_code_));
}

PredictionObstacles::~PredictionObstacles() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.PredictionObstacles)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete intent_;
  if (this != internal_default_instance()) delete scenario_;
}

void PredictionObstacles::ArenaDtor(void* object) {
  PredictionObstacles* _this = reinterpret_cast< PredictionObstacles* >(object);
  (void)_this;
}
void PredictionObstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictionObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.PredictionObstacles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prediction_obstacle_.Clear();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && intent_ != nullptr) {
    delete intent_;
  }
  intent_ = nullptr;
  if (GetArenaForAllocation() == nullptr && scenario_ != nullptr) {
    delete scenario_;
  }
  scenario_ = nullptr;
  ::memset(&start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perception_error_code_) -
      reinterpret_cast<char*>(&start_timestamp_)) + sizeof(perception_error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionObstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.prediction.PredictionObstacle prediction_obstacle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prediction_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.ErrorCode perception_error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_perception_error_code(static_cast<::autoagric::common::ErrorCode>(val));
        } else
          goto handle_unusual;
        continue;
      // double start_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          end_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.Intent intent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_intent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.Scenario scenario = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scenario(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionObstacles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.PredictionObstacles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .autoagric.prediction.PredictionObstacle prediction_obstacle = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prediction_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_prediction_obstacle(i), target, stream);
  }

  // .autoagric.common.ErrorCode perception_error_code = 3;
  if (this->_internal_perception_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_perception_error_code(), target);
  }

  // double start_timestamp = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp = this->_internal_start_timestamp();
  uint64_t raw_start_timestamp;
  memcpy(&raw_start_timestamp, &tmp_start_timestamp, sizeof(tmp_start_timestamp));
  if (raw_start_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_start_timestamp(), target);
  }

  // double end_timestamp = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp = this->_internal_end_timestamp();
  uint64_t raw_end_timestamp;
  memcpy(&raw_end_timestamp, &tmp_end_timestamp, sizeof(tmp_end_timestamp));
  if (raw_end_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_end_timestamp(), target);
  }

  // .autoagric.prediction.Intent intent = 6;
  if (this->_internal_has_intent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::intent(this), target, stream);
  }

  // .autoagric.prediction.Scenario scenario = 7;
  if (this->_internal_has_scenario()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::scenario(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.PredictionObstacles)
  return target;
}

size_t PredictionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.PredictionObstacles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.prediction.PredictionObstacle prediction_obstacle = 2;
  total_size += 1UL * this->_internal_prediction_obstacle_size();
  for (const auto& msg : this->prediction_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .autoagric.prediction.Intent intent = 6;
  if (this->_internal_has_intent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intent_);
  }

  // .autoagric.prediction.Scenario scenario = 7;
  if (this->_internal_has_scenario()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scenario_);
  }

  // double start_timestamp = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp = this->_internal_start_timestamp();
  uint64_t raw_start_timestamp;
  memcpy(&raw_start_timestamp, &tmp_start_timestamp, sizeof(tmp_start_timestamp));
  if (raw_start_timestamp != 0) {
    total_size += 1 + 8;
  }

  // double end_timestamp = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp = this->_internal_end_timestamp();
  uint64_t raw_end_timestamp;
  memcpy(&raw_end_timestamp, &tmp_end_timestamp, sizeof(tmp_end_timestamp));
  if (raw_end_timestamp != 0) {
    total_size += 1 + 8;
  }

  // .autoagric.common.ErrorCode perception_error_code = 3;
  if (this->_internal_perception_error_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_perception_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionObstacles::GetClassData() const { return &_class_data_; }

void PredictionObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionObstacles *>(to)->MergeFrom(
      static_cast<const PredictionObstacles &>(from));
}


void PredictionObstacles::MergeFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.PredictionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  prediction_obstacle_.MergeFrom(from.prediction_obstacle_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::autoagric::common::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_intent()) {
    _internal_mutable_intent()->::autoagric::prediction::Intent::MergeFrom(from._internal_intent());
  }
  if (from._internal_has_scenario()) {
    _internal_mutable_scenario()->::autoagric::prediction::Scenario::MergeFrom(from._internal_scenario());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_timestamp = from._internal_start_timestamp();
  uint64_t raw_start_timestamp;
  memcpy(&raw_start_timestamp, &tmp_start_timestamp, sizeof(tmp_start_timestamp));
  if (raw_start_timestamp != 0) {
    _internal_set_start_timestamp(from._internal_start_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_timestamp = from._internal_end_timestamp();
  uint64_t raw_end_timestamp;
  memcpy(&raw_end_timestamp, &tmp_end_timestamp, sizeof(tmp_end_timestamp));
  if (raw_end_timestamp != 0) {
    _internal_set_end_timestamp(from._internal_end_timestamp());
  }
  if (from._internal_perception_error_code() != 0) {
    _internal_set_perception_error_code(from._internal_perception_error_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionObstacles::CopyFrom(const PredictionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.PredictionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionObstacles::IsInitialized() const {
  return true;
}

void PredictionObstacles::InternalSwap(PredictionObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  prediction_obstacle_.InternalSwap(&other->prediction_obstacle_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionObstacles, perception_error_code_)
      + sizeof(PredictionObstacles::perception_error_code_)
      - PROTOBUF_FIELD_OFFSET(PredictionObstacles, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionObstacles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_getter, &descriptor_table_autoagric_2fprediction_2fprediction_5fobstacle_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2fprediction_5fobstacle_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::prediction::ObstacleIntent* Arena::CreateMaybeMessage< ::autoagric::prediction::ObstacleIntent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::ObstacleIntent >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::Intent* Arena::CreateMaybeMessage< ::autoagric::prediction::Intent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::Intent >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::PredictionObstacle* Arena::CreateMaybeMessage< ::autoagric::prediction::PredictionObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::PredictionObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::PredictionObstacles* Arena::CreateMaybeMessage< ::autoagric::prediction::PredictionObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::PredictionObstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
