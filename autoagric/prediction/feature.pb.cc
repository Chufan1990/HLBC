// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/prediction/feature.proto

#include "autoagric/prediction/feature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace prediction {
constexpr JunctionExit::JunctionExit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : exit_lane_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exit_position_(nullptr)
  , exit_heading_(0)
  , exit_width_(0){}
struct JunctionExitDefaultTypeInternal {
  constexpr JunctionExitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JunctionExitDefaultTypeInternal() {}
  union {
    JunctionExit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JunctionExitDefaultTypeInternal _JunctionExit_default_instance_;
constexpr JunctionFeature::JunctionFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : junction_exit_()
  , junction_mlp_feature_()
  , junction_mlp_label_()
  , _junction_mlp_label_cached_byte_size_(0)
  , junction_mlp_probability_()
  , start_lane_id_()
  , junction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , junction_range_(0){}
struct JunctionFeatureDefaultTypeInternal {
  constexpr JunctionFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JunctionFeatureDefaultTypeInternal() {}
  union {
    JunctionFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JunctionFeatureDefaultTypeInternal _JunctionFeature_default_instance_;
constexpr ObstaclePriority::ObstaclePriority(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : priority_(0)
{}
struct ObstaclePriorityDefaultTypeInternal {
  constexpr ObstaclePriorityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstaclePriorityDefaultTypeInternal() {}
  union {
    ObstaclePriority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstaclePriorityDefaultTypeInternal _ObstaclePriority_default_instance_;
constexpr ObstacleInteractiveTag::ObstacleInteractiveTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interactive_tag_(0)
{}
struct ObstacleInteractiveTagDefaultTypeInternal {
  constexpr ObstacleInteractiveTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleInteractiveTagDefaultTypeInternal() {}
  union {
    ObstacleInteractiveTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleInteractiveTagDefaultTypeInternal _ObstacleInteractiveTag_default_instance_;
constexpr Trajectory::Trajectory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_point_()
  , probability_(0){}
struct TrajectoryDefaultTypeInternal {
  constexpr TrajectoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectoryDefaultTypeInternal() {}
  union {
    Trajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
constexpr Feature::Feature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygon_point_()
  , future_trajectory_points_()
  , short_term_predicted_trajectory_points_()
  , predicted_trajectory_()
  , adc_trajectory_point_()
  , surrounding_lane_id_()
  , within_lane_id_()
  , position_(nullptr)
  , velocity_(nullptr)
  , acceleration_(nullptr)
  , t_position_(nullptr)
  , t_velocity_(nullptr)
  , t_acceleration_(nullptr)
  , priority_(nullptr)
  , junction_feature_(nullptr)
  , front_position_(nullptr)
  , raw_velocity_(nullptr)
  , interactive_tag_(nullptr)
  , adc_localization_(nullptr)
  , velocity_heading_(0)
  , speed_(0)
  , acc_(0)
  , theta_(0)
  , length_(0)
  , width_(0)
  , height_(0)
  , tracking_time_(0)
  , id_(0)
  , type_(0)

  , timestamp_(0)
  , t_velocity_heading_(0)
  , t_speed_(0)
  , t_acc_(0)
  , label_update_time_delta_(0)
  , adc_timestamp_(0)
  , is_still_(false)
  , is_near_junction_(false){}
struct FeatureDefaultTypeInternal {
  constexpr FeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureDefaultTypeInternal _Feature_default_instance_;
}  // namespace prediction
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fprediction_2ffeature_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fprediction_2ffeature_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fprediction_2ffeature_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fprediction_2ffeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionExit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionExit, exit_lane_id_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionExit, exit_position_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionExit, exit_heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionExit, exit_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, junction_id_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, junction_range_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, junction_exit_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, junction_mlp_feature_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, junction_mlp_label_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, junction_mlp_probability_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::JunctionFeature, start_lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::ObstaclePriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::ObstaclePriority, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::ObstacleInteractiveTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::ObstacleInteractiveTag, interactive_tag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Trajectory, probability_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Trajectory, trajectory_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, id_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, polygon_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, position_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, front_position_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, velocity_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, raw_velocity_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, acc_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, theta_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, width_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, height_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, tracking_time_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, timestamp_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, junction_feature_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, t_position_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, t_velocity_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, t_velocity_heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, t_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, t_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, t_acc_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, is_still_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, type_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, label_update_time_delta_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, priority_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, interactive_tag_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, is_near_junction_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, future_trajectory_points_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, short_term_predicted_trajectory_points_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, predicted_trajectory_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, adc_trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, adc_timestamp_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, adc_localization_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, surrounding_lane_id_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::Feature, within_lane_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::prediction::JunctionExit)},
  { 10, -1, -1, sizeof(::autoagric::prediction::JunctionFeature)},
  { 23, -1, -1, sizeof(::autoagric::prediction::ObstaclePriority)},
  { 30, -1, -1, sizeof(::autoagric::prediction::ObstacleInteractiveTag)},
  { 37, -1, -1, sizeof(::autoagric::prediction::Trajectory)},
  { 45, -1, -1, sizeof(::autoagric::prediction::Feature)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_JunctionExit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_JunctionFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_ObstaclePriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_ObstacleInteractiveTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_Trajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_Feature_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fprediction_2ffeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"autoagric/prediction/feature.proto\022\024au"
  "toagric.prediction\032 autoagric/common/pnc"
  "_point.proto\032\037autoagric/common/geometry."
  "proto\032+autoagric/prediction/prediction_p"
  "oint.proto\032.autoagric/perception/percept"
  "ion_obstacle.proto\"\200\001\n\014JunctionExit\022\024\n\014e"
  "xit_lane_id\030\001 \001(\t\0220\n\rexit_position\030\002 \001(\013"
  "2\031.autoagric.common.Point3D\022\024\n\014exit_head"
  "ing\030\003 \001(\001\022\022\n\nexit_width\030\004 \001(\001\"\354\001\n\017Juncti"
  "onFeature\022\023\n\013junction_id\030\001 \001(\t\022\026\n\016juncti"
  "on_range\030\002 \001(\001\0229\n\rjunction_exit\030\004 \003(\0132\"."
  "autoagric.prediction.JunctionExit\022\034\n\024jun"
  "ction_mlp_feature\030\005 \003(\001\022\032\n\022junction_mlp_"
  "label\030\006 \003(\005\022 \n\030junction_mlp_probability\030"
  "\007 \003(\001\022\025\n\rstart_lane_id\030\010 \003(\t\"\223\001\n\020Obstacl"
  "ePriority\022A\n\010priority\030\031 \001(\0162/.autoagric."
  "prediction.ObstaclePriority.Priority\"<\n\010"
  "Priority\022\013\n\007UNKNOWN\020\000\022\013\n\007CAUTION\020\001\022\n\n\006NO"
  "RMAL\020\002\022\n\n\006IGNORE\020\003\"\262\001\n\026ObstacleInteracti"
  "veTag\022T\n\017interactive_tag\030% \001(\0162;.autoagr"
  "ic.prediction.ObstacleInteractiveTag.Int"
  "eractiveTag\"B\n\016InteractiveTag\022\013\n\007UNKNOWN"
  "\020\000\022\017\n\013INTERACTION\020\001\022\022\n\016NONINTERACTION\020\002\""
  "^\n\nTrajectory\022\023\n\013probability\030\001 \001(\001\022;\n\020tr"
  "ajectory_point\030\002 \003(\0132!.autoagric.common."
  "TrajectoryPoint\"\244\013\n\007Feature\022\n\n\002id\030\001 \001(\005\022"
  "0\n\rpolygon_point\030\036 \003(\0132\031.autoagric.commo"
  "n.Point3D\022+\n\010position\030\002 \001(\0132\031.autoagric."
  "common.Point3D\0221\n\016front_position\030\033 \001(\0132\031"
  ".autoagric.common.Point3D\022+\n\010velocity\030\003 "
  "\001(\0132\031.autoagric.common.Point3D\022/\n\014raw_ve"
  "locity\030\034 \001(\0132\031.autoagric.common.Point3D\022"
  "/\n\014acceleration\030\004 \001(\0132\031.autoagric.common"
  ".Point3D\022\030\n\020velocity_heading\030\005 \001(\001\022\r\n\005sp"
  "eed\030\006 \001(\001\022\013\n\003acc\030\007 \001(\001\022\r\n\005theta\030\010 \001(\001\022\016\n"
  "\006length\030\t \001(\001\022\r\n\005width\030\n \001(\001\022\016\n\006height\030\013"
  " \001(\001\022\025\n\rtracking_time\030\014 \001(\001\022\021\n\ttimestamp"
  "\030\r \001(\001\022\?\n\020junction_feature\030\032 \001(\0132%.autoa"
  "gric.prediction.JunctionFeature\022-\n\nt_pos"
  "ition\030\020 \001(\0132\031.autoagric.common.Point3D\022-"
  "\n\nt_velocity\030\021 \001(\0132\031.autoagric.common.Po"
  "int3D\022\032\n\022t_velocity_heading\030\022 \001(\001\022\017\n\007t_s"
  "peed\030\023 \001(\001\0221\n\016t_acceleration\030\024 \001(\0132\031.aut"
  "oagric.common.Point3D\022\r\n\005t_acc\030\025 \001(\001\022\020\n\010"
  "is_still\030\026 \001(\010\022;\n\004type\030\027 \001(\0162-.autoagric"
  ".perception.PerceptionObstacle.Type\022\037\n\027l"
  "abel_update_time_delta\030\030 \001(\001\0228\n\010priority"
  "\030\031 \001(\0132&.autoagric.prediction.ObstaclePr"
  "iority\022E\n\017interactive_tag\030% \001(\0132,.autoag"
  "ric.prediction.ObstacleInteractiveTag\022\030\n"
  "\020is_near_junction\030\035 \001(\010\022Q\n\030future_trajec"
  "tory_points\030\037 \003(\0132/.autoagric.prediction"
  ".PredictionTrajectoryPoint\022Q\n&short_term"
  "_predicted_trajectory_points\030  \003(\0132!.aut"
  "oagric.common.TrajectoryPoint\022>\n\024predict"
  "ed_trajectory\030! \003(\0132 .autoagric.predicti"
  "on.Trajectory\022\?\n\024adc_trajectory_point\030\" "
  "\003(\0132!.autoagric.common.TrajectoryPoint\022\025"
  "\n\radc_timestamp\030& \001(\001\022B\n\020adc_localizatio"
  "n\030\' \001(\0132(.autoagric.perception.Perceptio"
  "nObstacle\022\033\n\023surrounding_lane_id\030# \003(\t\022\026"
  "\n\016within_lane_id\030$ \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fprediction_2ffeature_2eproto_deps[4] = {
  &::descriptor_table_autoagric_2fcommon_2fgeometry_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fpnc_5fpoint_2eproto,
  &::descriptor_table_autoagric_2fperception_2fperception_5fobstacle_2eproto,
  &::descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fprediction_2ffeature_2eproto = {
  false, false, 2470, descriptor_table_protodef_autoagric_2fprediction_2ffeature_2eproto, "autoagric/prediction/feature.proto", 
  &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once, descriptor_table_autoagric_2fprediction_2ffeature_2eproto_deps, 4, 6,
  schemas, file_default_instances, TableStruct_autoagric_2fprediction_2ffeature_2eproto::offsets,
  file_level_metadata_autoagric_2fprediction_2ffeature_2eproto, file_level_enum_descriptors_autoagric_2fprediction_2ffeature_2eproto, file_level_service_descriptors_autoagric_2fprediction_2ffeature_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fprediction_2ffeature_2eproto_getter() {
  return &descriptor_table_autoagric_2fprediction_2ffeature_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fprediction_2ffeature_2eproto(&descriptor_table_autoagric_2fprediction_2ffeature_2eproto);
namespace autoagric {
namespace prediction {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstaclePriority_Priority_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fprediction_2ffeature_2eproto);
  return file_level_enum_descriptors_autoagric_2fprediction_2ffeature_2eproto[0];
}
bool ObstaclePriority_Priority_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstaclePriority_Priority ObstaclePriority::UNKNOWN;
constexpr ObstaclePriority_Priority ObstaclePriority::CAUTION;
constexpr ObstaclePriority_Priority ObstaclePriority::NORMAL;
constexpr ObstaclePriority_Priority ObstaclePriority::IGNORE;
constexpr ObstaclePriority_Priority ObstaclePriority::Priority_MIN;
constexpr ObstaclePriority_Priority ObstaclePriority::Priority_MAX;
constexpr int ObstaclePriority::Priority_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleInteractiveTag_InteractiveTag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fprediction_2ffeature_2eproto);
  return file_level_enum_descriptors_autoagric_2fprediction_2ffeature_2eproto[1];
}
bool ObstacleInteractiveTag_InteractiveTag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::UNKNOWN;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::INTERACTION;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::NONINTERACTION;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MIN;
constexpr ObstacleInteractiveTag_InteractiveTag ObstacleInteractiveTag::InteractiveTag_MAX;
constexpr int ObstacleInteractiveTag::InteractiveTag_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class JunctionExit::_Internal {
 public:
  static const ::autoagric::common::Point3D& exit_position(const JunctionExit* msg);
};

const ::autoagric::common::Point3D&
JunctionExit::_Internal::exit_position(const JunctionExit* msg) {
  return *msg->exit_position_;
}
void JunctionExit::clear_exit_position() {
  if (GetArenaForAllocation() == nullptr && exit_position_ != nullptr) {
    delete exit_position_;
  }
  exit_position_ = nullptr;
}
JunctionExit::JunctionExit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.JunctionExit)
}
JunctionExit::JunctionExit(const JunctionExit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exit_lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exit_lane_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exit_lane_id().empty()) {
    exit_lane_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exit_lane_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_exit_position()) {
    exit_position_ = new ::autoagric::common::Point3D(*from.exit_position_);
  } else {
    exit_position_ = nullptr;
  }
  ::memcpy(&exit_heading_, &from.exit_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_width_) -
    reinterpret_cast<char*>(&exit_heading_)) + sizeof(exit_width_));
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.JunctionExit)
}

inline void JunctionExit::SharedCtor() {
exit_lane_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exit_lane_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&exit_position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exit_width_) -
    reinterpret_cast<char*>(&exit_position_)) + sizeof(exit_width_));
}

JunctionExit::~JunctionExit() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.JunctionExit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JunctionExit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  exit_lane_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exit_position_;
}

void JunctionExit::ArenaDtor(void* object) {
  JunctionExit* _this = reinterpret_cast< JunctionExit* >(object);
  (void)_this;
}
void JunctionExit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JunctionExit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JunctionExit::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.JunctionExit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exit_lane_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && exit_position_ != nullptr) {
    delete exit_position_;
  }
  exit_position_ = nullptr;
  ::memset(&exit_heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_width_) -
      reinterpret_cast<char*>(&exit_heading_)) + sizeof(exit_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JunctionExit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exit_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exit_lane_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.prediction.JunctionExit.exit_lane_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D exit_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exit_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double exit_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          exit_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double exit_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          exit_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JunctionExit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.JunctionExit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exit_lane_id = 1;
  if (!this->_internal_exit_lane_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exit_lane_id().data(), static_cast<int>(this->_internal_exit_lane_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.prediction.JunctionExit.exit_lane_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_exit_lane_id(), target);
  }

  // .autoagric.common.Point3D exit_position = 2;
  if (this->_internal_has_exit_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::exit_position(this), target, stream);
  }

  // double exit_heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_exit_heading = this->_internal_exit_heading();
  uint64_t raw_exit_heading;
  memcpy(&raw_exit_heading, &tmp_exit_heading, sizeof(tmp_exit_heading));
  if (raw_exit_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_exit_heading(), target);
  }

  // double exit_width = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_exit_width = this->_internal_exit_width();
  uint64_t raw_exit_width;
  memcpy(&raw_exit_width, &tmp_exit_width, sizeof(tmp_exit_width));
  if (raw_exit_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_exit_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.JunctionExit)
  return target;
}

size_t JunctionExit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.JunctionExit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exit_lane_id = 1;
  if (!this->_internal_exit_lane_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exit_lane_id());
  }

  // .autoagric.common.Point3D exit_position = 2;
  if (this->_internal_has_exit_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exit_position_);
  }

  // double exit_heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_exit_heading = this->_internal_exit_heading();
  uint64_t raw_exit_heading;
  memcpy(&raw_exit_heading, &tmp_exit_heading, sizeof(tmp_exit_heading));
  if (raw_exit_heading != 0) {
    total_size += 1 + 8;
  }

  // double exit_width = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_exit_width = this->_internal_exit_width();
  uint64_t raw_exit_width;
  memcpy(&raw_exit_width, &tmp_exit_width, sizeof(tmp_exit_width));
  if (raw_exit_width != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JunctionExit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JunctionExit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JunctionExit::GetClassData() const { return &_class_data_; }

void JunctionExit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JunctionExit *>(to)->MergeFrom(
      static_cast<const JunctionExit &>(from));
}


void JunctionExit::MergeFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.JunctionExit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exit_lane_id().empty()) {
    _internal_set_exit_lane_id(from._internal_exit_lane_id());
  }
  if (from._internal_has_exit_position()) {
    _internal_mutable_exit_position()->::autoagric::common::Point3D::MergeFrom(from._internal_exit_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_exit_heading = from._internal_exit_heading();
  uint64_t raw_exit_heading;
  memcpy(&raw_exit_heading, &tmp_exit_heading, sizeof(tmp_exit_heading));
  if (raw_exit_heading != 0) {
    _internal_set_exit_heading(from._internal_exit_heading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_exit_width = from._internal_exit_width();
  uint64_t raw_exit_width;
  memcpy(&raw_exit_width, &tmp_exit_width, sizeof(tmp_exit_width));
  if (raw_exit_width != 0) {
    _internal_set_exit_width(from._internal_exit_width());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JunctionExit::CopyFrom(const JunctionExit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.JunctionExit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionExit::IsInitialized() const {
  return true;
}

void JunctionExit::InternalSwap(JunctionExit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exit_lane_id_, lhs_arena,
      &other->exit_lane_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JunctionExit, exit_width_)
      + sizeof(JunctionExit::exit_width_)
      - PROTOBUF_FIELD_OFFSET(JunctionExit, exit_position_)>(
          reinterpret_cast<char*>(&exit_position_),
          reinterpret_cast<char*>(&other->exit_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionExit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_getter, &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2ffeature_2eproto[0]);
}

// ===================================================================

class JunctionFeature::_Internal {
 public:
};

JunctionFeature::JunctionFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  junction_exit_(arena),
  junction_mlp_feature_(arena),
  junction_mlp_label_(arena),
  junction_mlp_probability_(arena),
  start_lane_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.JunctionFeature)
}
JunctionFeature::JunctionFeature(const JunctionFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      junction_exit_(from.junction_exit_),
      junction_mlp_feature_(from.junction_mlp_feature_),
      junction_mlp_label_(from.junction_mlp_label_),
      junction_mlp_probability_(from.junction_mlp_probability_),
      start_lane_id_(from.start_lane_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  junction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    junction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_junction_id().empty()) {
    junction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_junction_id(), 
      GetArenaForAllocation());
  }
  junction_range_ = from.junction_range_;
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.JunctionFeature)
}

inline void JunctionFeature::SharedCtor() {
junction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  junction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
junction_range_ = 0;
}

JunctionFeature::~JunctionFeature() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.JunctionFeature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JunctionFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  junction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JunctionFeature::ArenaDtor(void* object) {
  JunctionFeature* _this = reinterpret_cast< JunctionFeature* >(object);
  (void)_this;
}
void JunctionFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JunctionFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JunctionFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.JunctionFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  junction_exit_.Clear();
  junction_mlp_feature_.Clear();
  junction_mlp_label_.Clear();
  junction_mlp_probability_.Clear();
  start_lane_id_.Clear();
  junction_id_.ClearToEmpty();
  junction_range_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JunctionFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string junction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_junction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.prediction.JunctionFeature.junction_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double junction_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          junction_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.prediction.JunctionExit junction_exit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_junction_exit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double junction_mlp_feature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_junction_mlp_feature(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_junction_mlp_feature(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 junction_mlp_label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_junction_mlp_label(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_junction_mlp_label(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double junction_mlp_probability = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_junction_mlp_probability(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_junction_mlp_probability(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated string start_lane_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_start_lane_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.prediction.JunctionFeature.start_lane_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JunctionFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.JunctionFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string junction_id = 1;
  if (!this->_internal_junction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_junction_id().data(), static_cast<int>(this->_internal_junction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.prediction.JunctionFeature.junction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_junction_id(), target);
  }

  // double junction_range = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_junction_range = this->_internal_junction_range();
  uint64_t raw_junction_range;
  memcpy(&raw_junction_range, &tmp_junction_range, sizeof(tmp_junction_range));
  if (raw_junction_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_junction_range(), target);
  }

  // repeated .autoagric.prediction.JunctionExit junction_exit = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_junction_exit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_junction_exit(i), target, stream);
  }

  // repeated double junction_mlp_feature = 5;
  if (this->_internal_junction_mlp_feature_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_junction_mlp_feature(), target);
  }

  // repeated int32 junction_mlp_label = 6;
  {
    int byte_size = _junction_mlp_label_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_junction_mlp_label(), byte_size, target);
    }
  }

  // repeated double junction_mlp_probability = 7;
  if (this->_internal_junction_mlp_probability_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_junction_mlp_probability(), target);
  }

  // repeated string start_lane_id = 8;
  for (int i = 0, n = this->_internal_start_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_start_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.prediction.JunctionFeature.start_lane_id");
    target = stream->WriteString(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.JunctionFeature)
  return target;
}

size_t JunctionFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.JunctionFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.prediction.JunctionExit junction_exit = 4;
  total_size += 1UL * this->_internal_junction_exit_size();
  for (const auto& msg : this->junction_exit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double junction_mlp_feature = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_junction_mlp_feature_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 junction_mlp_label = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->junction_mlp_label_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _junction_mlp_label_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double junction_mlp_probability = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_junction_mlp_probability_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated string start_lane_id = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(start_lane_id_.size());
  for (int i = 0, n = start_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      start_lane_id_.Get(i));
  }

  // string junction_id = 1;
  if (!this->_internal_junction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_junction_id());
  }

  // double junction_range = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_junction_range = this->_internal_junction_range();
  uint64_t raw_junction_range;
  memcpy(&raw_junction_range, &tmp_junction_range, sizeof(tmp_junction_range));
  if (raw_junction_range != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JunctionFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JunctionFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JunctionFeature::GetClassData() const { return &_class_data_; }

void JunctionFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JunctionFeature *>(to)->MergeFrom(
      static_cast<const JunctionFeature &>(from));
}


void JunctionFeature::MergeFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.JunctionFeature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  junction_exit_.MergeFrom(from.junction_exit_);
  junction_mlp_feature_.MergeFrom(from.junction_mlp_feature_);
  junction_mlp_label_.MergeFrom(from.junction_mlp_label_);
  junction_mlp_probability_.MergeFrom(from.junction_mlp_probability_);
  start_lane_id_.MergeFrom(from.start_lane_id_);
  if (!from._internal_junction_id().empty()) {
    _internal_set_junction_id(from._internal_junction_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_junction_range = from._internal_junction_range();
  uint64_t raw_junction_range;
  memcpy(&raw_junction_range, &tmp_junction_range, sizeof(tmp_junction_range));
  if (raw_junction_range != 0) {
    _internal_set_junction_range(from._internal_junction_range());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JunctionFeature::CopyFrom(const JunctionFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.JunctionFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JunctionFeature::IsInitialized() const {
  return true;
}

void JunctionFeature::InternalSwap(JunctionFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  junction_exit_.InternalSwap(&other->junction_exit_);
  junction_mlp_feature_.InternalSwap(&other->junction_mlp_feature_);
  junction_mlp_label_.InternalSwap(&other->junction_mlp_label_);
  junction_mlp_probability_.InternalSwap(&other->junction_mlp_probability_);
  start_lane_id_.InternalSwap(&other->start_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &junction_id_, lhs_arena,
      &other->junction_id_, rhs_arena
  );
  swap(junction_range_, other->junction_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JunctionFeature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_getter, &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2ffeature_2eproto[1]);
}

// ===================================================================

class ObstaclePriority::_Internal {
 public:
};

ObstaclePriority::ObstaclePriority(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.ObstaclePriority)
}
ObstaclePriority::ObstaclePriority(const ObstaclePriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.ObstaclePriority)
}

inline void ObstaclePriority::SharedCtor() {
priority_ = 0;
}

ObstaclePriority::~ObstaclePriority() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.ObstaclePriority)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstaclePriority::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstaclePriority::ArenaDtor(void* object) {
  ObstaclePriority* _this = reinterpret_cast< ObstaclePriority* >(object);
  (void)_this;
}
void ObstaclePriority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstaclePriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstaclePriority::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.ObstaclePriority)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstaclePriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.prediction.ObstaclePriority.Priority priority = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_priority(static_cast<::autoagric::prediction::ObstaclePriority_Priority>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstaclePriority::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.ObstaclePriority)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.prediction.ObstaclePriority.Priority priority = 25;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.ObstaclePriority)
  return target;
}

size_t ObstaclePriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.ObstaclePriority)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.prediction.ObstaclePriority.Priority priority = 25;
  if (this->_internal_priority() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstaclePriority::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstaclePriority::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstaclePriority::GetClassData() const { return &_class_data_; }

void ObstaclePriority::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstaclePriority *>(to)->MergeFrom(
      static_cast<const ObstaclePriority &>(from));
}


void ObstaclePriority::MergeFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.ObstaclePriority)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstaclePriority::CopyFrom(const ObstaclePriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.ObstaclePriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstaclePriority::IsInitialized() const {
  return true;
}

void ObstaclePriority::InternalSwap(ObstaclePriority* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstaclePriority::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_getter, &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2ffeature_2eproto[2]);
}

// ===================================================================

class ObstacleInteractiveTag::_Internal {
 public:
};

ObstacleInteractiveTag::ObstacleInteractiveTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.ObstacleInteractiveTag)
}
ObstacleInteractiveTag::ObstacleInteractiveTag(const ObstacleInteractiveTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interactive_tag_ = from.interactive_tag_;
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.ObstacleInteractiveTag)
}

inline void ObstacleInteractiveTag::SharedCtor() {
interactive_tag_ = 0;
}

ObstacleInteractiveTag::~ObstacleInteractiveTag() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.ObstacleInteractiveTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleInteractiveTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleInteractiveTag::ArenaDtor(void* object) {
  ObstacleInteractiveTag* _this = reinterpret_cast< ObstacleInteractiveTag* >(object);
  (void)_this;
}
void ObstacleInteractiveTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleInteractiveTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleInteractiveTag::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.ObstacleInteractiveTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interactive_tag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleInteractiveTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_interactive_tag(static_cast<::autoagric::prediction::ObstacleInteractiveTag_InteractiveTag>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ObstacleInteractiveTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.ObstacleInteractiveTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37;
  if (this->_internal_interactive_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      37, this->_internal_interactive_tag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.ObstacleInteractiveTag)
  return target;
}

size_t ObstacleInteractiveTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.ObstacleInteractiveTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.prediction.ObstacleInteractiveTag.InteractiveTag interactive_tag = 37;
  if (this->_internal_interactive_tag() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_interactive_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleInteractiveTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleInteractiveTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleInteractiveTag::GetClassData() const { return &_class_data_; }

void ObstacleInteractiveTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleInteractiveTag *>(to)->MergeFrom(
      static_cast<const ObstacleInteractiveTag &>(from));
}


void ObstacleInteractiveTag::MergeFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.ObstacleInteractiveTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_interactive_tag() != 0) {
    _internal_set_interactive_tag(from._internal_interactive_tag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleInteractiveTag::CopyFrom(const ObstacleInteractiveTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.ObstacleInteractiveTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInteractiveTag::IsInitialized() const {
  return true;
}

void ObstacleInteractiveTag::InternalSwap(ObstacleInteractiveTag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(interactive_tag_, other->interactive_tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleInteractiveTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_getter, &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2ffeature_2eproto[3]);
}

// ===================================================================

class Trajectory::_Internal {
 public:
};

void Trajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trajectory_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.Trajectory)
}

inline void Trajectory::SharedCtor() {
probability_ = 0;
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.Trajectory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Trajectory::ArenaDtor(void* object) {
  Trajectory* _this = reinterpret_cast< Trajectory* >(object);
  (void)_this;
}
void Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.Trajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  probability_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.common.TrajectoryPoint trajectory_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Trajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.Trajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_probability = this->_internal_probability();
  uint64_t raw_probability;
  memcpy(&raw_probability, &tmp_probability, sizeof(tmp_probability));
  if (raw_probability != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // repeated .autoagric.common.TrajectoryPoint trajectory_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trajectory_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.Trajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.common.TrajectoryPoint trajectory_point = 2;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double probability = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_probability = this->_internal_probability();
  uint64_t raw_probability;
  memcpy(&raw_probability, &tmp_probability, sizeof(tmp_probability));
  if (raw_probability != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trajectory::GetClassData() const { return &_class_data_; }

void Trajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Trajectory *>(to)->MergeFrom(
      static_cast<const Trajectory &>(from));
}


void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_probability = from._internal_probability();
  uint64_t raw_probability;
  memcpy(&raw_probability, &tmp_probability, sizeof(tmp_probability));
  if (raw_probability != 0) {
    _internal_set_probability(from._internal_probability());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_getter, &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2ffeature_2eproto[4]);
}

// ===================================================================

class Feature::_Internal {
 public:
  static const ::autoagric::common::Point3D& position(const Feature* msg);
  static const ::autoagric::common::Point3D& front_position(const Feature* msg);
  static const ::autoagric::common::Point3D& velocity(const Feature* msg);
  static const ::autoagric::common::Point3D& raw_velocity(const Feature* msg);
  static const ::autoagric::common::Point3D& acceleration(const Feature* msg);
  static const ::autoagric::prediction::JunctionFeature& junction_feature(const Feature* msg);
  static const ::autoagric::common::Point3D& t_position(const Feature* msg);
  static const ::autoagric::common::Point3D& t_velocity(const Feature* msg);
  static const ::autoagric::common::Point3D& t_acceleration(const Feature* msg);
  static const ::autoagric::prediction::ObstaclePriority& priority(const Feature* msg);
  static const ::autoagric::prediction::ObstacleInteractiveTag& interactive_tag(const Feature* msg);
  static const ::autoagric::perception::PerceptionObstacle& adc_localization(const Feature* msg);
};

const ::autoagric::common::Point3D&
Feature::_Internal::position(const Feature* msg) {
  return *msg->position_;
}
const ::autoagric::common::Point3D&
Feature::_Internal::front_position(const Feature* msg) {
  return *msg->front_position_;
}
const ::autoagric::common::Point3D&
Feature::_Internal::velocity(const Feature* msg) {
  return *msg->velocity_;
}
const ::autoagric::common::Point3D&
Feature::_Internal::raw_velocity(const Feature* msg) {
  return *msg->raw_velocity_;
}
const ::autoagric::common::Point3D&
Feature::_Internal::acceleration(const Feature* msg) {
  return *msg->acceleration_;
}
const ::autoagric::prediction::JunctionFeature&
Feature::_Internal::junction_feature(const Feature* msg) {
  return *msg->junction_feature_;
}
const ::autoagric::common::Point3D&
Feature::_Internal::t_position(const Feature* msg) {
  return *msg->t_position_;
}
const ::autoagric::common::Point3D&
Feature::_Internal::t_velocity(const Feature* msg) {
  return *msg->t_velocity_;
}
const ::autoagric::common::Point3D&
Feature::_Internal::t_acceleration(const Feature* msg) {
  return *msg->t_acceleration_;
}
const ::autoagric::prediction::ObstaclePriority&
Feature::_Internal::priority(const Feature* msg) {
  return *msg->priority_;
}
const ::autoagric::prediction::ObstacleInteractiveTag&
Feature::_Internal::interactive_tag(const Feature* msg) {
  return *msg->interactive_tag_;
}
const ::autoagric::perception::PerceptionObstacle&
Feature::_Internal::adc_localization(const Feature* msg) {
  return *msg->adc_localization_;
}
void Feature::clear_polygon_point() {
  polygon_point_.Clear();
}
void Feature::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Feature::clear_front_position() {
  if (GetArenaForAllocation() == nullptr && front_position_ != nullptr) {
    delete front_position_;
  }
  front_position_ = nullptr;
}
void Feature::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void Feature::clear_raw_velocity() {
  if (GetArenaForAllocation() == nullptr && raw_velocity_ != nullptr) {
    delete raw_velocity_;
  }
  raw_velocity_ = nullptr;
}
void Feature::clear_acceleration() {
  if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
void Feature::clear_t_position() {
  if (GetArenaForAllocation() == nullptr && t_position_ != nullptr) {
    delete t_position_;
  }
  t_position_ = nullptr;
}
void Feature::clear_t_velocity() {
  if (GetArenaForAllocation() == nullptr && t_velocity_ != nullptr) {
    delete t_velocity_;
  }
  t_velocity_ = nullptr;
}
void Feature::clear_t_acceleration() {
  if (GetArenaForAllocation() == nullptr && t_acceleration_ != nullptr) {
    delete t_acceleration_;
  }
  t_acceleration_ = nullptr;
}
void Feature::clear_future_trajectory_points() {
  future_trajectory_points_.Clear();
}
void Feature::clear_short_term_predicted_trajectory_points() {
  short_term_predicted_trajectory_points_.Clear();
}
void Feature::clear_adc_trajectory_point() {
  adc_trajectory_point_.Clear();
}
void Feature::clear_adc_localization() {
  if (GetArenaForAllocation() == nullptr && adc_localization_ != nullptr) {
    delete adc_localization_;
  }
  adc_localization_ = nullptr;
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  polygon_point_(arena),
  future_trajectory_points_(arena),
  short_term_predicted_trajectory_points_(arena),
  predicted_trajectory_(arena),
  adc_trajectory_point_(arena),
  surrounding_lane_id_(arena),
  within_lane_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      polygon_point_(from.polygon_point_),
      future_trajectory_points_(from.future_trajectory_points_),
      short_term_predicted_trajectory_points_(from.short_term_predicted_trajectory_points_),
      predicted_trajectory_(from.predicted_trajectory_),
      adc_trajectory_point_(from.adc_trajectory_point_),
      surrounding_lane_id_(from.surrounding_lane_id_),
      within_lane_id_(from.within_lane_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::autoagric::common::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::autoagric::common::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::autoagric::common::Point3D(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from._internal_has_t_position()) {
    t_position_ = new ::autoagric::common::Point3D(*from.t_position_);
  } else {
    t_position_ = nullptr;
  }
  if (from._internal_has_t_velocity()) {
    t_velocity_ = new ::autoagric::common::Point3D(*from.t_velocity_);
  } else {
    t_velocity_ = nullptr;
  }
  if (from._internal_has_t_acceleration()) {
    t_acceleration_ = new ::autoagric::common::Point3D(*from.t_acceleration_);
  } else {
    t_acceleration_ = nullptr;
  }
  if (from._internal_has_priority()) {
    priority_ = new ::autoagric::prediction::ObstaclePriority(*from.priority_);
  } else {
    priority_ = nullptr;
  }
  if (from._internal_has_junction_feature()) {
    junction_feature_ = new ::autoagric::prediction::JunctionFeature(*from.junction_feature_);
  } else {
    junction_feature_ = nullptr;
  }
  if (from._internal_has_front_position()) {
    front_position_ = new ::autoagric::common::Point3D(*from.front_position_);
  } else {
    front_position_ = nullptr;
  }
  if (from._internal_has_raw_velocity()) {
    raw_velocity_ = new ::autoagric::common::Point3D(*from.raw_velocity_);
  } else {
    raw_velocity_ = nullptr;
  }
  if (from._internal_has_interactive_tag()) {
    interactive_tag_ = new ::autoagric::prediction::ObstacleInteractiveTag(*from.interactive_tag_);
  } else {
    interactive_tag_ = nullptr;
  }
  if (from._internal_has_adc_localization()) {
    adc_localization_ = new ::autoagric::perception::PerceptionObstacle(*from.adc_localization_);
  } else {
    adc_localization_ = nullptr;
  }
  ::memcpy(&velocity_heading_, &from.velocity_heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_junction_) -
    reinterpret_cast<char*>(&velocity_heading_)) + sizeof(is_near_junction_));
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.Feature)
}

inline void Feature::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_near_junction_) -
    reinterpret_cast<char*>(&position_)) + sizeof(is_near_junction_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.Feature)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete t_position_;
  if (this != internal_default_instance()) delete t_velocity_;
  if (this != internal_default_instance()) delete t_acceleration_;
  if (this != internal_default_instance()) delete priority_;
  if (this != internal_default_instance()) delete junction_feature_;
  if (this != internal_default_instance()) delete front_position_;
  if (this != internal_default_instance()) delete raw_velocity_;
  if (this != internal_default_instance()) delete interactive_tag_;
  if (this != internal_default_instance()) delete adc_localization_;
}

void Feature::ArenaDtor(void* object) {
  Feature* _this = reinterpret_cast< Feature* >(object);
  (void)_this;
}
void Feature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_point_.Clear();
  future_trajectory_points_.Clear();
  short_term_predicted_trajectory_points_.Clear();
  predicted_trajectory_.Clear();
  adc_trajectory_point_.Clear();
  surrounding_lane_id_.Clear();
  within_lane_id_.Clear();
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && t_position_ != nullptr) {
    delete t_position_;
  }
  t_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && t_velocity_ != nullptr) {
    delete t_velocity_;
  }
  t_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && t_acceleration_ != nullptr) {
    delete t_acceleration_;
  }
  t_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && priority_ != nullptr) {
    delete priority_;
  }
  priority_ = nullptr;
  if (GetArenaForAllocation() == nullptr && junction_feature_ != nullptr) {
    delete junction_feature_;
  }
  junction_feature_ = nullptr;
  if (GetArenaForAllocation() == nullptr && front_position_ != nullptr) {
    delete front_position_;
  }
  front_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && raw_velocity_ != nullptr) {
    delete raw_velocity_;
  }
  raw_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && interactive_tag_ != nullptr) {
    delete interactive_tag_;
  }
  interactive_tag_ = nullptr;
  if (GetArenaForAllocation() == nullptr && adc_localization_ != nullptr) {
    delete adc_localization_;
  }
  adc_localization_ = nullptr;
  ::memset(&velocity_heading_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_near_junction_) -
      reinterpret_cast<char*>(&velocity_heading_)) + sizeof(is_near_junction_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double velocity_heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double tracking_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          tracking_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D t_position = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D t_velocity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double t_velocity_heading = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          t_velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double t_speed = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          t_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D t_acceleration = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double t_acc = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          t_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_still = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          is_still_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.perception.PerceptionObstacle.Type type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::autoagric::perception::PerceptionObstacle_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // double label_update_time_delta = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          label_update_time_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.ObstaclePriority priority = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_priority(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.JunctionFeature junction_feature = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_junction_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D front_position = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D raw_velocity = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_near_junction = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          is_near_junction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.common.Point3D polygon_point = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_polygon_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_future_trajectory_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_short_term_predicted_trajectory_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.prediction.Trajectory predicted_trajectory = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_predicted_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.common.TrajectoryPoint adc_trajectory_point = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_adc_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string surrounding_lane_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_surrounding_lane_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.prediction.Feature.surrounding_lane_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string within_lane_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_within_lane_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.prediction.Feature.within_lane_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<290>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.prediction.ObstacleInteractiveTag interactive_tag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_interactive_tag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double adc_timestamp = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          adc_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.perception.PerceptionObstacle adc_localization = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_adc_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .autoagric.common.Point3D position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .autoagric.common.Point3D velocity = 3;
  if (this->_internal_has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // .autoagric.common.Point3D acceleration = 4;
  if (this->_internal_has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acceleration(this), target, stream);
  }

  // double velocity_heading = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity_heading = this->_internal_velocity_heading();
  uint64_t raw_velocity_heading;
  memcpy(&raw_velocity_heading, &tmp_velocity_heading, sizeof(tmp_velocity_heading));
  if (raw_velocity_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_velocity_heading(), target);
  }

  // double speed = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed(), target);
  }

  // double acc = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc = this->_internal_acc();
  uint64_t raw_acc;
  memcpy(&raw_acc, &tmp_acc, sizeof(tmp_acc));
  if (raw_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acc(), target);
  }

  // double theta = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_theta(), target);
  }

  // double length = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_length(), target);
  }

  // double width = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_width(), target);
  }

  // double height = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_height(), target);
  }

  // double tracking_time = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tracking_time = this->_internal_tracking_time();
  uint64_t raw_tracking_time;
  memcpy(&raw_tracking_time, &tmp_tracking_time, sizeof(tmp_tracking_time));
  if (raw_tracking_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_tracking_time(), target);
  }

  // double timestamp = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_timestamp(), target);
  }

  // .autoagric.common.Point3D t_position = 16;
  if (this->_internal_has_t_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::t_position(this), target, stream);
  }

  // .autoagric.common.Point3D t_velocity = 17;
  if (this->_internal_has_t_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::t_velocity(this), target, stream);
  }

  // double t_velocity_heading = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_velocity_heading = this->_internal_t_velocity_heading();
  uint64_t raw_t_velocity_heading;
  memcpy(&raw_t_velocity_heading, &tmp_t_velocity_heading, sizeof(tmp_t_velocity_heading));
  if (raw_t_velocity_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_t_velocity_heading(), target);
  }

  // double t_speed = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_speed = this->_internal_t_speed();
  uint64_t raw_t_speed;
  memcpy(&raw_t_speed, &tmp_t_speed, sizeof(tmp_t_speed));
  if (raw_t_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_t_speed(), target);
  }

  // .autoagric.common.Point3D t_acceleration = 20;
  if (this->_internal_has_t_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::t_acceleration(this), target, stream);
  }

  // double t_acc = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_acc = this->_internal_t_acc();
  uint64_t raw_t_acc;
  memcpy(&raw_t_acc, &tmp_t_acc, sizeof(tmp_t_acc));
  if (raw_t_acc != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_t_acc(), target);
  }

  // bool is_still = 22;
  if (this->_internal_is_still() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_still(), target);
  }

  // .autoagric.perception.PerceptionObstacle.Type type = 23;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_type(), target);
  }

  // double label_update_time_delta = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_label_update_time_delta = this->_internal_label_update_time_delta();
  uint64_t raw_label_update_time_delta;
  memcpy(&raw_label_update_time_delta, &tmp_label_update_time_delta, sizeof(tmp_label_update_time_delta));
  if (raw_label_update_time_delta != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_label_update_time_delta(), target);
  }

  // .autoagric.prediction.ObstaclePriority priority = 25;
  if (this->_internal_has_priority()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::priority(this), target, stream);
  }

  // .autoagric.prediction.JunctionFeature junction_feature = 26;
  if (this->_internal_has_junction_feature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::junction_feature(this), target, stream);
  }

  // .autoagric.common.Point3D front_position = 27;
  if (this->_internal_has_front_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::front_position(this), target, stream);
  }

  // .autoagric.common.Point3D raw_velocity = 28;
  if (this->_internal_has_raw_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::raw_velocity(this), target, stream);
  }

  // bool is_near_junction = 29;
  if (this->_internal_is_near_junction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_is_near_junction(), target);
  }

  // repeated .autoagric.common.Point3D polygon_point = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_polygon_point(i), target, stream);
  }

  // repeated .autoagric.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_future_trajectory_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_future_trajectory_points(i), target, stream);
  }

  // repeated .autoagric.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_short_term_predicted_trajectory_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_short_term_predicted_trajectory_points(i), target, stream);
  }

  // repeated .autoagric.prediction.Trajectory predicted_trajectory = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predicted_trajectory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_predicted_trajectory(i), target, stream);
  }

  // repeated .autoagric.common.TrajectoryPoint adc_trajectory_point = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adc_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_adc_trajectory_point(i), target, stream);
  }

  // repeated string surrounding_lane_id = 35;
  for (int i = 0, n = this->_internal_surrounding_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_surrounding_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.prediction.Feature.surrounding_lane_id");
    target = stream->WriteString(35, s, target);
  }

  // repeated string within_lane_id = 36;
  for (int i = 0, n = this->_internal_within_lane_id_size(); i < n; i++) {
    const auto& s = this->_internal_within_lane_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.prediction.Feature.within_lane_id");
    target = stream->WriteString(36, s, target);
  }

  // .autoagric.prediction.ObstacleInteractiveTag interactive_tag = 37;
  if (this->_internal_has_interactive_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::interactive_tag(this), target, stream);
  }

  // double adc_timestamp = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adc_timestamp = this->_internal_adc_timestamp();
  uint64_t raw_adc_timestamp;
  memcpy(&raw_adc_timestamp, &tmp_adc_timestamp, sizeof(tmp_adc_timestamp));
  if (raw_adc_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_adc_timestamp(), target);
  }

  // .autoagric.perception.PerceptionObstacle adc_localization = 39;
  if (this->_internal_has_adc_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        39, _Internal::adc_localization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.common.Point3D polygon_point = 30;
  total_size += 2UL * this->_internal_polygon_point_size();
  for (const auto& msg : this->polygon_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autoagric.prediction.PredictionTrajectoryPoint future_trajectory_points = 31;
  total_size += 2UL * this->_internal_future_trajectory_points_size();
  for (const auto& msg : this->future_trajectory_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autoagric.common.TrajectoryPoint short_term_predicted_trajectory_points = 32;
  total_size += 2UL * this->_internal_short_term_predicted_trajectory_points_size();
  for (const auto& msg : this->short_term_predicted_trajectory_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autoagric.prediction.Trajectory predicted_trajectory = 33;
  total_size += 2UL * this->_internal_predicted_trajectory_size();
  for (const auto& msg : this->predicted_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autoagric.common.TrajectoryPoint adc_trajectory_point = 34;
  total_size += 2UL * this->_internal_adc_trajectory_point_size();
  for (const auto& msg : this->adc_trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string surrounding_lane_id = 35;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(surrounding_lane_id_.size());
  for (int i = 0, n = surrounding_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      surrounding_lane_id_.Get(i));
  }

  // repeated string within_lane_id = 36;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(within_lane_id_.size());
  for (int i = 0, n = within_lane_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      within_lane_id_.Get(i));
  }

  // .autoagric.common.Point3D position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .autoagric.common.Point3D velocity = 3;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .autoagric.common.Point3D acceleration = 4;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .autoagric.common.Point3D t_position = 16;
  if (this->_internal_has_t_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_position_);
  }

  // .autoagric.common.Point3D t_velocity = 17;
  if (this->_internal_has_t_velocity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_velocity_);
  }

  // .autoagric.common.Point3D t_acceleration = 20;
  if (this->_internal_has_t_acceleration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_acceleration_);
  }

  // .autoagric.prediction.ObstaclePriority priority = 25;
  if (this->_internal_has_priority()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *priority_);
  }

  // .autoagric.prediction.JunctionFeature junction_feature = 26;
  if (this->_internal_has_junction_feature()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *junction_feature_);
  }

  // .autoagric.common.Point3D front_position = 27;
  if (this->_internal_has_front_position()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_position_);
  }

  // .autoagric.common.Point3D raw_velocity = 28;
  if (this->_internal_has_raw_velocity()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_velocity_);
  }

  // .autoagric.prediction.ObstacleInteractiveTag interactive_tag = 37;
  if (this->_internal_has_interactive_tag()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *interactive_tag_);
  }

  // .autoagric.perception.PerceptionObstacle adc_localization = 39;
  if (this->_internal_has_adc_localization()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *adc_localization_);
  }

  // double velocity_heading = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity_heading = this->_internal_velocity_heading();
  uint64_t raw_velocity_heading;
  memcpy(&raw_velocity_heading, &tmp_velocity_heading, sizeof(tmp_velocity_heading));
  if (raw_velocity_heading != 0) {
    total_size += 1 + 8;
  }

  // double speed = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  // double acc = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc = this->_internal_acc();
  uint64_t raw_acc;
  memcpy(&raw_acc, &tmp_acc, sizeof(tmp_acc));
  if (raw_acc != 0) {
    total_size += 1 + 8;
  }

  // double theta = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  // double length = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 8;
  }

  // double width = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double height = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 8;
  }

  // double tracking_time = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tracking_time = this->_internal_tracking_time();
  uint64_t raw_tracking_time;
  memcpy(&raw_tracking_time, &tmp_tracking_time, sizeof(tmp_tracking_time));
  if (raw_tracking_time != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .autoagric.perception.PerceptionObstacle.Type type = 23;
  if (this->_internal_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // double timestamp = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  // double t_velocity_heading = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_velocity_heading = this->_internal_t_velocity_heading();
  uint64_t raw_t_velocity_heading;
  memcpy(&raw_t_velocity_heading, &tmp_t_velocity_heading, sizeof(tmp_t_velocity_heading));
  if (raw_t_velocity_heading != 0) {
    total_size += 2 + 8;
  }

  // double t_speed = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_speed = this->_internal_t_speed();
  uint64_t raw_t_speed;
  memcpy(&raw_t_speed, &tmp_t_speed, sizeof(tmp_t_speed));
  if (raw_t_speed != 0) {
    total_size += 2 + 8;
  }

  // double t_acc = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_acc = this->_internal_t_acc();
  uint64_t raw_t_acc;
  memcpy(&raw_t_acc, &tmp_t_acc, sizeof(tmp_t_acc));
  if (raw_t_acc != 0) {
    total_size += 2 + 8;
  }

  // double label_update_time_delta = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_label_update_time_delta = this->_internal_label_update_time_delta();
  uint64_t raw_label_update_time_delta;
  memcpy(&raw_label_update_time_delta, &tmp_label_update_time_delta, sizeof(tmp_label_update_time_delta));
  if (raw_label_update_time_delta != 0) {
    total_size += 2 + 8;
  }

  // double adc_timestamp = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adc_timestamp = this->_internal_adc_timestamp();
  uint64_t raw_adc_timestamp;
  memcpy(&raw_adc_timestamp, &tmp_adc_timestamp, sizeof(tmp_adc_timestamp));
  if (raw_adc_timestamp != 0) {
    total_size += 2 + 8;
  }

  // bool is_still = 22;
  if (this->_internal_is_still() != 0) {
    total_size += 2 + 1;
  }

  // bool is_near_junction = 29;
  if (this->_internal_is_near_junction() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Feature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Feature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Feature::GetClassData() const { return &_class_data_; }

void Feature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Feature *>(to)->MergeFrom(
      static_cast<const Feature &>(from));
}


void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  future_trajectory_points_.MergeFrom(from.future_trajectory_points_);
  short_term_predicted_trajectory_points_.MergeFrom(from.short_term_predicted_trajectory_points_);
  predicted_trajectory_.MergeFrom(from.predicted_trajectory_);
  adc_trajectory_point_.MergeFrom(from.adc_trajectory_point_);
  surrounding_lane_id_.MergeFrom(from.surrounding_lane_id_);
  within_lane_id_.MergeFrom(from.within_lane_id_);
  if (from._internal_has_position()) {
    _internal_mutable_position()->::autoagric::common::Point3D::MergeFrom(from._internal_position());
  }
  if (from._internal_has_velocity()) {
    _internal_mutable_velocity()->::autoagric::common::Point3D::MergeFrom(from._internal_velocity());
  }
  if (from._internal_has_acceleration()) {
    _internal_mutable_acceleration()->::autoagric::common::Point3D::MergeFrom(from._internal_acceleration());
  }
  if (from._internal_has_t_position()) {
    _internal_mutable_t_position()->::autoagric::common::Point3D::MergeFrom(from._internal_t_position());
  }
  if (from._internal_has_t_velocity()) {
    _internal_mutable_t_velocity()->::autoagric::common::Point3D::MergeFrom(from._internal_t_velocity());
  }
  if (from._internal_has_t_acceleration()) {
    _internal_mutable_t_acceleration()->::autoagric::common::Point3D::MergeFrom(from._internal_t_acceleration());
  }
  if (from._internal_has_priority()) {
    _internal_mutable_priority()->::autoagric::prediction::ObstaclePriority::MergeFrom(from._internal_priority());
  }
  if (from._internal_has_junction_feature()) {
    _internal_mutable_junction_feature()->::autoagric::prediction::JunctionFeature::MergeFrom(from._internal_junction_feature());
  }
  if (from._internal_has_front_position()) {
    _internal_mutable_front_position()->::autoagric::common::Point3D::MergeFrom(from._internal_front_position());
  }
  if (from._internal_has_raw_velocity()) {
    _internal_mutable_raw_velocity()->::autoagric::common::Point3D::MergeFrom(from._internal_raw_velocity());
  }
  if (from._internal_has_interactive_tag()) {
    _internal_mutable_interactive_tag()->::autoagric::prediction::ObstacleInteractiveTag::MergeFrom(from._internal_interactive_tag());
  }
  if (from._internal_has_adc_localization()) {
    _internal_mutable_adc_localization()->::autoagric::perception::PerceptionObstacle::MergeFrom(from._internal_adc_localization());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity_heading = from._internal_velocity_heading();
  uint64_t raw_velocity_heading;
  memcpy(&raw_velocity_heading, &tmp_velocity_heading, sizeof(tmp_velocity_heading));
  if (raw_velocity_heading != 0) {
    _internal_set_velocity_heading(from._internal_velocity_heading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acc = from._internal_acc();
  uint64_t raw_acc;
  memcpy(&raw_acc, &tmp_acc, sizeof(tmp_acc));
  if (raw_acc != 0) {
    _internal_set_acc(from._internal_acc());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _internal_set_theta(from._internal_theta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tracking_time = from._internal_tracking_time();
  uint64_t raw_tracking_time;
  memcpy(&raw_tracking_time, &tmp_tracking_time, sizeof(tmp_tracking_time));
  if (raw_tracking_time != 0) {
    _internal_set_tracking_time(from._internal_tracking_time());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_velocity_heading = from._internal_t_velocity_heading();
  uint64_t raw_t_velocity_heading;
  memcpy(&raw_t_velocity_heading, &tmp_t_velocity_heading, sizeof(tmp_t_velocity_heading));
  if (raw_t_velocity_heading != 0) {
    _internal_set_t_velocity_heading(from._internal_t_velocity_heading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_speed = from._internal_t_speed();
  uint64_t raw_t_speed;
  memcpy(&raw_t_speed, &tmp_t_speed, sizeof(tmp_t_speed));
  if (raw_t_speed != 0) {
    _internal_set_t_speed(from._internal_t_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t_acc = from._internal_t_acc();
  uint64_t raw_t_acc;
  memcpy(&raw_t_acc, &tmp_t_acc, sizeof(tmp_t_acc));
  if (raw_t_acc != 0) {
    _internal_set_t_acc(from._internal_t_acc());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_label_update_time_delta = from._internal_label_update_time_delta();
  uint64_t raw_label_update_time_delta;
  memcpy(&raw_label_update_time_delta, &tmp_label_update_time_delta, sizeof(tmp_label_update_time_delta));
  if (raw_label_update_time_delta != 0) {
    _internal_set_label_update_time_delta(from._internal_label_update_time_delta());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adc_timestamp = from._internal_adc_timestamp();
  uint64_t raw_adc_timestamp;
  memcpy(&raw_adc_timestamp, &tmp_adc_timestamp, sizeof(tmp_adc_timestamp));
  if (raw_adc_timestamp != 0) {
    _internal_set_adc_timestamp(from._internal_adc_timestamp());
  }
  if (from._internal_is_still() != 0) {
    _internal_set_is_still(from._internal_is_still());
  }
  if (from._internal_is_near_junction() != 0) {
    _internal_set_is_near_junction(from._internal_is_near_junction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  polygon_point_.InternalSwap(&other->polygon_point_);
  future_trajectory_points_.InternalSwap(&other->future_trajectory_points_);
  short_term_predicted_trajectory_points_.InternalSwap(&other->short_term_predicted_trajectory_points_);
  predicted_trajectory_.InternalSwap(&other->predicted_trajectory_);
  adc_trajectory_point_.InternalSwap(&other->adc_trajectory_point_);
  surrounding_lane_id_.InternalSwap(&other->surrounding_lane_id_);
  within_lane_id_.InternalSwap(&other->within_lane_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feature, is_near_junction_)
      + sizeof(Feature::is_near_junction_)
      - PROTOBUF_FIELD_OFFSET(Feature, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_getter, &descriptor_table_autoagric_2fprediction_2ffeature_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2ffeature_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::prediction::JunctionExit* Arena::CreateMaybeMessage< ::autoagric::prediction::JunctionExit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::JunctionExit >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::JunctionFeature* Arena::CreateMaybeMessage< ::autoagric::prediction::JunctionFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::JunctionFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::ObstaclePriority* Arena::CreateMaybeMessage< ::autoagric::prediction::ObstaclePriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::ObstaclePriority >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::ObstacleInteractiveTag* Arena::CreateMaybeMessage< ::autoagric::prediction::ObstacleInteractiveTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::ObstacleInteractiveTag >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::Trajectory* Arena::CreateMaybeMessage< ::autoagric::prediction::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::Trajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::Feature* Arena::CreateMaybeMessage< ::autoagric::prediction::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::Feature >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
