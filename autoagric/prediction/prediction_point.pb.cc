// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/prediction/prediction_point.proto

#include "autoagric/prediction/prediction_point.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace prediction {
constexpr PredictionPathPoint::PredictionPathPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , velocity_heading_(0){}
struct PredictionPathPointDefaultTypeInternal {
  constexpr PredictionPathPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionPathPointDefaultTypeInternal() {}
  union {
    PredictionPathPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PredictionPathPointDefaultTypeInternal _PredictionPathPoint_default_instance_;
constexpr PredictionTrajectoryPoint::PredictionTrajectoryPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_point_(nullptr)
  , timestamp_(0){}
struct PredictionTrajectoryPointDefaultTypeInternal {
  constexpr PredictionTrajectoryPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PredictionTrajectoryPointDefaultTypeInternal() {}
  union {
    PredictionTrajectoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PredictionTrajectoryPointDefaultTypeInternal _PredictionTrajectoryPoint_default_instance_;
}  // namespace prediction
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fprediction_2fprediction_5fpoint_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fprediction_2fprediction_5fpoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fprediction_2fprediction_5fpoint_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fprediction_2fprediction_5fpoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionPathPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionPathPoint, x_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionPathPoint, y_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionPathPoint, velocity_heading_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionTrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionTrajectoryPoint, path_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::prediction::PredictionTrajectoryPoint, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::prediction::PredictionPathPoint)},
  { 9, -1, -1, sizeof(::autoagric::prediction::PredictionTrajectoryPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_PredictionPathPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::prediction::_PredictionTrajectoryPoint_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fprediction_2fprediction_5fpoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+autoagric/prediction/prediction_point."
  "proto\022\024autoagric.prediction\"E\n\023Predictio"
  "nPathPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\030\n\020velo"
  "city_heading\030\003 \001(\001\"m\n\031PredictionTrajecto"
  "ryPoint\022=\n\npath_point\030\001 \001(\0132).autoagric."
  "prediction.PredictionPathPoint\022\021\n\ttimest"
  "amp\030\002 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto = {
  false, false, 257, descriptor_table_protodef_autoagric_2fprediction_2fprediction_5fpoint_2eproto, "autoagric/prediction/prediction_point.proto", 
  &descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_autoagric_2fprediction_2fprediction_5fpoint_2eproto::offsets,
  file_level_metadata_autoagric_2fprediction_2fprediction_5fpoint_2eproto, file_level_enum_descriptors_autoagric_2fprediction_2fprediction_5fpoint_2eproto, file_level_service_descriptors_autoagric_2fprediction_2fprediction_5fpoint_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto_getter() {
  return &descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fprediction_2fprediction_5fpoint_2eproto(&descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto);
namespace autoagric {
namespace prediction {

// ===================================================================

class PredictionPathPoint::_Internal {
 public:
};

PredictionPathPoint::PredictionPathPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.PredictionPathPoint)
}
PredictionPathPoint::PredictionPathPoint(const PredictionPathPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&velocity_heading_) -
    reinterpret_cast<char*>(&x_)) + sizeof(velocity_heading_));
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.PredictionPathPoint)
}

inline void PredictionPathPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&velocity_heading_) -
    reinterpret_cast<char*>(&x_)) + sizeof(velocity_heading_));
}

PredictionPathPoint::~PredictionPathPoint() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.PredictionPathPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionPathPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PredictionPathPoint::ArenaDtor(void* object) {
  PredictionPathPoint* _this = reinterpret_cast< PredictionPathPoint* >(object);
  (void)_this;
}
void PredictionPathPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictionPathPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionPathPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.PredictionPathPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&velocity_heading_) -
      reinterpret_cast<char*>(&x_)) + sizeof(velocity_heading_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionPathPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double velocity_heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          velocity_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionPathPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.PredictionPathPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double velocity_heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity_heading = this->_internal_velocity_heading();
  uint64_t raw_velocity_heading;
  memcpy(&raw_velocity_heading, &tmp_velocity_heading, sizeof(tmp_velocity_heading));
  if (raw_velocity_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_velocity_heading(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.PredictionPathPoint)
  return target;
}

size_t PredictionPathPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.PredictionPathPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double velocity_heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity_heading = this->_internal_velocity_heading();
  uint64_t raw_velocity_heading;
  memcpy(&raw_velocity_heading, &tmp_velocity_heading, sizeof(tmp_velocity_heading));
  if (raw_velocity_heading != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionPathPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionPathPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionPathPoint::GetClassData() const { return &_class_data_; }

void PredictionPathPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionPathPoint *>(to)->MergeFrom(
      static_cast<const PredictionPathPoint &>(from));
}


void PredictionPathPoint::MergeFrom(const PredictionPathPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.PredictionPathPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_velocity_heading = from._internal_velocity_heading();
  uint64_t raw_velocity_heading;
  memcpy(&raw_velocity_heading, &tmp_velocity_heading, sizeof(tmp_velocity_heading));
  if (raw_velocity_heading != 0) {
    _internal_set_velocity_heading(from._internal_velocity_heading());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionPathPoint::CopyFrom(const PredictionPathPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.PredictionPathPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionPathPoint::IsInitialized() const {
  return true;
}

void PredictionPathPoint::InternalSwap(PredictionPathPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionPathPoint, velocity_heading_)
      + sizeof(PredictionPathPoint::velocity_heading_)
      - PROTOBUF_FIELD_OFFSET(PredictionPathPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionPathPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto_getter, &descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2fprediction_5fpoint_2eproto[0]);
}

// ===================================================================

class PredictionTrajectoryPoint::_Internal {
 public:
  static const ::autoagric::prediction::PredictionPathPoint& path_point(const PredictionTrajectoryPoint* msg);
};

const ::autoagric::prediction::PredictionPathPoint&
PredictionTrajectoryPoint::_Internal::path_point(const PredictionTrajectoryPoint* msg) {
  return *msg->path_point_;
}
PredictionTrajectoryPoint::PredictionTrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.prediction.PredictionTrajectoryPoint)
}
PredictionTrajectoryPoint::PredictionTrajectoryPoint(const PredictionTrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_path_point()) {
    path_point_ = new ::autoagric::prediction::PredictionPathPoint(*from.path_point_);
  } else {
    path_point_ = nullptr;
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:autoagric.prediction.PredictionTrajectoryPoint)
}

inline void PredictionTrajectoryPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&path_point_)) + sizeof(timestamp_));
}

PredictionTrajectoryPoint::~PredictionTrajectoryPoint() {
  // @@protoc_insertion_point(destructor:autoagric.prediction.PredictionTrajectoryPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PredictionTrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete path_point_;
}

void PredictionTrajectoryPoint::ArenaDtor(void* object) {
  PredictionTrajectoryPoint* _this = reinterpret_cast< PredictionTrajectoryPoint* >(object);
  (void)_this;
}
void PredictionTrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PredictionTrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PredictionTrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.prediction.PredictionTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && path_point_ != nullptr) {
    delete path_point_;
  }
  path_point_ = nullptr;
  timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PredictionTrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.prediction.PredictionPathPoint path_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_path_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PredictionTrajectoryPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.prediction.PredictionTrajectoryPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.prediction.PredictionPathPoint path_point = 1;
  if (this->_internal_has_path_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::path_point(this), target, stream);
  }

  // double timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.prediction.PredictionTrajectoryPoint)
  return target;
}

size_t PredictionTrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.prediction.PredictionTrajectoryPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.prediction.PredictionPathPoint path_point = 1;
  if (this->_internal_has_path_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_point_);
  }

  // double timestamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = this->_internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredictionTrajectoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PredictionTrajectoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredictionTrajectoryPoint::GetClassData() const { return &_class_data_; }

void PredictionTrajectoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PredictionTrajectoryPoint *>(to)->MergeFrom(
      static_cast<const PredictionTrajectoryPoint &>(from));
}


void PredictionTrajectoryPoint::MergeFrom(const PredictionTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.prediction.PredictionTrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path_point()) {
    _internal_mutable_path_point()->::autoagric::prediction::PredictionPathPoint::MergeFrom(from._internal_path_point());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_timestamp = from._internal_timestamp();
  uint64_t raw_timestamp;
  memcpy(&raw_timestamp, &tmp_timestamp, sizeof(tmp_timestamp));
  if (raw_timestamp != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PredictionTrajectoryPoint::CopyFrom(const PredictionTrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.prediction.PredictionTrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionTrajectoryPoint::IsInitialized() const {
  return true;
}

void PredictionTrajectoryPoint::InternalSwap(PredictionTrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PredictionTrajectoryPoint, timestamp_)
      + sizeof(PredictionTrajectoryPoint::timestamp_)
      - PROTOBUF_FIELD_OFFSET(PredictionTrajectoryPoint, path_point_)>(
          reinterpret_cast<char*>(&path_point_),
          reinterpret_cast<char*>(&other->path_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PredictionTrajectoryPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto_getter, &descriptor_table_autoagric_2fprediction_2fprediction_5fpoint_2eproto_once,
      file_level_metadata_autoagric_2fprediction_2fprediction_5fpoint_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace prediction
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::prediction::PredictionPathPoint* Arena::CreateMaybeMessage< ::autoagric::prediction::PredictionPathPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::PredictionPathPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::prediction::PredictionTrajectoryPoint* Arena::CreateMaybeMessage< ::autoagric::prediction::PredictionTrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::prediction::PredictionTrajectoryPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
