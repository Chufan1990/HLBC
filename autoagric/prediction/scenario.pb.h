// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/prediction/scenario.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fprediction_2fscenario_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fprediction_2fscenario_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fprediction_2fscenario_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fprediction_2fscenario_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fprediction_2fscenario_2eproto;
namespace autoagric {
namespace prediction {
class Scenario;
struct ScenarioDefaultTypeInternal;
extern ScenarioDefaultTypeInternal _Scenario_default_instance_;
}  // namespace prediction
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::prediction::Scenario* Arena::CreateMaybeMessage<::autoagric::prediction::Scenario>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace prediction {

enum Scenario_Type : int {
  Scenario_Type_UNKNOWN = 0,
  Scenario_Type_CRUISE = 1000,
  Scenario_Type_CRUISE_URBAN = 1001,
  Scenario_Type_CRUISE_HIGHWAY = 1002,
  Scenario_Type_JUNCTION = 2000,
  Scenario_Type_JUNCTION_TRAFFIC_LIGHT = 2001,
  Scenario_Type_JUNCTION_STOP_SIGN = 2002,
  Scenario_Type_Scenario_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Scenario_Type_Scenario_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Scenario_Type_IsValid(int value);
constexpr Scenario_Type Scenario_Type_Type_MIN = Scenario_Type_UNKNOWN;
constexpr Scenario_Type Scenario_Type_Type_MAX = Scenario_Type_JUNCTION_STOP_SIGN;
constexpr int Scenario_Type_Type_ARRAYSIZE = Scenario_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Scenario_Type_descriptor();
template<typename T>
inline const std::string& Scenario_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Scenario_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Scenario_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Scenario_Type_descriptor(), enum_t_value);
}
inline bool Scenario_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Scenario_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Scenario_Type>(
    Scenario_Type_descriptor(), name, value);
}
// ===================================================================

class Scenario final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.prediction.Scenario) */ {
 public:
  inline Scenario() : Scenario(nullptr) {}
  ~Scenario() override;
  explicit constexpr Scenario(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scenario(const Scenario& from);
  Scenario(Scenario&& from) noexcept
    : Scenario() {
    *this = ::std::move(from);
  }

  inline Scenario& operator=(const Scenario& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scenario& operator=(Scenario&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scenario& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scenario* internal_default_instance() {
    return reinterpret_cast<const Scenario*>(
               &_Scenario_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Scenario& a, Scenario& b) {
    a.Swap(&b);
  }
  inline void Swap(Scenario* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scenario* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scenario* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scenario>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scenario& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Scenario& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scenario* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.prediction.Scenario";
  }
  protected:
  explicit Scenario(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Scenario_Type Type;
  static constexpr Type UNKNOWN =
    Scenario_Type_UNKNOWN;
  static constexpr Type CRUISE =
    Scenario_Type_CRUISE;
  static constexpr Type CRUISE_URBAN =
    Scenario_Type_CRUISE_URBAN;
  static constexpr Type CRUISE_HIGHWAY =
    Scenario_Type_CRUISE_HIGHWAY;
  static constexpr Type JUNCTION =
    Scenario_Type_JUNCTION;
  static constexpr Type JUNCTION_TRAFFIC_LIGHT =
    Scenario_Type_JUNCTION_TRAFFIC_LIGHT;
  static constexpr Type JUNCTION_STOP_SIGN =
    Scenario_Type_JUNCTION_STOP_SIGN;
  static inline bool Type_IsValid(int value) {
    return Scenario_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Scenario_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Scenario_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Scenario_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Scenario_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Scenario_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Scenario_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kJunctionIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string junction_id = 2;
  void clear_junction_id();
  const std::string& junction_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_junction_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_junction_id();
  PROTOBUF_NODISCARD std::string* release_junction_id();
  void set_allocated_junction_id(std::string* junction_id);
  private:
  const std::string& _internal_junction_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_junction_id(const std::string& value);
  std::string* _internal_mutable_junction_id();
  public:

  // .autoagric.prediction.Scenario.Type type = 1;
  void clear_type();
  ::autoagric::prediction::Scenario_Type type() const;
  void set_type(::autoagric::prediction::Scenario_Type value);
  private:
  ::autoagric::prediction::Scenario_Type _internal_type() const;
  void _internal_set_type(::autoagric::prediction::Scenario_Type value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.prediction.Scenario)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr junction_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fprediction_2fscenario_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Scenario

// .autoagric.prediction.Scenario.Type type = 1;
inline void Scenario::clear_type() {
  type_ = 0;
}
inline ::autoagric::prediction::Scenario_Type Scenario::_internal_type() const {
  return static_cast< ::autoagric::prediction::Scenario_Type >(type_);
}
inline ::autoagric::prediction::Scenario_Type Scenario::type() const {
  // @@protoc_insertion_point(field_get:autoagric.prediction.Scenario.type)
  return _internal_type();
}
inline void Scenario::_internal_set_type(::autoagric::prediction::Scenario_Type value) {
  
  type_ = value;
}
inline void Scenario::set_type(::autoagric::prediction::Scenario_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:autoagric.prediction.Scenario.type)
}

// string junction_id = 2;
inline void Scenario::clear_junction_id() {
  junction_id_.ClearToEmpty();
}
inline const std::string& Scenario::junction_id() const {
  // @@protoc_insertion_point(field_get:autoagric.prediction.Scenario.junction_id)
  return _internal_junction_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Scenario::set_junction_id(ArgT0&& arg0, ArgT... args) {
 
 junction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autoagric.prediction.Scenario.junction_id)
}
inline std::string* Scenario::mutable_junction_id() {
  std::string* _s = _internal_mutable_junction_id();
  // @@protoc_insertion_point(field_mutable:autoagric.prediction.Scenario.junction_id)
  return _s;
}
inline const std::string& Scenario::_internal_junction_id() const {
  return junction_id_.Get();
}
inline void Scenario::_internal_set_junction_id(const std::string& value) {
  
  junction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Scenario::_internal_mutable_junction_id() {
  
  return junction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Scenario::release_junction_id() {
  // @@protoc_insertion_point(field_release:autoagric.prediction.Scenario.junction_id)
  return junction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Scenario::set_allocated_junction_id(std::string* junction_id) {
  if (junction_id != nullptr) {
    
  } else {
    
  }
  junction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), junction_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (junction_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    junction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autoagric.prediction.Scenario.junction_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace prediction
}  // namespace autoagric

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autoagric::prediction::Scenario_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::prediction::Scenario_Type>() {
  return ::autoagric::prediction::Scenario_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fprediction_2fscenario_2eproto
