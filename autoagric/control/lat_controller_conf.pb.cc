// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/lat_controller_conf.proto

#include "autoagric/control/lat_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace control {
constexpr LatControllerConf::LatControllerConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_q_()
  , reverse_matrix_q_()
  , lat_err_gain_scheduler_(nullptr)
  , heading_err_gain_scheduler_(nullptr)
  , steer_mrac_conf_(nullptr)
  , ts_(0)
  , cf_(0)
  , preview_window_(0)
  , mass_fl_(0)
  , cr_(0)
  , mass_fr_(0)
  , mass_rl_(0)
  , eps_(0)
  , mass_rr_(0)
  , cutoff_freq_(0)
  , mean_filter_window_size_(0)
  , max_iteration_(0)
  , max_lateral_acceleration_(0)
  , lookahead_station_(0)
  , lookback_station_(0)
  , lookahead_station_high_speed_(0)
  , lookback_station_high_speed_(0)
  , enable_reverse_leadlag_compensation_(false)
  , enable_look_ahead_back_control_(false)
  , enable_steer_mrac_control_(false){}
struct LatControllerConfDefaultTypeInternal {
  constexpr LatControllerConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LatControllerConfDefaultTypeInternal() {}
  union {
    LatControllerConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LatControllerConfDefaultTypeInternal _LatControllerConf_default_instance_;
}  // namespace control
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, preview_window_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, cf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, cr_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, mass_fl_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, mass_fr_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, mass_rl_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, mass_rr_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, eps_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, matrix_q_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, reverse_matrix_q_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, max_lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, lat_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, heading_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, enable_reverse_leadlag_compensation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, enable_look_ahead_back_control_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, lookahead_station_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, lookback_station_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, steer_mrac_conf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, enable_steer_mrac_control_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, lookahead_station_high_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatControllerConf, lookback_station_high_speed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::control::LatControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_LatControllerConf_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+autoagric/control/lat_controller_conf."
  "proto\022\021autoagric.control\032+autoagric/cont"
  "rol/gain_scheduler_conf.proto\032!autoagric"
  "/control/mrac_conf.proto\"\361\005\n\021LatControll"
  "erConf\022\n\n\002ts\030\001 \001(\001\022\026\n\016preview_window\030\002 \001"
  "(\005\022\n\n\002cf\030\003 \001(\001\022\n\n\002cr\030\004 \001(\001\022\017\n\007mass_fl\030\005 "
  "\001(\005\022\017\n\007mass_fr\030\006 \001(\005\022\017\n\007mass_rl\030\007 \001(\005\022\017\n"
  "\007mass_rr\030\010 \001(\005\022\013\n\003eps\030\t \001(\001\022\020\n\010matrix_q\030"
  "\n \003(\001\022\030\n\020reverse_matrix_q\030\013 \003(\001\022\023\n\013cutof"
  "f_freq\030\014 \001(\005\022\037\n\027mean_filter_window_size\030"
  "\r \001(\005\022\025\n\rmax_iteration\030\016 \001(\005\022 \n\030max_late"
  "ral_acceleration\030\017 \001(\001\022@\n\026lat_err_gain_s"
  "cheduler\030\020 \001(\0132 .autoagric.control.GainS"
  "cheduler\022D\n\032heading_err_gain_scheduler\030\021"
  " \001(\0132 .autoagric.control.GainScheduler\022+"
  "\n#enable_reverse_leadlag_compensation\030\023 "
  "\001(\010\022&\n\036enable_look_ahead_back_control\030\024 "
  "\001(\010\022\031\n\021lookahead_station\030\025 \001(\001\022\030\n\020lookba"
  "ck_station\030\026 \001(\001\0224\n\017steer_mrac_conf\030\027 \001("
  "\0132\033.autoagric.control.MracConf\022!\n\031enable"
  "_steer_mrac_control\030\030 \001(\010\022$\n\034lookahead_s"
  "tation_high_speed\030\031 \001(\001\022#\n\033lookback_stat"
  "ion_high_speed\030\032 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto_deps[2] = {
  &::descriptor_table_autoagric_2fcontrol_2fgain_5fscheduler_5fconf_2eproto,
  &::descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto = {
  false, false, 908, descriptor_table_protodef_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto, "autoagric/control/lat_controller_conf.proto", 
  &descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto_once, descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto, file_level_enum_descriptors_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto, file_level_service_descriptors_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto_getter() {
  return &descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto(&descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto);
namespace autoagric {
namespace control {

// ===================================================================

class LatControllerConf::_Internal {
 public:
  static const ::autoagric::control::GainScheduler& lat_err_gain_scheduler(const LatControllerConf* msg);
  static const ::autoagric::control::GainScheduler& heading_err_gain_scheduler(const LatControllerConf* msg);
  static const ::autoagric::control::MracConf& steer_mrac_conf(const LatControllerConf* msg);
};

const ::autoagric::control::GainScheduler&
LatControllerConf::_Internal::lat_err_gain_scheduler(const LatControllerConf* msg) {
  return *msg->lat_err_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
LatControllerConf::_Internal::heading_err_gain_scheduler(const LatControllerConf* msg) {
  return *msg->heading_err_gain_scheduler_;
}
const ::autoagric::control::MracConf&
LatControllerConf::_Internal::steer_mrac_conf(const LatControllerConf* msg) {
  return *msg->steer_mrac_conf_;
}
void LatControllerConf::clear_lat_err_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && lat_err_gain_scheduler_ != nullptr) {
    delete lat_err_gain_scheduler_;
  }
  lat_err_gain_scheduler_ = nullptr;
}
void LatControllerConf::clear_heading_err_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && heading_err_gain_scheduler_ != nullptr) {
    delete heading_err_gain_scheduler_;
  }
  heading_err_gain_scheduler_ = nullptr;
}
void LatControllerConf::clear_steer_mrac_conf() {
  if (GetArenaForAllocation() == nullptr && steer_mrac_conf_ != nullptr) {
    delete steer_mrac_conf_;
  }
  steer_mrac_conf_ = nullptr;
}
LatControllerConf::LatControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matrix_q_(arena),
  reverse_matrix_q_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.LatControllerConf)
}
LatControllerConf::LatControllerConf(const LatControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_q_(from.matrix_q_),
      reverse_matrix_q_(from.reverse_matrix_q_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_steer_mrac_conf()) {
    steer_mrac_conf_ = new ::autoagric::control::MracConf(*from.steer_mrac_conf_);
  } else {
    steer_mrac_conf_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_steer_mrac_control_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(enable_steer_mrac_control_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.LatControllerConf)
}

inline void LatControllerConf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_err_gain_scheduler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enable_steer_mrac_control_) -
    reinterpret_cast<char*>(&lat_err_gain_scheduler_)) + sizeof(enable_steer_mrac_control_));
}

LatControllerConf::~LatControllerConf() {
  // @@protoc_insertion_point(destructor:autoagric.control.LatControllerConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LatControllerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lat_err_gain_scheduler_;
  if (this != internal_default_instance()) delete heading_err_gain_scheduler_;
  if (this != internal_default_instance()) delete steer_mrac_conf_;
}

void LatControllerConf::ArenaDtor(void* object) {
  LatControllerConf* _this = reinterpret_cast< LatControllerConf* >(object);
  (void)_this;
}
void LatControllerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LatControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.LatControllerConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  reverse_matrix_q_.Clear();
  if (GetArenaForAllocation() == nullptr && lat_err_gain_scheduler_ != nullptr) {
    delete lat_err_gain_scheduler_;
  }
  lat_err_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && heading_err_gain_scheduler_ != nullptr) {
    delete heading_err_gain_scheduler_;
  }
  heading_err_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && steer_mrac_conf_ != nullptr) {
    delete steer_mrac_conf_;
  }
  steer_mrac_conf_ = nullptr;
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_steer_mrac_control_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(enable_steer_mrac_control_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 preview_window = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          preview_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          cf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          cr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_fl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          mass_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_fr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          mass_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_rl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          mass_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_rr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          mass_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double eps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_q = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 81) {
          _internal_add_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double reverse_matrix_q = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_reverse_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 89) {
          _internal_add_reverse_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 cutoff_freq = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mean_filter_window_size = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          mean_filter_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_iteration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_lateral_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          max_lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler lat_err_gain_scheduler = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler heading_err_gain_scheduler = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_heading_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_reverse_leadlag_compensation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          enable_reverse_leadlag_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_look_ahead_back_control = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          enable_look_ahead_back_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double lookahead_station = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          lookahead_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lookback_station = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          lookback_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.MracConf steer_mrac_conf = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_mrac_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_steer_mrac_control = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          enable_steer_mrac_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double lookahead_station_high_speed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          lookahead_station_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lookback_station_high_speed = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          lookback_station_high_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatControllerConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.LatControllerConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ts = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ts = this->_internal_ts();
  uint64_t raw_ts;
  memcpy(&raw_ts, &tmp_ts, sizeof(tmp_ts));
  if (raw_ts != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ts(), target);
  }

  // int32 preview_window = 2;
  if (this->_internal_preview_window() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_preview_window(), target);
  }

  // double cf = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cf = this->_internal_cf();
  uint64_t raw_cf;
  memcpy(&raw_cf, &tmp_cf, sizeof(tmp_cf));
  if (raw_cf != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cf(), target);
  }

  // double cr = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cr = this->_internal_cr();
  uint64_t raw_cr;
  memcpy(&raw_cr, &tmp_cr, sizeof(tmp_cr));
  if (raw_cr != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_cr(), target);
  }

  // int32 mass_fl = 5;
  if (this->_internal_mass_fl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mass_fl(), target);
  }

  // int32 mass_fr = 6;
  if (this->_internal_mass_fr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mass_fr(), target);
  }

  // int32 mass_rl = 7;
  if (this->_internal_mass_rl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mass_rl(), target);
  }

  // int32 mass_rr = 8;
  if (this->_internal_mass_rr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_mass_rr(), target);
  }

  // double eps = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps = this->_internal_eps();
  uint64_t raw_eps;
  memcpy(&raw_eps, &tmp_eps, sizeof(tmp_eps));
  if (raw_eps != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_eps(), target);
  }

  // repeated double matrix_q = 10;
  if (this->_internal_matrix_q_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_matrix_q(), target);
  }

  // repeated double reverse_matrix_q = 11;
  if (this->_internal_reverse_matrix_q_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_reverse_matrix_q(), target);
  }

  // int32 cutoff_freq = 12;
  if (this->_internal_cutoff_freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_cutoff_freq(), target);
  }

  // int32 mean_filter_window_size = 13;
  if (this->_internal_mean_filter_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_mean_filter_window_size(), target);
  }

  // int32 max_iteration = 14;
  if (this->_internal_max_iteration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_max_iteration(), target);
  }

  // double max_lateral_acceleration = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_acceleration = this->_internal_max_lateral_acceleration();
  uint64_t raw_max_lateral_acceleration;
  memcpy(&raw_max_lateral_acceleration, &tmp_max_lateral_acceleration, sizeof(tmp_max_lateral_acceleration));
  if (raw_max_lateral_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_max_lateral_acceleration(), target);
  }

  // .autoagric.control.GainScheduler lat_err_gain_scheduler = 16;
  if (this->_internal_has_lat_err_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::lat_err_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler heading_err_gain_scheduler = 17;
  if (this->_internal_has_heading_err_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::heading_err_gain_scheduler(this), target, stream);
  }

  // bool enable_reverse_leadlag_compensation = 19;
  if (this->_internal_enable_reverse_leadlag_compensation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_enable_reverse_leadlag_compensation(), target);
  }

  // bool enable_look_ahead_back_control = 20;
  if (this->_internal_enable_look_ahead_back_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_enable_look_ahead_back_control(), target);
  }

  // double lookahead_station = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookahead_station = this->_internal_lookahead_station();
  uint64_t raw_lookahead_station;
  memcpy(&raw_lookahead_station, &tmp_lookahead_station, sizeof(tmp_lookahead_station));
  if (raw_lookahead_station != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_lookahead_station(), target);
  }

  // double lookback_station = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookback_station = this->_internal_lookback_station();
  uint64_t raw_lookback_station;
  memcpy(&raw_lookback_station, &tmp_lookback_station, sizeof(tmp_lookback_station));
  if (raw_lookback_station != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_lookback_station(), target);
  }

  // .autoagric.control.MracConf steer_mrac_conf = 23;
  if (this->_internal_has_steer_mrac_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::steer_mrac_conf(this), target, stream);
  }

  // bool enable_steer_mrac_control = 24;
  if (this->_internal_enable_steer_mrac_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_enable_steer_mrac_control(), target);
  }

  // double lookahead_station_high_speed = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookahead_station_high_speed = this->_internal_lookahead_station_high_speed();
  uint64_t raw_lookahead_station_high_speed;
  memcpy(&raw_lookahead_station_high_speed, &tmp_lookahead_station_high_speed, sizeof(tmp_lookahead_station_high_speed));
  if (raw_lookahead_station_high_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_lookahead_station_high_speed(), target);
  }

  // double lookback_station_high_speed = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookback_station_high_speed = this->_internal_lookback_station_high_speed();
  uint64_t raw_lookback_station_high_speed;
  memcpy(&raw_lookback_station_high_speed, &tmp_lookback_station_high_speed, sizeof(tmp_lookback_station_high_speed));
  if (raw_lookback_station_high_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_lookback_station_high_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.LatControllerConf)
  return target;
}

size_t LatControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.LatControllerConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double reverse_matrix_q = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_reverse_matrix_q_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .autoagric.control.GainScheduler lat_err_gain_scheduler = 16;
  if (this->_internal_has_lat_err_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lat_err_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler heading_err_gain_scheduler = 17;
  if (this->_internal_has_heading_err_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heading_err_gain_scheduler_);
  }

  // .autoagric.control.MracConf steer_mrac_conf = 23;
  if (this->_internal_has_steer_mrac_conf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steer_mrac_conf_);
  }

  // double ts = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ts = this->_internal_ts();
  uint64_t raw_ts;
  memcpy(&raw_ts, &tmp_ts, sizeof(tmp_ts));
  if (raw_ts != 0) {
    total_size += 1 + 8;
  }

  // double cf = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cf = this->_internal_cf();
  uint64_t raw_cf;
  memcpy(&raw_cf, &tmp_cf, sizeof(tmp_cf));
  if (raw_cf != 0) {
    total_size += 1 + 8;
  }

  // int32 preview_window = 2;
  if (this->_internal_preview_window() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_preview_window());
  }

  // int32 mass_fl = 5;
  if (this->_internal_mass_fl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_fl());
  }

  // double cr = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cr = this->_internal_cr();
  uint64_t raw_cr;
  memcpy(&raw_cr, &tmp_cr, sizeof(tmp_cr));
  if (raw_cr != 0) {
    total_size += 1 + 8;
  }

  // int32 mass_fr = 6;
  if (this->_internal_mass_fr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_fr());
  }

  // int32 mass_rl = 7;
  if (this->_internal_mass_rl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_rl());
  }

  // double eps = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps = this->_internal_eps();
  uint64_t raw_eps;
  memcpy(&raw_eps, &tmp_eps, sizeof(tmp_eps));
  if (raw_eps != 0) {
    total_size += 1 + 8;
  }

  // int32 mass_rr = 8;
  if (this->_internal_mass_rr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_rr());
  }

  // int32 cutoff_freq = 12;
  if (this->_internal_cutoff_freq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cutoff_freq());
  }

  // int32 mean_filter_window_size = 13;
  if (this->_internal_mean_filter_window_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mean_filter_window_size());
  }

  // int32 max_iteration = 14;
  if (this->_internal_max_iteration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_iteration());
  }

  // double max_lateral_acceleration = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_acceleration = this->_internal_max_lateral_acceleration();
  uint64_t raw_max_lateral_acceleration;
  memcpy(&raw_max_lateral_acceleration, &tmp_max_lateral_acceleration, sizeof(tmp_max_lateral_acceleration));
  if (raw_max_lateral_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double lookahead_station = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookahead_station = this->_internal_lookahead_station();
  uint64_t raw_lookahead_station;
  memcpy(&raw_lookahead_station, &tmp_lookahead_station, sizeof(tmp_lookahead_station));
  if (raw_lookahead_station != 0) {
    total_size += 2 + 8;
  }

  // double lookback_station = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookback_station = this->_internal_lookback_station();
  uint64_t raw_lookback_station;
  memcpy(&raw_lookback_station, &tmp_lookback_station, sizeof(tmp_lookback_station));
  if (raw_lookback_station != 0) {
    total_size += 2 + 8;
  }

  // double lookahead_station_high_speed = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookahead_station_high_speed = this->_internal_lookahead_station_high_speed();
  uint64_t raw_lookahead_station_high_speed;
  memcpy(&raw_lookahead_station_high_speed, &tmp_lookahead_station_high_speed, sizeof(tmp_lookahead_station_high_speed));
  if (raw_lookahead_station_high_speed != 0) {
    total_size += 2 + 8;
  }

  // double lookback_station_high_speed = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookback_station_high_speed = this->_internal_lookback_station_high_speed();
  uint64_t raw_lookback_station_high_speed;
  memcpy(&raw_lookback_station_high_speed, &tmp_lookback_station_high_speed, sizeof(tmp_lookback_station_high_speed));
  if (raw_lookback_station_high_speed != 0) {
    total_size += 2 + 8;
  }

  // bool enable_reverse_leadlag_compensation = 19;
  if (this->_internal_enable_reverse_leadlag_compensation() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_look_ahead_back_control = 20;
  if (this->_internal_enable_look_ahead_back_control() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_steer_mrac_control = 24;
  if (this->_internal_enable_steer_mrac_control() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatControllerConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatControllerConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatControllerConf::GetClassData() const { return &_class_data_; }

void LatControllerConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatControllerConf *>(to)->MergeFrom(
      static_cast<const LatControllerConf &>(from));
}


void LatControllerConf::MergeFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.LatControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  reverse_matrix_q_.MergeFrom(from.reverse_matrix_q_);
  if (from._internal_has_lat_err_gain_scheduler()) {
    _internal_mutable_lat_err_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_lat_err_gain_scheduler());
  }
  if (from._internal_has_heading_err_gain_scheduler()) {
    _internal_mutable_heading_err_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_heading_err_gain_scheduler());
  }
  if (from._internal_has_steer_mrac_conf()) {
    _internal_mutable_steer_mrac_conf()->::autoagric::control::MracConf::MergeFrom(from._internal_steer_mrac_conf());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ts = from._internal_ts();
  uint64_t raw_ts;
  memcpy(&raw_ts, &tmp_ts, sizeof(tmp_ts));
  if (raw_ts != 0) {
    _internal_set_ts(from._internal_ts());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cf = from._internal_cf();
  uint64_t raw_cf;
  memcpy(&raw_cf, &tmp_cf, sizeof(tmp_cf));
  if (raw_cf != 0) {
    _internal_set_cf(from._internal_cf());
  }
  if (from._internal_preview_window() != 0) {
    _internal_set_preview_window(from._internal_preview_window());
  }
  if (from._internal_mass_fl() != 0) {
    _internal_set_mass_fl(from._internal_mass_fl());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cr = from._internal_cr();
  uint64_t raw_cr;
  memcpy(&raw_cr, &tmp_cr, sizeof(tmp_cr));
  if (raw_cr != 0) {
    _internal_set_cr(from._internal_cr());
  }
  if (from._internal_mass_fr() != 0) {
    _internal_set_mass_fr(from._internal_mass_fr());
  }
  if (from._internal_mass_rl() != 0) {
    _internal_set_mass_rl(from._internal_mass_rl());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps = from._internal_eps();
  uint64_t raw_eps;
  memcpy(&raw_eps, &tmp_eps, sizeof(tmp_eps));
  if (raw_eps != 0) {
    _internal_set_eps(from._internal_eps());
  }
  if (from._internal_mass_rr() != 0) {
    _internal_set_mass_rr(from._internal_mass_rr());
  }
  if (from._internal_cutoff_freq() != 0) {
    _internal_set_cutoff_freq(from._internal_cutoff_freq());
  }
  if (from._internal_mean_filter_window_size() != 0) {
    _internal_set_mean_filter_window_size(from._internal_mean_filter_window_size());
  }
  if (from._internal_max_iteration() != 0) {
    _internal_set_max_iteration(from._internal_max_iteration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_acceleration = from._internal_max_lateral_acceleration();
  uint64_t raw_max_lateral_acceleration;
  memcpy(&raw_max_lateral_acceleration, &tmp_max_lateral_acceleration, sizeof(tmp_max_lateral_acceleration));
  if (raw_max_lateral_acceleration != 0) {
    _internal_set_max_lateral_acceleration(from._internal_max_lateral_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookahead_station = from._internal_lookahead_station();
  uint64_t raw_lookahead_station;
  memcpy(&raw_lookahead_station, &tmp_lookahead_station, sizeof(tmp_lookahead_station));
  if (raw_lookahead_station != 0) {
    _internal_set_lookahead_station(from._internal_lookahead_station());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookback_station = from._internal_lookback_station();
  uint64_t raw_lookback_station;
  memcpy(&raw_lookback_station, &tmp_lookback_station, sizeof(tmp_lookback_station));
  if (raw_lookback_station != 0) {
    _internal_set_lookback_station(from._internal_lookback_station());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookahead_station_high_speed = from._internal_lookahead_station_high_speed();
  uint64_t raw_lookahead_station_high_speed;
  memcpy(&raw_lookahead_station_high_speed, &tmp_lookahead_station_high_speed, sizeof(tmp_lookahead_station_high_speed));
  if (raw_lookahead_station_high_speed != 0) {
    _internal_set_lookahead_station_high_speed(from._internal_lookahead_station_high_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lookback_station_high_speed = from._internal_lookback_station_high_speed();
  uint64_t raw_lookback_station_high_speed;
  memcpy(&raw_lookback_station_high_speed, &tmp_lookback_station_high_speed, sizeof(tmp_lookback_station_high_speed));
  if (raw_lookback_station_high_speed != 0) {
    _internal_set_lookback_station_high_speed(from._internal_lookback_station_high_speed());
  }
  if (from._internal_enable_reverse_leadlag_compensation() != 0) {
    _internal_set_enable_reverse_leadlag_compensation(from._internal_enable_reverse_leadlag_compensation());
  }
  if (from._internal_enable_look_ahead_back_control() != 0) {
    _internal_set_enable_look_ahead_back_control(from._internal_enable_look_ahead_back_control());
  }
  if (from._internal_enable_steer_mrac_control() != 0) {
    _internal_set_enable_steer_mrac_control(from._internal_enable_steer_mrac_control());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatControllerConf::CopyFrom(const LatControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.LatControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatControllerConf::IsInitialized() const {
  return true;
}

void LatControllerConf::InternalSwap(LatControllerConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_q_.InternalSwap(&other->matrix_q_);
  reverse_matrix_q_.InternalSwap(&other->reverse_matrix_q_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatControllerConf, enable_steer_mrac_control_)
      + sizeof(LatControllerConf::enable_steer_mrac_control_)
      - PROTOBUF_FIELD_OFFSET(LatControllerConf, lat_err_gain_scheduler_)>(
          reinterpret_cast<char*>(&lat_err_gain_scheduler_),
          reinterpret_cast<char*>(&other->lat_err_gain_scheduler_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatControllerConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::control::LatControllerConf* Arena::CreateMaybeMessage< ::autoagric::control::LatControllerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::LatControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
