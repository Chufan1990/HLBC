// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/control_conf.proto

#include "autoagric/control/control_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace control {
constexpr ControlConf::ControlConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : active_controllers_()
  , _active_controllers_cached_byte_size_(0)
  , lat_controller_conf_(nullptr)
  , lon_controller_conf_(nullptr)
  , mpc_controller_conf_(nullptr)
  , control_test_duration_(0)
  , enable_csv_debug_(false)
  , enable_speed_station_preview_(false)
  , is_control_test_mode_(false)
  , use_preview_speed_for_table_(false)
  , max_localization_miss_num_(0)
  , max_chassis_miss_num_(0)
  , max_planning_miss_num_(0)
  , max_acceleration_when_stopped_(0)
  , steer_angle_rate_(0)
  , enable_input_timestamp_check_(false)
  , enable_gain_scheduler_(false)
  , set_steer_limit_(false)
  , enable_slope_offset_(false)
  , enable_navigation_mode_error_filter_(false)
  , enable_navigation_mode_position_update_(false)
  , enable_persistent_estop_(false)
  , lock_steer_speed_(0)
  , control_period_(0)
  , max_planning_interval_sec_(0)
  , max_planning_delay_threshold_(0)
  , soft_estop_brake_(0)
  , driving_mode_(0)

  , max_steering_percentage_allowed_(0)
  , max_status_interval_sec_(0)
  , trajectory_period_(0)
  , chassis_period_(0)
  , localization_period_(0)
  , minimum_speed_resolution_(0)
  , query_relative_time_(0)
  , minimum_speed_protection_(0)
  , max_path_remain_when_stopped_(0)
  , maximum_forward_speed_(0)
  , maximum_backward_speed_(0)
  , maximum_driving_acceleration_(0)
  , maximum_driving_deceleration_(0){}
struct ControlConfDefaultTypeInternal {
  constexpr ControlConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlConfDefaultTypeInternal() {}
  union {
    ControlConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlConfDefaultTypeInternal _ControlConf_default_instance_;
}  // namespace control
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcontrol_2fcontrol_5fconf_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fcontrol_2fcontrol_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcontrol_2fcontrol_5fconf_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcontrol_2fcontrol_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, control_test_duration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_csv_debug_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_speed_station_preview_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, is_control_test_mode_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, use_preview_speed_for_table_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_input_timestamp_check_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_localization_miss_num_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_chassis_miss_num_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_planning_miss_num_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_acceleration_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, set_steer_limit_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_slope_offset_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, lock_steer_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_navigation_mode_error_filter_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_navigation_mode_position_update_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, enable_persistent_estop_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, control_period_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_planning_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_planning_delay_threshold_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, soft_estop_brake_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, active_controllers_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_steering_percentage_allowed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_status_interval_sec_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, lat_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, lon_controller_conf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, trajectory_period_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, chassis_period_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, localization_period_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, minimum_speed_resolution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, query_relative_time_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, minimum_speed_protection_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, max_path_remain_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, maximum_forward_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, maximum_backward_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, maximum_driving_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, maximum_driving_deceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlConf, mpc_controller_conf_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::control::ControlConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_ControlConf_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcontrol_2fcontrol_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$autoagric/control/control_conf.proto\022\021"
  "autoagric.control\032\036autoagric/canbus/chas"
  "sis.proto\032+autoagric/control/lat_control"
  "ler_conf.proto\032+autoagric/control/lon_co"
  "ntroller_conf.proto\032+autoagric/control/m"
  "pc_controller_conf.proto\"\251\014\n\013ControlConf"
  "\022\035\n\025control_test_duration\030\001 \001(\001\022\030\n\020enabl"
  "e_csv_debug\030\002 \001(\010\022$\n\034enable_speed_statio"
  "n_preview\030\003 \001(\010\022\034\n\024is_control_test_mode\030"
  "\004 \001(\010\022#\n\033use_preview_speed_for_table\030\005 \001"
  "(\010\022$\n\034enable_input_timestamp_check\030\006 \001(\010"
  "\022!\n\031max_localization_miss_num\030\007 \001(\005\022\034\n\024m"
  "ax_chassis_miss_num\030\010 \001(\005\022\035\n\025max_plannin"
  "g_miss_num\030\t \001(\005\022%\n\035max_acceleration_whe"
  "n_stopped\030\n \001(\001\022\030\n\020steer_angle_rate\030\013 \001("
  "\001\022\035\n\025enable_gain_scheduler\030\014 \001(\010\022\027\n\017set_"
  "steer_limit\030\r \001(\010\022\033\n\023enable_slope_offset"
  "\030\016 \001(\010\022\030\n\020lock_steer_speed\030\017 \001(\001\022+\n#enab"
  "le_navigation_mode_error_filter\030\020 \001(\010\022.\n"
  "&enable_navigation_mode_position_update\030"
  "\021 \001(\010\022\037\n\027enable_persistent_estop\030\022 \001(\010\022\026"
  "\n\016control_period\030\023 \001(\001\022!\n\031max_planning_i"
  "nterval_sec\030\024 \001(\001\022$\n\034max_planning_delay_"
  "threshold\030\025 \001(\001\022;\n\014driving_mode\030\026 \001(\0162%."
  "autoagric.canbus.Chassis.DrivingMode\022\030\n\020"
  "soft_estop_brake\030\030 \001(\001\022I\n\022active_control"
  "lers\030\031 \003(\0162-.autoagric.control.ControlCo"
  "nf.ControllerType\022\'\n\037max_steering_percen"
  "tage_allowed\030\032 \001(\005\022\037\n\027max_status_interva"
  "l_sec\030\033 \001(\001\022A\n\023lat_controller_conf\030\034 \001(\013"
  "2$.autoagric.control.LatControllerConf\022A"
  "\n\023lon_controller_conf\030\035 \001(\0132$.autoagric."
  "control.LonControllerConf\022\031\n\021trajectory_"
  "period\030\036 \001(\001\022\026\n\016chassis_period\030\037 \001(\001\022\033\n\023"
  "localization_period\030  \001(\001\022 \n\030minimum_spe"
  "ed_resolution\030! \001(\001\022\033\n\023query_relative_ti"
  "me\030# \001(\001\022 \n\030minimum_speed_protection\030$ \001"
  "(\001\022$\n\034max_path_remain_when_stopped\030% \001(\001"
  "\022\035\n\025maximum_forward_speed\030& \001(\001\022\036\n\026maxim"
  "um_backward_speed\030\' \001(\001\022$\n\034maximum_drivi"
  "ng_acceleration\030( \001(\001\022$\n\034maximum_driving"
  "_deceleration\030) \001(\001\022A\n\023mpc_controller_co"
  "nf\030* \001(\0132$.autoagric.control.MPCControll"
  "erConf\"L\n\016ControllerType\022\022\n\016LAT_CONTROLL"
  "ER\020\000\022\022\n\016LON_CONTROLLER\020\001\022\022\n\016MPC_CONTROLL"
  "ER\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto_deps[4] = {
  &::descriptor_table_autoagric_2fcanbus_2fchassis_2eproto,
  &::descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto,
  &::descriptor_table_autoagric_2fcontrol_2flon_5fcontroller_5fconf_2eproto,
  &::descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto = {
  false, false, 1812, descriptor_table_protodef_autoagric_2fcontrol_2fcontrol_5fconf_2eproto, "autoagric/control/control_conf.proto", 
  &descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto_once, descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fcontrol_2fcontrol_5fconf_2eproto::offsets,
  file_level_metadata_autoagric_2fcontrol_2fcontrol_5fconf_2eproto, file_level_enum_descriptors_autoagric_2fcontrol_2fcontrol_5fconf_2eproto, file_level_service_descriptors_autoagric_2fcontrol_2fcontrol_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto_getter() {
  return &descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcontrol_2fcontrol_5fconf_2eproto(&descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto);
namespace autoagric {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlConf_ControllerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto);
  return file_level_enum_descriptors_autoagric_2fcontrol_2fcontrol_5fconf_2eproto[0];
}
bool ControlConf_ControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ControlConf_ControllerType ControlConf::LAT_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf::LON_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf::MPC_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf::ControllerType_MIN;
constexpr ControlConf_ControllerType ControlConf::ControllerType_MAX;
constexpr int ControlConf::ControllerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ControlConf::_Internal {
 public:
  static const ::autoagric::control::LatControllerConf& lat_controller_conf(const ControlConf* msg);
  static const ::autoagric::control::LonControllerConf& lon_controller_conf(const ControlConf* msg);
  static const ::autoagric::control::MPCControllerConf& mpc_controller_conf(const ControlConf* msg);
};

const ::autoagric::control::LatControllerConf&
ControlConf::_Internal::lat_controller_conf(const ControlConf* msg) {
  return *msg->lat_controller_conf_;
}
const ::autoagric::control::LonControllerConf&
ControlConf::_Internal::lon_controller_conf(const ControlConf* msg) {
  return *msg->lon_controller_conf_;
}
const ::autoagric::control::MPCControllerConf&
ControlConf::_Internal::mpc_controller_conf(const ControlConf* msg) {
  return *msg->mpc_controller_conf_;
}
void ControlConf::clear_lat_controller_conf() {
  if (GetArenaForAllocation() == nullptr && lat_controller_conf_ != nullptr) {
    delete lat_controller_conf_;
  }
  lat_controller_conf_ = nullptr;
}
void ControlConf::clear_lon_controller_conf() {
  if (GetArenaForAllocation() == nullptr && lon_controller_conf_ != nullptr) {
    delete lon_controller_conf_;
  }
  lon_controller_conf_ = nullptr;
}
void ControlConf::clear_mpc_controller_conf() {
  if (GetArenaForAllocation() == nullptr && mpc_controller_conf_ != nullptr) {
    delete mpc_controller_conf_;
  }
  mpc_controller_conf_ = nullptr;
}
ControlConf::ControlConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  active_controllers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.ControlConf)
}
ControlConf::ControlConf(const ControlConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      active_controllers_(from.active_controllers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lat_controller_conf()) {
    lat_controller_conf_ = new ::autoagric::control::LatControllerConf(*from.lat_controller_conf_);
  } else {
    lat_controller_conf_ = nullptr;
  }
  if (from._internal_has_lon_controller_conf()) {
    lon_controller_conf_ = new ::autoagric::control::LonControllerConf(*from.lon_controller_conf_);
  } else {
    lon_controller_conf_ = nullptr;
  }
  if (from._internal_has_mpc_controller_conf()) {
    mpc_controller_conf_ = new ::autoagric::control::MPCControllerConf(*from.mpc_controller_conf_);
  } else {
    mpc_controller_conf_ = nullptr;
  }
  ::memcpy(&control_test_duration_, &from.control_test_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&maximum_driving_deceleration_) -
    reinterpret_cast<char*>(&control_test_duration_)) + sizeof(maximum_driving_deceleration_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.ControlConf)
}

inline void ControlConf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_controller_conf_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&maximum_driving_deceleration_) -
    reinterpret_cast<char*>(&lat_controller_conf_)) + sizeof(maximum_driving_deceleration_));
}

ControlConf::~ControlConf() {
  // @@protoc_insertion_point(destructor:autoagric.control.ControlConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete lat_controller_conf_;
  if (this != internal_default_instance()) delete lon_controller_conf_;
  if (this != internal_default_instance()) delete mpc_controller_conf_;
}

void ControlConf::ArenaDtor(void* object) {
  ControlConf* _this = reinterpret_cast< ControlConf* >(object);
  (void)_this;
}
void ControlConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlConf::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.ControlConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_controllers_.Clear();
  if (GetArenaForAllocation() == nullptr && lat_controller_conf_ != nullptr) {
    delete lat_controller_conf_;
  }
  lat_controller_conf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lon_controller_conf_ != nullptr) {
    delete lon_controller_conf_;
  }
  lon_controller_conf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && mpc_controller_conf_ != nullptr) {
    delete mpc_controller_conf_;
  }
  mpc_controller_conf_ = nullptr;
  ::memset(&control_test_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maximum_driving_deceleration_) -
      reinterpret_cast<char*>(&control_test_duration_)) + sizeof(maximum_driving_deceleration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double control_test_duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          control_test_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool enable_csv_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          enable_csv_debug_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_speed_station_preview = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          enable_speed_station_preview_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_control_test_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          is_control_test_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool use_preview_speed_for_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          use_preview_speed_for_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_input_timestamp_check = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          enable_input_timestamp_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_localization_miss_num = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          max_localization_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_chassis_miss_num = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          max_chassis_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_planning_miss_num = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          max_planning_miss_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_acceleration_when_stopped = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          max_acceleration_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_rate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool enable_gain_scheduler = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          enable_gain_scheduler_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool set_steer_limit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          set_steer_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_slope_offset = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          enable_slope_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double lock_steer_speed = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          lock_steer_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool enable_navigation_mode_error_filter = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          enable_navigation_mode_error_filter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_navigation_mode_position_update = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          enable_navigation_mode_position_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_persistent_estop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          enable_persistent_estop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double control_period = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          control_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_planning_interval_sec = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          max_planning_interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_planning_delay_threshold = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          max_planning_delay_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.canbus.Chassis.DrivingMode driving_mode = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_driving_mode(static_cast<::autoagric::canbus::Chassis_DrivingMode>(val));
        } else
          goto handle_unusual;
        continue;
      // double soft_estop_brake = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          soft_estop_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.control.ControlConf.ControllerType active_controllers = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_active_controllers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 200) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_active_controllers(static_cast<::autoagric::control::ControlConf_ControllerType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 max_steering_percentage_allowed = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          max_steering_percentage_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_status_interval_sec = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          max_status_interval_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.LatControllerConf lat_controller_conf = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_controller_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.LonControllerConf lon_controller_conf = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_controller_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double trajectory_period = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          trajectory_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double chassis_period = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          chassis_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double localization_period = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          localization_period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double minimum_speed_resolution = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          minimum_speed_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double query_relative_time = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          query_relative_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double minimum_speed_protection = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          minimum_speed_protection_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_path_remain_when_stopped = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          max_path_remain_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double maximum_forward_speed = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          maximum_forward_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double maximum_backward_speed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          maximum_backward_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double maximum_driving_acceleration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          maximum_driving_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double maximum_driving_deceleration = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          maximum_driving_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.MPCControllerConf mpc_controller_conf = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mpc_controller_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.ControlConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double control_test_duration = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_test_duration = this->_internal_control_test_duration();
  uint64_t raw_control_test_duration;
  memcpy(&raw_control_test_duration, &tmp_control_test_duration, sizeof(tmp_control_test_duration));
  if (raw_control_test_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_control_test_duration(), target);
  }

  // bool enable_csv_debug = 2;
  if (this->_internal_enable_csv_debug() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_csv_debug(), target);
  }

  // bool enable_speed_station_preview = 3;
  if (this->_internal_enable_speed_station_preview() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_speed_station_preview(), target);
  }

  // bool is_control_test_mode = 4;
  if (this->_internal_is_control_test_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_control_test_mode(), target);
  }

  // bool use_preview_speed_for_table = 5;
  if (this->_internal_use_preview_speed_for_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_use_preview_speed_for_table(), target);
  }

  // bool enable_input_timestamp_check = 6;
  if (this->_internal_enable_input_timestamp_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enable_input_timestamp_check(), target);
  }

  // int32 max_localization_miss_num = 7;
  if (this->_internal_max_localization_miss_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_localization_miss_num(), target);
  }

  // int32 max_chassis_miss_num = 8;
  if (this->_internal_max_chassis_miss_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_chassis_miss_num(), target);
  }

  // int32 max_planning_miss_num = 9;
  if (this->_internal_max_planning_miss_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_max_planning_miss_num(), target);
  }

  // double max_acceleration_when_stopped = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration_when_stopped = this->_internal_max_acceleration_when_stopped();
  uint64_t raw_max_acceleration_when_stopped;
  memcpy(&raw_max_acceleration_when_stopped, &tmp_max_acceleration_when_stopped, sizeof(tmp_max_acceleration_when_stopped));
  if (raw_max_acceleration_when_stopped != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_max_acceleration_when_stopped(), target);
  }

  // double steer_angle_rate = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_rate = this->_internal_steer_angle_rate();
  uint64_t raw_steer_angle_rate;
  memcpy(&raw_steer_angle_rate, &tmp_steer_angle_rate, sizeof(tmp_steer_angle_rate));
  if (raw_steer_angle_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_rate(), target);
  }

  // bool enable_gain_scheduler = 12;
  if (this->_internal_enable_gain_scheduler() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_gain_scheduler(), target);
  }

  // bool set_steer_limit = 13;
  if (this->_internal_set_steer_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_set_steer_limit(), target);
  }

  // bool enable_slope_offset = 14;
  if (this->_internal_enable_slope_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_enable_slope_offset(), target);
  }

  // double lock_steer_speed = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lock_steer_speed = this->_internal_lock_steer_speed();
  uint64_t raw_lock_steer_speed;
  memcpy(&raw_lock_steer_speed, &tmp_lock_steer_speed, sizeof(tmp_lock_steer_speed));
  if (raw_lock_steer_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_lock_steer_speed(), target);
  }

  // bool enable_navigation_mode_error_filter = 16;
  if (this->_internal_enable_navigation_mode_error_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_enable_navigation_mode_error_filter(), target);
  }

  // bool enable_navigation_mode_position_update = 17;
  if (this->_internal_enable_navigation_mode_position_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_enable_navigation_mode_position_update(), target);
  }

  // bool enable_persistent_estop = 18;
  if (this->_internal_enable_persistent_estop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_enable_persistent_estop(), target);
  }

  // double control_period = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_period = this->_internal_control_period();
  uint64_t raw_control_period;
  memcpy(&raw_control_period, &tmp_control_period, sizeof(tmp_control_period));
  if (raw_control_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_control_period(), target);
  }

  // double max_planning_interval_sec = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_planning_interval_sec = this->_internal_max_planning_interval_sec();
  uint64_t raw_max_planning_interval_sec;
  memcpy(&raw_max_planning_interval_sec, &tmp_max_planning_interval_sec, sizeof(tmp_max_planning_interval_sec));
  if (raw_max_planning_interval_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_max_planning_interval_sec(), target);
  }

  // double max_planning_delay_threshold = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_planning_delay_threshold = this->_internal_max_planning_delay_threshold();
  uint64_t raw_max_planning_delay_threshold;
  memcpy(&raw_max_planning_delay_threshold, &tmp_max_planning_delay_threshold, sizeof(tmp_max_planning_delay_threshold));
  if (raw_max_planning_delay_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_max_planning_delay_threshold(), target);
  }

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 22;
  if (this->_internal_driving_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_driving_mode(), target);
  }

  // double soft_estop_brake = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_soft_estop_brake = this->_internal_soft_estop_brake();
  uint64_t raw_soft_estop_brake;
  memcpy(&raw_soft_estop_brake, &tmp_soft_estop_brake, sizeof(tmp_soft_estop_brake));
  if (raw_soft_estop_brake != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_soft_estop_brake(), target);
  }

  // repeated .autoagric.control.ControlConf.ControllerType active_controllers = 25;
  {
    int byte_size = _active_controllers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          25, active_controllers_, byte_size, target);
    }
  }

  // int32 max_steering_percentage_allowed = 26;
  if (this->_internal_max_steering_percentage_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_max_steering_percentage_allowed(), target);
  }

  // double max_status_interval_sec = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_status_interval_sec = this->_internal_max_status_interval_sec();
  uint64_t raw_max_status_interval_sec;
  memcpy(&raw_max_status_interval_sec, &tmp_max_status_interval_sec, sizeof(tmp_max_status_interval_sec));
  if (raw_max_status_interval_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_max_status_interval_sec(), target);
  }

  // .autoagric.control.LatControllerConf lat_controller_conf = 28;
  if (this->_internal_has_lat_controller_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::lat_controller_conf(this), target, stream);
  }

  // .autoagric.control.LonControllerConf lon_controller_conf = 29;
  if (this->_internal_has_lon_controller_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::lon_controller_conf(this), target, stream);
  }

  // double trajectory_period = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_trajectory_period = this->_internal_trajectory_period();
  uint64_t raw_trajectory_period;
  memcpy(&raw_trajectory_period, &tmp_trajectory_period, sizeof(tmp_trajectory_period));
  if (raw_trajectory_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_trajectory_period(), target);
  }

  // double chassis_period = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_chassis_period = this->_internal_chassis_period();
  uint64_t raw_chassis_period;
  memcpy(&raw_chassis_period, &tmp_chassis_period, sizeof(tmp_chassis_period));
  if (raw_chassis_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_chassis_period(), target);
  }

  // double localization_period = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_localization_period = this->_internal_localization_period();
  uint64_t raw_localization_period;
  memcpy(&raw_localization_period, &tmp_localization_period, sizeof(tmp_localization_period));
  if (raw_localization_period != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_localization_period(), target);
  }

  // double minimum_speed_resolution = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minimum_speed_resolution = this->_internal_minimum_speed_resolution();
  uint64_t raw_minimum_speed_resolution;
  memcpy(&raw_minimum_speed_resolution, &tmp_minimum_speed_resolution, sizeof(tmp_minimum_speed_resolution));
  if (raw_minimum_speed_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(33, this->_internal_minimum_speed_resolution(), target);
  }

  // double query_relative_time = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_query_relative_time = this->_internal_query_relative_time();
  uint64_t raw_query_relative_time;
  memcpy(&raw_query_relative_time, &tmp_query_relative_time, sizeof(tmp_query_relative_time));
  if (raw_query_relative_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_query_relative_time(), target);
  }

  // double minimum_speed_protection = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minimum_speed_protection = this->_internal_minimum_speed_protection();
  uint64_t raw_minimum_speed_protection;
  memcpy(&raw_minimum_speed_protection, &tmp_minimum_speed_protection, sizeof(tmp_minimum_speed_protection));
  if (raw_minimum_speed_protection != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_minimum_speed_protection(), target);
  }

  // double max_path_remain_when_stopped = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_path_remain_when_stopped = this->_internal_max_path_remain_when_stopped();
  uint64_t raw_max_path_remain_when_stopped;
  memcpy(&raw_max_path_remain_when_stopped, &tmp_max_path_remain_when_stopped, sizeof(tmp_max_path_remain_when_stopped));
  if (raw_max_path_remain_when_stopped != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_max_path_remain_when_stopped(), target);
  }

  // double maximum_forward_speed = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_forward_speed = this->_internal_maximum_forward_speed();
  uint64_t raw_maximum_forward_speed;
  memcpy(&raw_maximum_forward_speed, &tmp_maximum_forward_speed, sizeof(tmp_maximum_forward_speed));
  if (raw_maximum_forward_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_maximum_forward_speed(), target);
  }

  // double maximum_backward_speed = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_backward_speed = this->_internal_maximum_backward_speed();
  uint64_t raw_maximum_backward_speed;
  memcpy(&raw_maximum_backward_speed, &tmp_maximum_backward_speed, sizeof(tmp_maximum_backward_speed));
  if (raw_maximum_backward_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_maximum_backward_speed(), target);
  }

  // double maximum_driving_acceleration = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_driving_acceleration = this->_internal_maximum_driving_acceleration();
  uint64_t raw_maximum_driving_acceleration;
  memcpy(&raw_maximum_driving_acceleration, &tmp_maximum_driving_acceleration, sizeof(tmp_maximum_driving_acceleration));
  if (raw_maximum_driving_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_maximum_driving_acceleration(), target);
  }

  // double maximum_driving_deceleration = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_driving_deceleration = this->_internal_maximum_driving_deceleration();
  uint64_t raw_maximum_driving_deceleration;
  memcpy(&raw_maximum_driving_deceleration, &tmp_maximum_driving_deceleration, sizeof(tmp_maximum_driving_deceleration));
  if (raw_maximum_driving_deceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_maximum_driving_deceleration(), target);
  }

  // .autoagric.control.MPCControllerConf mpc_controller_conf = 42;
  if (this->_internal_has_mpc_controller_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::mpc_controller_conf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.ControlConf)
  return target;
}

size_t ControlConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.ControlConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.control.ControlConf.ControllerType active_controllers = 25;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_active_controllers_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_active_controllers(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _active_controllers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .autoagric.control.LatControllerConf lat_controller_conf = 28;
  if (this->_internal_has_lat_controller_conf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lat_controller_conf_);
  }

  // .autoagric.control.LonControllerConf lon_controller_conf = 29;
  if (this->_internal_has_lon_controller_conf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lon_controller_conf_);
  }

  // .autoagric.control.MPCControllerConf mpc_controller_conf = 42;
  if (this->_internal_has_mpc_controller_conf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mpc_controller_conf_);
  }

  // double control_test_duration = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_test_duration = this->_internal_control_test_duration();
  uint64_t raw_control_test_duration;
  memcpy(&raw_control_test_duration, &tmp_control_test_duration, sizeof(tmp_control_test_duration));
  if (raw_control_test_duration != 0) {
    total_size += 1 + 8;
  }

  // bool enable_csv_debug = 2;
  if (this->_internal_enable_csv_debug() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_speed_station_preview = 3;
  if (this->_internal_enable_speed_station_preview() != 0) {
    total_size += 1 + 1;
  }

  // bool is_control_test_mode = 4;
  if (this->_internal_is_control_test_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool use_preview_speed_for_table = 5;
  if (this->_internal_use_preview_speed_for_table() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_localization_miss_num = 7;
  if (this->_internal_max_localization_miss_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_localization_miss_num());
  }

  // int32 max_chassis_miss_num = 8;
  if (this->_internal_max_chassis_miss_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_chassis_miss_num());
  }

  // int32 max_planning_miss_num = 9;
  if (this->_internal_max_planning_miss_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_planning_miss_num());
  }

  // double max_acceleration_when_stopped = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration_when_stopped = this->_internal_max_acceleration_when_stopped();
  uint64_t raw_max_acceleration_when_stopped;
  memcpy(&raw_max_acceleration_when_stopped, &tmp_max_acceleration_when_stopped, sizeof(tmp_max_acceleration_when_stopped));
  if (raw_max_acceleration_when_stopped != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_rate = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_rate = this->_internal_steer_angle_rate();
  uint64_t raw_steer_angle_rate;
  memcpy(&raw_steer_angle_rate, &tmp_steer_angle_rate, sizeof(tmp_steer_angle_rate));
  if (raw_steer_angle_rate != 0) {
    total_size += 1 + 8;
  }

  // bool enable_input_timestamp_check = 6;
  if (this->_internal_enable_input_timestamp_check() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_gain_scheduler = 12;
  if (this->_internal_enable_gain_scheduler() != 0) {
    total_size += 1 + 1;
  }

  // bool set_steer_limit = 13;
  if (this->_internal_set_steer_limit() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_slope_offset = 14;
  if (this->_internal_enable_slope_offset() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_navigation_mode_error_filter = 16;
  if (this->_internal_enable_navigation_mode_error_filter() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_navigation_mode_position_update = 17;
  if (this->_internal_enable_navigation_mode_position_update() != 0) {
    total_size += 2 + 1;
  }

  // bool enable_persistent_estop = 18;
  if (this->_internal_enable_persistent_estop() != 0) {
    total_size += 2 + 1;
  }

  // double lock_steer_speed = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lock_steer_speed = this->_internal_lock_steer_speed();
  uint64_t raw_lock_steer_speed;
  memcpy(&raw_lock_steer_speed, &tmp_lock_steer_speed, sizeof(tmp_lock_steer_speed));
  if (raw_lock_steer_speed != 0) {
    total_size += 1 + 8;
  }

  // double control_period = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_period = this->_internal_control_period();
  uint64_t raw_control_period;
  memcpy(&raw_control_period, &tmp_control_period, sizeof(tmp_control_period));
  if (raw_control_period != 0) {
    total_size += 2 + 8;
  }

  // double max_planning_interval_sec = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_planning_interval_sec = this->_internal_max_planning_interval_sec();
  uint64_t raw_max_planning_interval_sec;
  memcpy(&raw_max_planning_interval_sec, &tmp_max_planning_interval_sec, sizeof(tmp_max_planning_interval_sec));
  if (raw_max_planning_interval_sec != 0) {
    total_size += 2 + 8;
  }

  // double max_planning_delay_threshold = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_planning_delay_threshold = this->_internal_max_planning_delay_threshold();
  uint64_t raw_max_planning_delay_threshold;
  memcpy(&raw_max_planning_delay_threshold, &tmp_max_planning_delay_threshold, sizeof(tmp_max_planning_delay_threshold));
  if (raw_max_planning_delay_threshold != 0) {
    total_size += 2 + 8;
  }

  // double soft_estop_brake = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_soft_estop_brake = this->_internal_soft_estop_brake();
  uint64_t raw_soft_estop_brake;
  memcpy(&raw_soft_estop_brake, &tmp_soft_estop_brake, sizeof(tmp_soft_estop_brake));
  if (raw_soft_estop_brake != 0) {
    total_size += 2 + 8;
  }

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 22;
  if (this->_internal_driving_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
  }

  // int32 max_steering_percentage_allowed = 26;
  if (this->_internal_max_steering_percentage_allowed() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_steering_percentage_allowed());
  }

  // double max_status_interval_sec = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_status_interval_sec = this->_internal_max_status_interval_sec();
  uint64_t raw_max_status_interval_sec;
  memcpy(&raw_max_status_interval_sec, &tmp_max_status_interval_sec, sizeof(tmp_max_status_interval_sec));
  if (raw_max_status_interval_sec != 0) {
    total_size += 2 + 8;
  }

  // double trajectory_period = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_trajectory_period = this->_internal_trajectory_period();
  uint64_t raw_trajectory_period;
  memcpy(&raw_trajectory_period, &tmp_trajectory_period, sizeof(tmp_trajectory_period));
  if (raw_trajectory_period != 0) {
    total_size += 2 + 8;
  }

  // double chassis_period = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_chassis_period = this->_internal_chassis_period();
  uint64_t raw_chassis_period;
  memcpy(&raw_chassis_period, &tmp_chassis_period, sizeof(tmp_chassis_period));
  if (raw_chassis_period != 0) {
    total_size += 2 + 8;
  }

  // double localization_period = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_localization_period = this->_internal_localization_period();
  uint64_t raw_localization_period;
  memcpy(&raw_localization_period, &tmp_localization_period, sizeof(tmp_localization_period));
  if (raw_localization_period != 0) {
    total_size += 2 + 8;
  }

  // double minimum_speed_resolution = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minimum_speed_resolution = this->_internal_minimum_speed_resolution();
  uint64_t raw_minimum_speed_resolution;
  memcpy(&raw_minimum_speed_resolution, &tmp_minimum_speed_resolution, sizeof(tmp_minimum_speed_resolution));
  if (raw_minimum_speed_resolution != 0) {
    total_size += 2 + 8;
  }

  // double query_relative_time = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_query_relative_time = this->_internal_query_relative_time();
  uint64_t raw_query_relative_time;
  memcpy(&raw_query_relative_time, &tmp_query_relative_time, sizeof(tmp_query_relative_time));
  if (raw_query_relative_time != 0) {
    total_size += 2 + 8;
  }

  // double minimum_speed_protection = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minimum_speed_protection = this->_internal_minimum_speed_protection();
  uint64_t raw_minimum_speed_protection;
  memcpy(&raw_minimum_speed_protection, &tmp_minimum_speed_protection, sizeof(tmp_minimum_speed_protection));
  if (raw_minimum_speed_protection != 0) {
    total_size += 2 + 8;
  }

  // double max_path_remain_when_stopped = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_path_remain_when_stopped = this->_internal_max_path_remain_when_stopped();
  uint64_t raw_max_path_remain_when_stopped;
  memcpy(&raw_max_path_remain_when_stopped, &tmp_max_path_remain_when_stopped, sizeof(tmp_max_path_remain_when_stopped));
  if (raw_max_path_remain_when_stopped != 0) {
    total_size += 2 + 8;
  }

  // double maximum_forward_speed = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_forward_speed = this->_internal_maximum_forward_speed();
  uint64_t raw_maximum_forward_speed;
  memcpy(&raw_maximum_forward_speed, &tmp_maximum_forward_speed, sizeof(tmp_maximum_forward_speed));
  if (raw_maximum_forward_speed != 0) {
    total_size += 2 + 8;
  }

  // double maximum_backward_speed = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_backward_speed = this->_internal_maximum_backward_speed();
  uint64_t raw_maximum_backward_speed;
  memcpy(&raw_maximum_backward_speed, &tmp_maximum_backward_speed, sizeof(tmp_maximum_backward_speed));
  if (raw_maximum_backward_speed != 0) {
    total_size += 2 + 8;
  }

  // double maximum_driving_acceleration = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_driving_acceleration = this->_internal_maximum_driving_acceleration();
  uint64_t raw_maximum_driving_acceleration;
  memcpy(&raw_maximum_driving_acceleration, &tmp_maximum_driving_acceleration, sizeof(tmp_maximum_driving_acceleration));
  if (raw_maximum_driving_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double maximum_driving_deceleration = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_driving_deceleration = this->_internal_maximum_driving_deceleration();
  uint64_t raw_maximum_driving_deceleration;
  memcpy(&raw_maximum_driving_deceleration, &tmp_maximum_driving_deceleration, sizeof(tmp_maximum_driving_deceleration));
  if (raw_maximum_driving_deceleration != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlConf::GetClassData() const { return &_class_data_; }

void ControlConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlConf *>(to)->MergeFrom(
      static_cast<const ControlConf &>(from));
}


void ControlConf::MergeFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.ControlConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  active_controllers_.MergeFrom(from.active_controllers_);
  if (from._internal_has_lat_controller_conf()) {
    _internal_mutable_lat_controller_conf()->::autoagric::control::LatControllerConf::MergeFrom(from._internal_lat_controller_conf());
  }
  if (from._internal_has_lon_controller_conf()) {
    _internal_mutable_lon_controller_conf()->::autoagric::control::LonControllerConf::MergeFrom(from._internal_lon_controller_conf());
  }
  if (from._internal_has_mpc_controller_conf()) {
    _internal_mutable_mpc_controller_conf()->::autoagric::control::MPCControllerConf::MergeFrom(from._internal_mpc_controller_conf());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_test_duration = from._internal_control_test_duration();
  uint64_t raw_control_test_duration;
  memcpy(&raw_control_test_duration, &tmp_control_test_duration, sizeof(tmp_control_test_duration));
  if (raw_control_test_duration != 0) {
    _internal_set_control_test_duration(from._internal_control_test_duration());
  }
  if (from._internal_enable_csv_debug() != 0) {
    _internal_set_enable_csv_debug(from._internal_enable_csv_debug());
  }
  if (from._internal_enable_speed_station_preview() != 0) {
    _internal_set_enable_speed_station_preview(from._internal_enable_speed_station_preview());
  }
  if (from._internal_is_control_test_mode() != 0) {
    _internal_set_is_control_test_mode(from._internal_is_control_test_mode());
  }
  if (from._internal_use_preview_speed_for_table() != 0) {
    _internal_set_use_preview_speed_for_table(from._internal_use_preview_speed_for_table());
  }
  if (from._internal_max_localization_miss_num() != 0) {
    _internal_set_max_localization_miss_num(from._internal_max_localization_miss_num());
  }
  if (from._internal_max_chassis_miss_num() != 0) {
    _internal_set_max_chassis_miss_num(from._internal_max_chassis_miss_num());
  }
  if (from._internal_max_planning_miss_num() != 0) {
    _internal_set_max_planning_miss_num(from._internal_max_planning_miss_num());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration_when_stopped = from._internal_max_acceleration_when_stopped();
  uint64_t raw_max_acceleration_when_stopped;
  memcpy(&raw_max_acceleration_when_stopped, &tmp_max_acceleration_when_stopped, sizeof(tmp_max_acceleration_when_stopped));
  if (raw_max_acceleration_when_stopped != 0) {
    _internal_set_max_acceleration_when_stopped(from._internal_max_acceleration_when_stopped());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_rate = from._internal_steer_angle_rate();
  uint64_t raw_steer_angle_rate;
  memcpy(&raw_steer_angle_rate, &tmp_steer_angle_rate, sizeof(tmp_steer_angle_rate));
  if (raw_steer_angle_rate != 0) {
    _internal_set_steer_angle_rate(from._internal_steer_angle_rate());
  }
  if (from._internal_enable_input_timestamp_check() != 0) {
    _internal_set_enable_input_timestamp_check(from._internal_enable_input_timestamp_check());
  }
  if (from._internal_enable_gain_scheduler() != 0) {
    _internal_set_enable_gain_scheduler(from._internal_enable_gain_scheduler());
  }
  if (from._internal_set_steer_limit() != 0) {
    _internal_set_set_steer_limit(from._internal_set_steer_limit());
  }
  if (from._internal_enable_slope_offset() != 0) {
    _internal_set_enable_slope_offset(from._internal_enable_slope_offset());
  }
  if (from._internal_enable_navigation_mode_error_filter() != 0) {
    _internal_set_enable_navigation_mode_error_filter(from._internal_enable_navigation_mode_error_filter());
  }
  if (from._internal_enable_navigation_mode_position_update() != 0) {
    _internal_set_enable_navigation_mode_position_update(from._internal_enable_navigation_mode_position_update());
  }
  if (from._internal_enable_persistent_estop() != 0) {
    _internal_set_enable_persistent_estop(from._internal_enable_persistent_estop());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lock_steer_speed = from._internal_lock_steer_speed();
  uint64_t raw_lock_steer_speed;
  memcpy(&raw_lock_steer_speed, &tmp_lock_steer_speed, sizeof(tmp_lock_steer_speed));
  if (raw_lock_steer_speed != 0) {
    _internal_set_lock_steer_speed(from._internal_lock_steer_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_control_period = from._internal_control_period();
  uint64_t raw_control_period;
  memcpy(&raw_control_period, &tmp_control_period, sizeof(tmp_control_period));
  if (raw_control_period != 0) {
    _internal_set_control_period(from._internal_control_period());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_planning_interval_sec = from._internal_max_planning_interval_sec();
  uint64_t raw_max_planning_interval_sec;
  memcpy(&raw_max_planning_interval_sec, &tmp_max_planning_interval_sec, sizeof(tmp_max_planning_interval_sec));
  if (raw_max_planning_interval_sec != 0) {
    _internal_set_max_planning_interval_sec(from._internal_max_planning_interval_sec());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_planning_delay_threshold = from._internal_max_planning_delay_threshold();
  uint64_t raw_max_planning_delay_threshold;
  memcpy(&raw_max_planning_delay_threshold, &tmp_max_planning_delay_threshold, sizeof(tmp_max_planning_delay_threshold));
  if (raw_max_planning_delay_threshold != 0) {
    _internal_set_max_planning_delay_threshold(from._internal_max_planning_delay_threshold());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_soft_estop_brake = from._internal_soft_estop_brake();
  uint64_t raw_soft_estop_brake;
  memcpy(&raw_soft_estop_brake, &tmp_soft_estop_brake, sizeof(tmp_soft_estop_brake));
  if (raw_soft_estop_brake != 0) {
    _internal_set_soft_estop_brake(from._internal_soft_estop_brake());
  }
  if (from._internal_driving_mode() != 0) {
    _internal_set_driving_mode(from._internal_driving_mode());
  }
  if (from._internal_max_steering_percentage_allowed() != 0) {
    _internal_set_max_steering_percentage_allowed(from._internal_max_steering_percentage_allowed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_status_interval_sec = from._internal_max_status_interval_sec();
  uint64_t raw_max_status_interval_sec;
  memcpy(&raw_max_status_interval_sec, &tmp_max_status_interval_sec, sizeof(tmp_max_status_interval_sec));
  if (raw_max_status_interval_sec != 0) {
    _internal_set_max_status_interval_sec(from._internal_max_status_interval_sec());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_trajectory_period = from._internal_trajectory_period();
  uint64_t raw_trajectory_period;
  memcpy(&raw_trajectory_period, &tmp_trajectory_period, sizeof(tmp_trajectory_period));
  if (raw_trajectory_period != 0) {
    _internal_set_trajectory_period(from._internal_trajectory_period());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_chassis_period = from._internal_chassis_period();
  uint64_t raw_chassis_period;
  memcpy(&raw_chassis_period, &tmp_chassis_period, sizeof(tmp_chassis_period));
  if (raw_chassis_period != 0) {
    _internal_set_chassis_period(from._internal_chassis_period());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_localization_period = from._internal_localization_period();
  uint64_t raw_localization_period;
  memcpy(&raw_localization_period, &tmp_localization_period, sizeof(tmp_localization_period));
  if (raw_localization_period != 0) {
    _internal_set_localization_period(from._internal_localization_period());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minimum_speed_resolution = from._internal_minimum_speed_resolution();
  uint64_t raw_minimum_speed_resolution;
  memcpy(&raw_minimum_speed_resolution, &tmp_minimum_speed_resolution, sizeof(tmp_minimum_speed_resolution));
  if (raw_minimum_speed_resolution != 0) {
    _internal_set_minimum_speed_resolution(from._internal_minimum_speed_resolution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_query_relative_time = from._internal_query_relative_time();
  uint64_t raw_query_relative_time;
  memcpy(&raw_query_relative_time, &tmp_query_relative_time, sizeof(tmp_query_relative_time));
  if (raw_query_relative_time != 0) {
    _internal_set_query_relative_time(from._internal_query_relative_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_minimum_speed_protection = from._internal_minimum_speed_protection();
  uint64_t raw_minimum_speed_protection;
  memcpy(&raw_minimum_speed_protection, &tmp_minimum_speed_protection, sizeof(tmp_minimum_speed_protection));
  if (raw_minimum_speed_protection != 0) {
    _internal_set_minimum_speed_protection(from._internal_minimum_speed_protection());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_path_remain_when_stopped = from._internal_max_path_remain_when_stopped();
  uint64_t raw_max_path_remain_when_stopped;
  memcpy(&raw_max_path_remain_when_stopped, &tmp_max_path_remain_when_stopped, sizeof(tmp_max_path_remain_when_stopped));
  if (raw_max_path_remain_when_stopped != 0) {
    _internal_set_max_path_remain_when_stopped(from._internal_max_path_remain_when_stopped());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_forward_speed = from._internal_maximum_forward_speed();
  uint64_t raw_maximum_forward_speed;
  memcpy(&raw_maximum_forward_speed, &tmp_maximum_forward_speed, sizeof(tmp_maximum_forward_speed));
  if (raw_maximum_forward_speed != 0) {
    _internal_set_maximum_forward_speed(from._internal_maximum_forward_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_backward_speed = from._internal_maximum_backward_speed();
  uint64_t raw_maximum_backward_speed;
  memcpy(&raw_maximum_backward_speed, &tmp_maximum_backward_speed, sizeof(tmp_maximum_backward_speed));
  if (raw_maximum_backward_speed != 0) {
    _internal_set_maximum_backward_speed(from._internal_maximum_backward_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_driving_acceleration = from._internal_maximum_driving_acceleration();
  uint64_t raw_maximum_driving_acceleration;
  memcpy(&raw_maximum_driving_acceleration, &tmp_maximum_driving_acceleration, sizeof(tmp_maximum_driving_acceleration));
  if (raw_maximum_driving_acceleration != 0) {
    _internal_set_maximum_driving_acceleration(from._internal_maximum_driving_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_maximum_driving_deceleration = from._internal_maximum_driving_deceleration();
  uint64_t raw_maximum_driving_deceleration;
  memcpy(&raw_maximum_driving_deceleration, &tmp_maximum_driving_deceleration, sizeof(tmp_maximum_driving_deceleration));
  if (raw_maximum_driving_deceleration != 0) {
    _internal_set_maximum_driving_deceleration(from._internal_maximum_driving_deceleration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlConf::CopyFrom(const ControlConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.ControlConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlConf::IsInitialized() const {
  return true;
}

void ControlConf::InternalSwap(ControlConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  active_controllers_.InternalSwap(&other->active_controllers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlConf, maximum_driving_deceleration_)
      + sizeof(ControlConf::maximum_driving_deceleration_)
      - PROTOBUF_FIELD_OFFSET(ControlConf, lat_controller_conf_)>(
          reinterpret_cast<char*>(&lat_controller_conf_),
          reinterpret_cast<char*>(&other->lat_controller_conf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::control::ControlConf* Arena::CreateMaybeMessage< ::autoagric::control::ControlConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::ControlConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
