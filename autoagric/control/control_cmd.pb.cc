// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/control_cmd.proto

#include "autoagric/control/control_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace control {
constexpr LatencyStats::LatencyStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controller_time_ms_()
  , total_time_ms_(0)
  , total_time_exceeded_(false){}
struct LatencyStatsDefaultTypeInternal {
  constexpr LatencyStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LatencyStatsDefaultTypeInternal() {}
  union {
    LatencyStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LatencyStatsDefaultTypeInternal _LatencyStats_default_instance_;
constexpr ControlCommand::ControlCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , debug_(nullptr)
  , latency_stats_(nullptr)
  , throttle_(0)
  , brake_(0)
  , steering_rate_(0)
  , steering_target_(0)
  , speed_(0)
  , acceleration_(0)
  , left_turn_(false)
  , right_turn_(false)
  , high_beam_(false)
  , low_beam_(false)
  , horn_(false)
  , parking_brake_(false)
  , reset_model_(false)
  , engine_on_off_(false)
  , is_in_safe_mode_(false)
  , driving_mode_(0)

  , trajectory_fraction_(0)
  , gear_location_(0)

  , turnsignal_(0)
{}
struct ControlCommandDefaultTypeInternal {
  constexpr ControlCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlCommandDefaultTypeInternal() {}
  union {
    ControlCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlCommandDefaultTypeInternal _ControlCommand_default_instance_;
constexpr SimpleLongitudinalDebug::SimpleLongitudinalDebug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_matched_point_(nullptr)
  , current_reference_point_(nullptr)
  , preview_reference_point_(nullptr)
  , station_reference_(0)
  , station_error_(0)
  , station_error_limited_(0)
  , preview_station_error_(0)
  , speed_reference_(0)
  , speed_error_(0)
  , speed_controller_input_limited_(0)
  , preview_speed_reference_(0)
  , preview_speed_error_(0)
  , preview_acceleration_reference_(0)
  , acceleration_cmd_closeloop_(0)
  , acceleration_cmd_(0)
  , acceleration_lookup_(0)
  , speed_lookup_(0)
  , calibration_value_(0)
  , throttle_cmd_(0)
  , brake_cmd_(0)
  , slope_offset_compensation_(0)
  , current_station_(0)
  , is_full_stop_(false)
  , pid_saturation_status_(0)
  , path_remain_(0)
  , speed_offset_(0)
  , current_speed_(0)
  , acceleration_reference_(0)
  , current_acceleration_(0)
  , acceleration_error_(0)
  , jerk_reference_(0)
  , current_jerk_(0)
  , jerk_error_(0)
  , leadlag_saturation_status_(0){}
struct SimpleLongitudinalDebugDefaultTypeInternal {
  constexpr SimpleLongitudinalDebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimpleLongitudinalDebugDefaultTypeInternal() {}
  union {
    SimpleLongitudinalDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimpleLongitudinalDebugDefaultTypeInternal _SimpleLongitudinalDebug_default_instance_;
constexpr SimpleLateralDebug::SimpleLateralDebug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_target_point_(nullptr)
  , steer_mrac_debug_(nullptr)
  , lateral_error_(0)
  , ref_heading_(0)
  , heading_(0)
  , heading_error_(0)
  , heading_error_rate_(0)
  , lateral_error_rate_(0)
  , curvature_(0)
  , steer_angle_(0)
  , steer_angle_feedforward_(0)
  , steer_angle_lateral_contribution_(0)
  , steer_angle_lateral_rate_contribution_(0)
  , steer_angle_heading_contribution_(0)
  , steer_angle_heading_rate_contribution_(0)
  , steer_angle_feedback_(0)
  , steering_position_(0)
  , ref_speed_(0)
  , steer_angle_limited_(0)
  , lateral_acceleration_(0)
  , lateral_jerk_(0)
  , ref_heading_rate_(0)
  , heading_rate_(0)
  , ref_heading_acceleration_(0)
  , heading_acceleration_(0)
  , heading_error_acceleration_(0)
  , ref_heading_jerk_(0)
  , heading_jerk_(0)
  , heading_error_jerk_(0)
  , lateral_error_feedback_(0)
  , heading_error_feedback_(0)
  , steer_angle_feedback_augment_(0)
  , steer_mrac_enable_status_(false){}
struct SimpleLateralDebugDefaultTypeInternal {
  constexpr SimpleLateralDebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimpleLateralDebugDefaultTypeInternal() {}
  union {
    SimpleLateralDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimpleLateralDebugDefaultTypeInternal _SimpleLateralDebug_default_instance_;
constexpr SimpleMPCDebug::SimpleMPCDebug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_q_updated_()
  , matrix_r_updated_()
  , lateral_error_(0)
  , ref_heading_(0)
  , heading_(0)
  , heading_error_(0)
  , heading_error_rate_(0)
  , lateral_error_rate_(0)
  , curvature_(0)
  , steer_angle_(0)
  , steer_angle_feedforward_(0)
  , steer_angle_lateral_contribution_(0)
  , steer_angle_lateral_rate_contribution_(0)
  , steer_angle_heading_contribution_(0)
  , steer_angle_heading_rate_contribution_(0)
  , steer_angle_feedback_(0)
  , steering_position_(0)
  , ref_speed_(0)
  , steer_angle_limited_(0)
  , station_reference_(0)
  , station_error_(0)
  , speed_reference_(0)
  , speed_error_(0)
  , acceleration_reference_(0)
  , station_feedback_(0)
  , speed_feedback_(0)
  , acceleration_cmd_closeloop_(0)
  , acceleration_cmd_(0)
  , acceleration_lookup_(0)
  , speed_lookup_(0)
  , calibration_value_(0)
  , steer_unconstrained_control_diff_(0)
  , steer_angle_feedforward_compensation_(0)
  , lateral_acceleration_(0)
  , lateral_jerk_(0)
  , ref_heading_rate_(0)
  , heading_rate_(0)
  , ref_heading_acceleration_(0)
  , heading_acceleration_(0)
  , heading_error_acceleration_(0)
  , ref_heading_jerk_(0)
  , heading_jerk_(0)
  , heading_error_jerk_(0)
  , acceleration_feedback_(0)
  , acceleration_error_(0)
  , jerk_reference_(0)
  , jerk_feedback_(0)
  , jerk_error_(0)
  , is_full_stop_(false){}
struct SimpleMPCDebugDefaultTypeInternal {
  constexpr SimpleMPCDebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimpleMPCDebugDefaultTypeInternal() {}
  union {
    SimpleMPCDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimpleMPCDebugDefaultTypeInternal _SimpleMPCDebug_default_instance_;
constexpr MracDebug::MracDebug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mrac_reference_state_()
  , mrac_state_error_()
  , mrac_adaptive_gain_(nullptr)
  , mrac_model_order_(0)
  , mrac_reference_saturation_status_(0)
  , mrac_control_saturation_status_(0){}
struct MracDebugDefaultTypeInternal {
  constexpr MracDebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MracDebugDefaultTypeInternal() {}
  union {
    MracDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MracDebugDefaultTypeInternal _MracDebug_default_instance_;
constexpr MracAdaptiveGain::MracAdaptiveGain(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_adaptive_gain_()
  , input_adaptive_gain_()
  , nonlinear_adaptive_gain_(){}
struct MracAdaptiveGainDefaultTypeInternal {
  constexpr MracAdaptiveGainDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MracAdaptiveGainDefaultTypeInternal() {}
  union {
    MracAdaptiveGain _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MracAdaptiveGainDefaultTypeInternal _MracAdaptiveGain_default_instance_;
constexpr Debug::Debug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : simple_lon_debug_(nullptr)
  , simple_lat_debug_(nullptr)
  , simple_mpc_debug_(nullptr){}
struct DebugDefaultTypeInternal {
  constexpr DebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DebugDefaultTypeInternal() {}
  union {
    Debug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DebugDefaultTypeInternal _Debug_default_instance_;
}  // namespace control
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatencyStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatencyStats, total_time_ms_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatencyStats, controller_time_ms_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LatencyStats, total_time_exceeded_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, header_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, throttle_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, brake_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, steering_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, steering_target_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, reset_model_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, engine_on_off_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, trajectory_fraction_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, driving_mode_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, gear_location_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, debug_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, latency_stats_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, is_in_safe_mode_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, left_turn_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, right_turn_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, high_beam_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, low_beam_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, horn_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::ControlCommand, turnsignal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, station_error_limited_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, preview_station_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, speed_controller_input_limited_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, preview_speed_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, preview_speed_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, preview_acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, throttle_cmd_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, brake_cmd_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, slope_offset_compensation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, current_station_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, path_remain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, pid_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, leadlag_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, speed_offset_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, current_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, current_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, current_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, jerk_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, current_matched_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, current_reference_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLongitudinalDebug, preview_reference_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, lateral_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, heading_error_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, current_target_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_angle_feedback_augment_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_mrac_debug_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleLateralDebug, steer_mrac_enable_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, lateral_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, ref_heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_error_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, lateral_error_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, curvature_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_feedforward_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_lateral_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_lateral_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_heading_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_heading_rate_contribution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steering_position_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, ref_speed_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_limited_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, station_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, station_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, speed_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, speed_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, acceleration_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, is_full_stop_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, station_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, speed_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, acceleration_cmd_closeloop_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, acceleration_cmd_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, acceleration_lookup_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, speed_lookup_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, calibration_value_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_unconstrained_control_diff_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, steer_angle_feedforward_compensation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, matrix_q_updated_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, matrix_r_updated_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, lateral_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, ref_heading_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, ref_heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_error_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, ref_heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, heading_error_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, acceleration_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, acceleration_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, jerk_reference_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, jerk_feedback_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::SimpleMPCDebug, jerk_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracDebug, mrac_model_order_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracDebug, mrac_reference_state_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracDebug, mrac_state_error_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracDebug, mrac_adaptive_gain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracDebug, mrac_reference_saturation_status_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracDebug, mrac_control_saturation_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracAdaptiveGain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracAdaptiveGain, state_adaptive_gain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracAdaptiveGain, input_adaptive_gain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracAdaptiveGain, nonlinear_adaptive_gain_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::Debug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::Debug, simple_lon_debug_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::Debug, simple_lat_debug_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::Debug, simple_mpc_debug_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::control::LatencyStats)},
  { 9, -1, -1, sizeof(::autoagric::control::ControlCommand)},
  { 37, -1, -1, sizeof(::autoagric::control::SimpleLongitudinalDebug)},
  { 77, -1, -1, sizeof(::autoagric::control::SimpleLateralDebug)},
  { 116, -1, -1, sizeof(::autoagric::control::SimpleMPCDebug)},
  { 171, -1, -1, sizeof(::autoagric::control::MracDebug)},
  { 183, -1, -1, sizeof(::autoagric::control::MracAdaptiveGain)},
  { 192, -1, -1, sizeof(::autoagric::control::Debug)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_LatencyStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_ControlCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_SimpleLongitudinalDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_SimpleLateralDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_SimpleMPCDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_MracDebug_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_MracAdaptiveGain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_Debug_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#autoagric/control/control_cmd.proto\022\021a"
  "utoagric.control\032\036autoagric/canbus/chass"
  "is.proto\032\035autoagric/common/header.proto\032"
  " autoagric/common/pnc_point.proto\"^\n\014Lat"
  "encyStats\022\025\n\rtotal_time_ms\030\001 \001(\001\022\032\n\022cont"
  "roller_time_ms\030\002 \003(\001\022\033\n\023total_time_excee"
  "ded\030\003 \001(\010\"\223\005\n\016ControlCommand\022(\n\006header\030\001"
  " \001(\0132\030.autoagric.common.Header\022\020\n\010thrott"
  "le\030\003 \001(\001\022\r\n\005brake\030\004 \001(\001\022\025\n\rsteering_rate"
  "\030\006 \001(\001\022\027\n\017steering_target\030\007 \001(\001\022\025\n\rparki"
  "ng_brake\030\010 \001(\010\022\r\n\005speed\030\t \001(\001\022\024\n\014acceler"
  "ation\030\n \001(\001\022\023\n\013reset_model\030\020 \001(\010\022\025\n\rengi"
  "ne_on_off\030\021 \001(\010\022\033\n\023trajectory_fraction\030\022"
  " \001(\001\022;\n\014driving_mode\030\023 \001(\0162%.autoagric.c"
  "anbus.Chassis.DrivingMode\022=\n\rgear_locati"
  "on\030\024 \001(\0162&.autoagric.canbus.Chassis.Gear"
  "Position\022\'\n\005debug\030\026 \001(\0132\030.autoagric.cont"
  "rol.Debug\0226\n\rlatency_stats\030\030 \001(\0132\037.autoa"
  "gric.control.LatencyStats\022\027\n\017is_in_safe_"
  "mode\030\033 \001(\010\022\021\n\tleft_turn\030\r \001(\010\022\022\n\nright_t"
  "urn\030\016 \001(\010\022\021\n\thigh_beam\030\013 \001(\010\022\020\n\010low_beam"
  "\030\014 \001(\010\022\014\n\004horn\030\017 \001(\010\0221\n\nturnsignal\030\025 \001(\016"
  "2\035.autoagric.control.TurnSignal\"\266\010\n\027Simp"
  "leLongitudinalDebug\022\031\n\021station_reference"
  "\030\001 \001(\001\022\025\n\rstation_error\030\002 \001(\001\022\035\n\025station"
  "_error_limited\030\003 \001(\001\022\035\n\025preview_station_"
  "error\030\004 \001(\001\022\027\n\017speed_reference\030\005 \001(\001\022\023\n\013"
  "speed_error\030\006 \001(\001\022&\n\036speed_controller_in"
  "put_limited\030\007 \001(\001\022\037\n\027preview_speed_refer"
  "ence\030\010 \001(\001\022\033\n\023preview_speed_error\030\t \001(\001\022"
  "&\n\036preview_acceleration_reference\030\n \001(\001\022"
  "\"\n\032acceleration_cmd_closeloop\030\013 \001(\001\022\030\n\020a"
  "cceleration_cmd\030\014 \001(\001\022\033\n\023acceleration_lo"
  "okup\030\r \001(\001\022\024\n\014speed_lookup\030\016 \001(\001\022\031\n\021cali"
  "bration_value\030\017 \001(\001\022\024\n\014throttle_cmd\030\020 \001("
  "\001\022\021\n\tbrake_cmd\030\021 \001(\001\022\024\n\014is_full_stop\030\022 \001"
  "(\010\022!\n\031slope_offset_compensation\030\023 \001(\001\022\027\n"
  "\017current_station\030\024 \001(\001\022\023\n\013path_remain\030\025 "
  "\001(\001\022\035\n\025pid_saturation_status\030\026 \001(\005\022!\n\031le"
  "adlag_saturation_status\030\027 \001(\005\022\024\n\014speed_o"
  "ffset\030\030 \001(\001\022\025\n\rcurrent_speed\030\031 \001(\001\022\036\n\026ac"
  "celeration_reference\030\032 \001(\001\022\034\n\024current_ac"
  "celeration\030\033 \001(\001\022\032\n\022acceleration_error\030\034"
  " \001(\001\022\026\n\016jerk_reference\030\035 \001(\001\022\024\n\014current_"
  "jerk\030\036 \001(\001\022\022\n\njerk_error\030\037 \001(\001\022@\n\025curren"
  "t_matched_point\030  \001(\0132!.autoagric.common"
  ".TrajectoryPoint\022B\n\027current_reference_po"
  "int\030! \001(\0132!.autoagric.common.TrajectoryP"
  "oint\022B\n\027preview_reference_point\030\" \001(\0132!."
  "autoagric.common.TrajectoryPoint\"\231\010\n\022Sim"
  "pleLateralDebug\022\025\n\rlateral_error\030\001 \001(\001\022\023"
  "\n\013ref_heading\030\002 \001(\001\022\017\n\007heading\030\003 \001(\001\022\025\n\r"
  "heading_error\030\004 \001(\001\022\032\n\022heading_error_rat"
  "e\030\005 \001(\001\022\032\n\022lateral_error_rate\030\006 \001(\001\022\021\n\tc"
  "urvature\030\007 \001(\001\022\023\n\013steer_angle\030\010 \001(\001\022\037\n\027s"
  "teer_angle_feedforward\030\t \001(\001\022(\n steer_an"
  "gle_lateral_contribution\030\n \001(\001\022-\n%steer_"
  "angle_lateral_rate_contribution\030\013 \001(\001\022(\n"
  " steer_angle_heading_contribution\030\014 \001(\001\022"
  "-\n%steer_angle_heading_rate_contribution"
  "\030\r \001(\001\022\034\n\024steer_angle_feedback\030\016 \001(\001\022\031\n\021"
  "steering_position\030\017 \001(\001\022\021\n\tref_speed\030\020 \001"
  "(\001\022\033\n\023steer_angle_limited\030\021 \001(\001\022\034\n\024later"
  "al_acceleration\030\022 \001(\001\022\024\n\014lateral_jerk\030\023 "
  "\001(\001\022\030\n\020ref_heading_rate\030\024 \001(\001\022\024\n\014heading"
  "_rate\030\025 \001(\001\022 \n\030ref_heading_acceleration\030"
  "\026 \001(\001\022\034\n\024heading_acceleration\030\027 \001(\001\022\"\n\032h"
  "eading_error_acceleration\030\030 \001(\001\022\030\n\020ref_h"
  "eading_jerk\030\031 \001(\001\022\024\n\014heading_jerk\030\032 \001(\001\022"
  "\032\n\022heading_error_jerk\030\033 \001(\001\022\036\n\026lateral_e"
  "rror_feedback\030\034 \001(\001\022\036\n\026heading_error_fee"
  "dback\030\035 \001(\001\022\?\n\024current_target_point\030\036 \001("
  "\0132!.autoagric.common.TrajectoryPoint\022$\n\034"
  "steer_angle_feedback_augment\030\037 \001(\001\0226\n\020st"
  "eer_mrac_debug\030  \001(\0132\034.autoagric.control"
  ".MracDebug\022 \n\030steer_mrac_enable_status\030!"
  " \001(\010\"\362\n\n\016SimpleMPCDebug\022\025\n\rlateral_error"
  "\030\001 \001(\001\022\023\n\013ref_heading\030\002 \001(\001\022\017\n\007heading\030\003"
  " \001(\001\022\025\n\rheading_error\030\004 \001(\001\022\032\n\022heading_e"
  "rror_rate\030\005 \001(\001\022\032\n\022lateral_error_rate\030\006 "
  "\001(\001\022\021\n\tcurvature\030\007 \001(\001\022\023\n\013steer_angle\030\010 "
  "\001(\001\022\037\n\027steer_angle_feedforward\030\t \001(\001\022(\n "
  "steer_angle_lateral_contribution\030\n \001(\001\022-"
  "\n%steer_angle_lateral_rate_contribution\030"
  "\013 \001(\001\022(\n steer_angle_heading_contributio"
  "n\030\014 \001(\001\022-\n%steer_angle_heading_rate_cont"
  "ribution\030\r \001(\001\022\034\n\024steer_angle_feedback\030\016"
  " \001(\001\022\031\n\021steering_position\030\017 \001(\001\022\021\n\tref_s"
  "peed\030\020 \001(\001\022\033\n\023steer_angle_limited\030\021 \001(\001\022"
  "\031\n\021station_reference\030\022 \001(\001\022\025\n\rstation_er"
  "ror\030\023 \001(\001\022\027\n\017speed_reference\030\024 \001(\001\022\023\n\013sp"
  "eed_error\030\025 \001(\001\022\036\n\026acceleration_referenc"
  "e\030\026 \001(\001\022\024\n\014is_full_stop\030\027 \001(\010\022\030\n\020station"
  "_feedback\030\030 \001(\001\022\026\n\016speed_feedback\030\031 \001(\001\022"
  "\"\n\032acceleration_cmd_closeloop\030\032 \001(\001\022\030\n\020a"
  "cceleration_cmd\030\033 \001(\001\022\033\n\023acceleration_lo"
  "okup\030\034 \001(\001\022\024\n\014speed_lookup\030\035 \001(\001\022\031\n\021cali"
  "bration_value\030\036 \001(\001\022(\n steer_unconstrain"
  "ed_control_diff\030\037 \001(\001\022,\n$steer_angle_fee"
  "dforward_compensation\030  \001(\001\022\030\n\020matrix_q_"
  "updated\030! \003(\001\022\030\n\020matrix_r_updated\030\" \003(\001\022"
  "\034\n\024lateral_acceleration\030# \001(\001\022\024\n\014lateral"
  "_jerk\030$ \001(\001\022\030\n\020ref_heading_rate\030% \001(\001\022\024\n"
  "\014heading_rate\030& \001(\001\022 \n\030ref_heading_accel"
  "eration\030\' \001(\001\022\034\n\024heading_acceleration\030( "
  "\001(\001\022\"\n\032heading_error_acceleration\030) \001(\001\022"
  "\030\n\020ref_heading_jerk\030* \001(\001\022\024\n\014heading_jer"
  "k\030+ \001(\001\022\032\n\022heading_error_jerk\030, \001(\001\022\035\n\025a"
  "cceleration_feedback\030- \001(\001\022\032\n\022accelerati"
  "on_error\030. \001(\001\022\026\n\016jerk_reference\030/ \001(\001\022\025"
  "\n\rjerk_feedback\0300 \001(\001\022\022\n\njerk_error\0301 \001("
  "\001\"\360\001\n\tMracDebug\022\030\n\020mrac_model_order\030\001 \001("
  "\005\022\034\n\024mrac_reference_state\030\002 \003(\001\022\030\n\020mrac_"
  "state_error\030\003 \003(\001\022\?\n\022mrac_adaptive_gain\030"
  "\004 \001(\0132#.autoagric.control.MracAdaptiveGa"
  "in\022(\n mrac_reference_saturation_status\030\005"
  " \001(\005\022&\n\036mrac_control_saturation_status\030\006"
  " \001(\005\"m\n\020MracAdaptiveGain\022\033\n\023state_adapti"
  "ve_gain\030\001 \003(\001\022\033\n\023input_adaptive_gain\030\002 \003"
  "(\001\022\037\n\027nonlinear_adaptive_gain\030\003 \003(\001\"\313\001\n\005"
  "Debug\022D\n\020simple_lon_debug\030\001 \001(\0132*.autoag"
  "ric.control.SimpleLongitudinalDebug\022\?\n\020s"
  "imple_lat_debug\030\002 \001(\0132%.autoagric.contro"
  "l.SimpleLateralDebug\022;\n\020simple_mpc_debug"
  "\030\004 \001(\0132!.autoagric.control.SimpleMPCDebu"
  "g*:\n\nTurnSignal\022\r\n\tTURN_NONE\020\000\022\r\n\tTURN_L"
  "EFT\020\001\022\016\n\nTURN_RIGHT\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_deps[3] = {
  &::descriptor_table_autoagric_2fcanbus_2fchassis_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fheader_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fpnc_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto = {
  false, false, 5069, descriptor_table_protodef_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto, "autoagric/control/control_cmd.proto", 
  &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once, descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_deps, 3, 8,
  schemas, file_default_instances, TableStruct_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto::offsets,
  file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto, file_level_enum_descriptors_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto, file_level_service_descriptors_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter() {
  return &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto(&descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto);
namespace autoagric {
namespace control {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TurnSignal_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto);
  return file_level_enum_descriptors_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[0];
}
bool TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LatencyStats::_Internal {
 public:
};

LatencyStats::LatencyStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  controller_time_ms_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.LatencyStats)
}
LatencyStats::LatencyStats(const LatencyStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      controller_time_ms_(from.controller_time_ms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&total_time_ms_, &from.total_time_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_exceeded_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.LatencyStats)
}

inline void LatencyStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&total_time_ms_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&total_time_exceeded_) -
    reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
}

LatencyStats::~LatencyStats() {
  // @@protoc_insertion_point(destructor:autoagric.control.LatencyStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LatencyStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LatencyStats::ArenaDtor(void* object) {
  LatencyStats* _this = reinterpret_cast< LatencyStats* >(object);
  (void)_this;
}
void LatencyStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LatencyStats::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.LatencyStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_time_ms_.Clear();
  ::memset(&total_time_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_exceeded_) -
      reinterpret_cast<char*>(&total_time_ms_)) + sizeof(total_time_exceeded_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double total_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          total_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double controller_time_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_controller_time_ms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_controller_time_ms(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool total_time_exceeded = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          total_time_exceeded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.LatencyStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double total_time_ms = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_time_ms = this->_internal_total_time_ms();
  uint64_t raw_total_time_ms;
  memcpy(&raw_total_time_ms, &tmp_total_time_ms, sizeof(tmp_total_time_ms));
  if (raw_total_time_ms != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_total_time_ms(), target);
  }

  // repeated double controller_time_ms = 2;
  if (this->_internal_controller_time_ms_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_controller_time_ms(), target);
  }

  // bool total_time_exceeded = 3;
  if (this->_internal_total_time_exceeded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_total_time_exceeded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.LatencyStats)
  return target;
}

size_t LatencyStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.LatencyStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double controller_time_ms = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_controller_time_ms_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double total_time_ms = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_time_ms = this->_internal_total_time_ms();
  uint64_t raw_total_time_ms;
  memcpy(&raw_total_time_ms, &tmp_total_time_ms, sizeof(tmp_total_time_ms));
  if (raw_total_time_ms != 0) {
    total_size += 1 + 8;
  }

  // bool total_time_exceeded = 3;
  if (this->_internal_total_time_exceeded() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyStats::GetClassData() const { return &_class_data_; }

void LatencyStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyStats *>(to)->MergeFrom(
      static_cast<const LatencyStats &>(from));
}


void LatencyStats::MergeFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.LatencyStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  controller_time_ms_.MergeFrom(from.controller_time_ms_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_time_ms = from._internal_total_time_ms();
  uint64_t raw_total_time_ms;
  memcpy(&raw_total_time_ms, &tmp_total_time_ms, sizeof(tmp_total_time_ms));
  if (raw_total_time_ms != 0) {
    _internal_set_total_time_ms(from._internal_total_time_ms());
  }
  if (from._internal_total_time_exceeded() != 0) {
    _internal_set_total_time_exceeded(from._internal_total_time_exceeded());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyStats::CopyFrom(const LatencyStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.LatencyStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyStats::IsInitialized() const {
  return true;
}

void LatencyStats::InternalSwap(LatencyStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  controller_time_ms_.InternalSwap(&other->controller_time_ms_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyStats, total_time_exceeded_)
      + sizeof(LatencyStats::total_time_exceeded_)
      - PROTOBUF_FIELD_OFFSET(LatencyStats, total_time_ms_)>(
          reinterpret_cast<char*>(&total_time_ms_),
          reinterpret_cast<char*>(&other->total_time_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[0]);
}

// ===================================================================

class ControlCommand::_Internal {
 public:
  static const ::autoagric::common::Header& header(const ControlCommand* msg);
  static const ::autoagric::control::Debug& debug(const ControlCommand* msg);
  static const ::autoagric::control::LatencyStats& latency_stats(const ControlCommand* msg);
};

const ::autoagric::common::Header&
ControlCommand::_Internal::header(const ControlCommand* msg) {
  return *msg->header_;
}
const ::autoagric::control::Debug&
ControlCommand::_Internal::debug(const ControlCommand* msg) {
  return *msg->debug_;
}
const ::autoagric::control::LatencyStats&
ControlCommand::_Internal::latency_stats(const ControlCommand* msg) {
  return *msg->latency_stats_;
}
void ControlCommand::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
ControlCommand::ControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.ControlCommand)
}
ControlCommand::ControlCommand(const ControlCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::autoagric::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_debug()) {
    debug_ = new ::autoagric::control::Debug(*from.debug_);
  } else {
    debug_ = nullptr;
  }
  if (from._internal_has_latency_stats()) {
    latency_stats_ = new ::autoagric::control::LatencyStats(*from.latency_stats_);
  } else {
    latency_stats_ = nullptr;
  }
  ::memcpy(&throttle_, &from.throttle_,
    static_cast<size_t>(reinterpret_cast<char*>(&turnsignal_) -
    reinterpret_cast<char*>(&throttle_)) + sizeof(turnsignal_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.ControlCommand)
}

inline void ControlCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&turnsignal_) -
    reinterpret_cast<char*>(&header_)) + sizeof(turnsignal_));
}

ControlCommand::~ControlCommand() {
  // @@protoc_insertion_point(destructor:autoagric.control.ControlCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete latency_stats_;
}

void ControlCommand::ArenaDtor(void* object) {
  ControlCommand* _this = reinterpret_cast< ControlCommand* >(object);
  (void)_this;
}
void ControlCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.ControlCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && debug_ != nullptr) {
    delete debug_;
  }
  debug_ = nullptr;
  if (GetArenaForAllocation() == nullptr && latency_stats_ != nullptr) {
    delete latency_stats_;
  }
  latency_stats_ = nullptr;
  ::memset(&throttle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&turnsignal_) -
      reinterpret_cast<char*>(&throttle_)) + sizeof(turnsignal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double throttle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steering_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          steering_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steering_target = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          steering_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool parking_brake = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          parking_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool high_beam = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          high_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool low_beam = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          low_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool left_turn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          left_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool right_turn = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          right_turn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool horn = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reset_model = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          reset_model_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool engine_on_off = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          engine_on_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double trajectory_fraction = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          trajectory_fraction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.canbus.Chassis.DrivingMode driving_mode = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_driving_mode(static_cast<::autoagric::canbus::Chassis_DrivingMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.canbus.Chassis.GearPosition gear_location = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear_location(static_cast<::autoagric::canbus::Chassis_GearPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.TurnSignal turnsignal = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turnsignal(static_cast<::autoagric::control::TurnSignal>(val));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.Debug debug = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.LatencyStats latency_stats = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_in_safe_mode = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          is_in_safe_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.ControlCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // double throttle = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle = this->_internal_throttle();
  uint64_t raw_throttle;
  memcpy(&raw_throttle, &tmp_throttle, sizeof(tmp_throttle));
  if (raw_throttle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_throttle(), target);
  }

  // double brake = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake = this->_internal_brake();
  uint64_t raw_brake;
  memcpy(&raw_brake, &tmp_brake, sizeof(tmp_brake));
  if (raw_brake != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_brake(), target);
  }

  // double steering_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_rate = this->_internal_steering_rate();
  uint64_t raw_steering_rate;
  memcpy(&raw_steering_rate, &tmp_steering_rate, sizeof(tmp_steering_rate));
  if (raw_steering_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_steering_rate(), target);
  }

  // double steering_target = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_target = this->_internal_steering_target();
  uint64_t raw_steering_target;
  memcpy(&raw_steering_target, &tmp_steering_target, sizeof(tmp_steering_target));
  if (raw_steering_target != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_steering_target(), target);
  }

  // bool parking_brake = 8;
  if (this->_internal_parking_brake() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_parking_brake(), target);
  }

  // double speed = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_speed(), target);
  }

  // double acceleration = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_acceleration(), target);
  }

  // bool high_beam = 11;
  if (this->_internal_high_beam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_high_beam(), target);
  }

  // bool low_beam = 12;
  if (this->_internal_low_beam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_low_beam(), target);
  }

  // bool left_turn = 13;
  if (this->_internal_left_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_left_turn(), target);
  }

  // bool right_turn = 14;
  if (this->_internal_right_turn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_right_turn(), target);
  }

  // bool horn = 15;
  if (this->_internal_horn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_horn(), target);
  }

  // bool reset_model = 16;
  if (this->_internal_reset_model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_reset_model(), target);
  }

  // bool engine_on_off = 17;
  if (this->_internal_engine_on_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_engine_on_off(), target);
  }

  // double trajectory_fraction = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_trajectory_fraction = this->_internal_trajectory_fraction();
  uint64_t raw_trajectory_fraction;
  memcpy(&raw_trajectory_fraction, &tmp_trajectory_fraction, sizeof(tmp_trajectory_fraction));
  if (raw_trajectory_fraction != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_trajectory_fraction(), target);
  }

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 19;
  if (this->_internal_driving_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_driving_mode(), target);
  }

  // .autoagric.canbus.Chassis.GearPosition gear_location = 20;
  if (this->_internal_gear_location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->_internal_gear_location(), target);
  }

  // .autoagric.control.TurnSignal turnsignal = 21;
  if (this->_internal_turnsignal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_turnsignal(), target);
  }

  // .autoagric.control.Debug debug = 22;
  if (this->_internal_has_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::debug(this), target, stream);
  }

  // .autoagric.control.LatencyStats latency_stats = 24;
  if (this->_internal_has_latency_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::latency_stats(this), target, stream);
  }

  // bool is_in_safe_mode = 27;
  if (this->_internal_is_in_safe_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_is_in_safe_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.ControlCommand)
  return target;
}

size_t ControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.ControlCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .autoagric.control.Debug debug = 22;
  if (this->_internal_has_debug()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debug_);
  }

  // .autoagric.control.LatencyStats latency_stats = 24;
  if (this->_internal_has_latency_stats()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_stats_);
  }

  // double throttle = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle = this->_internal_throttle();
  uint64_t raw_throttle;
  memcpy(&raw_throttle, &tmp_throttle, sizeof(tmp_throttle));
  if (raw_throttle != 0) {
    total_size += 1 + 8;
  }

  // double brake = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake = this->_internal_brake();
  uint64_t raw_brake;
  memcpy(&raw_brake, &tmp_brake, sizeof(tmp_brake));
  if (raw_brake != 0) {
    total_size += 1 + 8;
  }

  // double steering_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_rate = this->_internal_steering_rate();
  uint64_t raw_steering_rate;
  memcpy(&raw_steering_rate, &tmp_steering_rate, sizeof(tmp_steering_rate));
  if (raw_steering_rate != 0) {
    total_size += 1 + 8;
  }

  // double steering_target = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_target = this->_internal_steering_target();
  uint64_t raw_steering_target;
  memcpy(&raw_steering_target, &tmp_steering_target, sizeof(tmp_steering_target));
  if (raw_steering_target != 0) {
    total_size += 1 + 8;
  }

  // double speed = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = this->_internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 8;
  }

  // double acceleration = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration = this->_internal_acceleration();
  uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    total_size += 1 + 8;
  }

  // bool left_turn = 13;
  if (this->_internal_left_turn() != 0) {
    total_size += 1 + 1;
  }

  // bool right_turn = 14;
  if (this->_internal_right_turn() != 0) {
    total_size += 1 + 1;
  }

  // bool high_beam = 11;
  if (this->_internal_high_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool low_beam = 12;
  if (this->_internal_low_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool horn = 15;
  if (this->_internal_horn() != 0) {
    total_size += 1 + 1;
  }

  // bool parking_brake = 8;
  if (this->_internal_parking_brake() != 0) {
    total_size += 1 + 1;
  }

  // bool reset_model = 16;
  if (this->_internal_reset_model() != 0) {
    total_size += 2 + 1;
  }

  // bool engine_on_off = 17;
  if (this->_internal_engine_on_off() != 0) {
    total_size += 2 + 1;
  }

  // bool is_in_safe_mode = 27;
  if (this->_internal_is_in_safe_mode() != 0) {
    total_size += 2 + 1;
  }

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 19;
  if (this->_internal_driving_mode() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_driving_mode());
  }

  // double trajectory_fraction = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_trajectory_fraction = this->_internal_trajectory_fraction();
  uint64_t raw_trajectory_fraction;
  memcpy(&raw_trajectory_fraction, &tmp_trajectory_fraction, sizeof(tmp_trajectory_fraction));
  if (raw_trajectory_fraction != 0) {
    total_size += 2 + 8;
  }

  // .autoagric.canbus.Chassis.GearPosition gear_location = 20;
  if (this->_internal_gear_location() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_location());
  }

  // .autoagric.control.TurnSignal turnsignal = 21;
  if (this->_internal_turnsignal() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turnsignal());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCommand::GetClassData() const { return &_class_data_; }

void ControlCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlCommand *>(to)->MergeFrom(
      static_cast<const ControlCommand &>(from));
}


void ControlCommand::MergeFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.ControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::autoagric::common::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_debug()) {
    _internal_mutable_debug()->::autoagric::control::Debug::MergeFrom(from._internal_debug());
  }
  if (from._internal_has_latency_stats()) {
    _internal_mutable_latency_stats()->::autoagric::control::LatencyStats::MergeFrom(from._internal_latency_stats());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle = from._internal_throttle();
  uint64_t raw_throttle;
  memcpy(&raw_throttle, &tmp_throttle, sizeof(tmp_throttle));
  if (raw_throttle != 0) {
    _internal_set_throttle(from._internal_throttle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake = from._internal_brake();
  uint64_t raw_brake;
  memcpy(&raw_brake, &tmp_brake, sizeof(tmp_brake));
  if (raw_brake != 0) {
    _internal_set_brake(from._internal_brake());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_rate = from._internal_steering_rate();
  uint64_t raw_steering_rate;
  memcpy(&raw_steering_rate, &tmp_steering_rate, sizeof(tmp_steering_rate));
  if (raw_steering_rate != 0) {
    _internal_set_steering_rate(from._internal_steering_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_target = from._internal_steering_target();
  uint64_t raw_steering_target;
  memcpy(&raw_steering_target, &tmp_steering_target, sizeof(tmp_steering_target));
  if (raw_steering_target != 0) {
    _internal_set_steering_target(from._internal_steering_target());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed = from._internal_speed();
  uint64_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration = from._internal_acceleration();
  uint64_t raw_acceleration;
  memcpy(&raw_acceleration, &tmp_acceleration, sizeof(tmp_acceleration));
  if (raw_acceleration != 0) {
    _internal_set_acceleration(from._internal_acceleration());
  }
  if (from._internal_left_turn() != 0) {
    _internal_set_left_turn(from._internal_left_turn());
  }
  if (from._internal_right_turn() != 0) {
    _internal_set_right_turn(from._internal_right_turn());
  }
  if (from._internal_high_beam() != 0) {
    _internal_set_high_beam(from._internal_high_beam());
  }
  if (from._internal_low_beam() != 0) {
    _internal_set_low_beam(from._internal_low_beam());
  }
  if (from._internal_horn() != 0) {
    _internal_set_horn(from._internal_horn());
  }
  if (from._internal_parking_brake() != 0) {
    _internal_set_parking_brake(from._internal_parking_brake());
  }
  if (from._internal_reset_model() != 0) {
    _internal_set_reset_model(from._internal_reset_model());
  }
  if (from._internal_engine_on_off() != 0) {
    _internal_set_engine_on_off(from._internal_engine_on_off());
  }
  if (from._internal_is_in_safe_mode() != 0) {
    _internal_set_is_in_safe_mode(from._internal_is_in_safe_mode());
  }
  if (from._internal_driving_mode() != 0) {
    _internal_set_driving_mode(from._internal_driving_mode());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_trajectory_fraction = from._internal_trajectory_fraction();
  uint64_t raw_trajectory_fraction;
  memcpy(&raw_trajectory_fraction, &tmp_trajectory_fraction, sizeof(tmp_trajectory_fraction));
  if (raw_trajectory_fraction != 0) {
    _internal_set_trajectory_fraction(from._internal_trajectory_fraction());
  }
  if (from._internal_gear_location() != 0) {
    _internal_set_gear_location(from._internal_gear_location());
  }
  if (from._internal_turnsignal() != 0) {
    _internal_set_turnsignal(from._internal_turnsignal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCommand::CopyFrom(const ControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.ControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCommand::IsInitialized() const {
  return true;
}

void ControlCommand::InternalSwap(ControlCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCommand, turnsignal_)
      + sizeof(ControlCommand::turnsignal_)
      - PROTOBUF_FIELD_OFFSET(ControlCommand, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[1]);
}

// ===================================================================

class SimpleLongitudinalDebug::_Internal {
 public:
  static const ::autoagric::common::TrajectoryPoint& current_matched_point(const SimpleLongitudinalDebug* msg);
  static const ::autoagric::common::TrajectoryPoint& current_reference_point(const SimpleLongitudinalDebug* msg);
  static const ::autoagric::common::TrajectoryPoint& preview_reference_point(const SimpleLongitudinalDebug* msg);
};

const ::autoagric::common::TrajectoryPoint&
SimpleLongitudinalDebug::_Internal::current_matched_point(const SimpleLongitudinalDebug* msg) {
  return *msg->current_matched_point_;
}
const ::autoagric::common::TrajectoryPoint&
SimpleLongitudinalDebug::_Internal::current_reference_point(const SimpleLongitudinalDebug* msg) {
  return *msg->current_reference_point_;
}
const ::autoagric::common::TrajectoryPoint&
SimpleLongitudinalDebug::_Internal::preview_reference_point(const SimpleLongitudinalDebug* msg) {
  return *msg->preview_reference_point_;
}
void SimpleLongitudinalDebug::clear_current_matched_point() {
  if (GetArenaForAllocation() == nullptr && current_matched_point_ != nullptr) {
    delete current_matched_point_;
  }
  current_matched_point_ = nullptr;
}
void SimpleLongitudinalDebug::clear_current_reference_point() {
  if (GetArenaForAllocation() == nullptr && current_reference_point_ != nullptr) {
    delete current_reference_point_;
  }
  current_reference_point_ = nullptr;
}
void SimpleLongitudinalDebug::clear_preview_reference_point() {
  if (GetArenaForAllocation() == nullptr && preview_reference_point_ != nullptr) {
    delete preview_reference_point_;
  }
  preview_reference_point_ = nullptr;
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.SimpleLongitudinalDebug)
}
SimpleLongitudinalDebug::SimpleLongitudinalDebug(const SimpleLongitudinalDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_matched_point()) {
    current_matched_point_ = new ::autoagric::common::TrajectoryPoint(*from.current_matched_point_);
  } else {
    current_matched_point_ = nullptr;
  }
  if (from._internal_has_current_reference_point()) {
    current_reference_point_ = new ::autoagric::common::TrajectoryPoint(*from.current_reference_point_);
  } else {
    current_reference_point_ = nullptr;
  }
  if (from._internal_has_preview_reference_point()) {
    preview_reference_point_ = new ::autoagric::common::TrajectoryPoint(*from.preview_reference_point_);
  } else {
    preview_reference_point_ = nullptr;
  }
  ::memcpy(&station_reference_, &from.station_reference_,
    static_cast<size_t>(reinterpret_cast<char*>(&leadlag_saturation_status_) -
    reinterpret_cast<char*>(&station_reference_)) + sizeof(leadlag_saturation_status_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.SimpleLongitudinalDebug)
}

inline void SimpleLongitudinalDebug::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_matched_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&leadlag_saturation_status_) -
    reinterpret_cast<char*>(&current_matched_point_)) + sizeof(leadlag_saturation_status_));
}

SimpleLongitudinalDebug::~SimpleLongitudinalDebug() {
  // @@protoc_insertion_point(destructor:autoagric.control.SimpleLongitudinalDebug)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimpleLongitudinalDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete current_matched_point_;
  if (this != internal_default_instance()) delete current_reference_point_;
  if (this != internal_default_instance()) delete preview_reference_point_;
}

void SimpleLongitudinalDebug::ArenaDtor(void* object) {
  SimpleLongitudinalDebug* _this = reinterpret_cast< SimpleLongitudinalDebug* >(object);
  (void)_this;
}
void SimpleLongitudinalDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleLongitudinalDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleLongitudinalDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.SimpleLongitudinalDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && current_matched_point_ != nullptr) {
    delete current_matched_point_;
  }
  current_matched_point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && current_reference_point_ != nullptr) {
    delete current_reference_point_;
  }
  current_reference_point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && preview_reference_point_ != nullptr) {
    delete preview_reference_point_;
  }
  preview_reference_point_ = nullptr;
  ::memset(&station_reference_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&leadlag_saturation_status_) -
      reinterpret_cast<char*>(&station_reference_)) + sizeof(leadlag_saturation_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLongitudinalDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double station_reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double station_error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double station_error_limited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          station_error_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double preview_station_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          preview_station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_error = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_controller_input_limited = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          speed_controller_input_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double preview_speed_reference = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          preview_speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double preview_speed_error = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          preview_speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double preview_acceleration_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          preview_acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_cmd_closeloop = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_cmd = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_lookup = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_lookup = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double calibration_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double throttle_cmd = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          throttle_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double brake_cmd = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          brake_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_full_stop = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double slope_offset_compensation = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          slope_offset_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_station = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          current_station_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double path_remain = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          path_remain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 pid_saturation_status = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          pid_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 leadlag_saturation_status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          leadlag_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double speed_offset = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          speed_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_speed = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          current_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_reference = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_acceleration = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          current_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_error = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jerk_reference = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double current_jerk = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          current_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jerk_error = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.TrajectoryPoint current_matched_point = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_matched_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.TrajectoryPoint current_reference_point = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_reference_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.TrajectoryPoint preview_reference_point = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preview_reference_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleLongitudinalDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.SimpleLongitudinalDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double station_reference = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_reference = this->_internal_station_reference();
  uint64_t raw_station_reference;
  memcpy(&raw_station_reference, &tmp_station_reference, sizeof(tmp_station_reference));
  if (raw_station_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_station_reference(), target);
  }

  // double station_error = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error = this->_internal_station_error();
  uint64_t raw_station_error;
  memcpy(&raw_station_error, &tmp_station_error, sizeof(tmp_station_error));
  if (raw_station_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_station_error(), target);
  }

  // double station_error_limited = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error_limited = this->_internal_station_error_limited();
  uint64_t raw_station_error_limited;
  memcpy(&raw_station_error_limited, &tmp_station_error_limited, sizeof(tmp_station_error_limited));
  if (raw_station_error_limited != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_station_error_limited(), target);
  }

  // double preview_station_error = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_station_error = this->_internal_preview_station_error();
  uint64_t raw_preview_station_error;
  memcpy(&raw_preview_station_error, &tmp_preview_station_error, sizeof(tmp_preview_station_error));
  if (raw_preview_station_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_preview_station_error(), target);
  }

  // double speed_reference = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_reference = this->_internal_speed_reference();
  uint64_t raw_speed_reference;
  memcpy(&raw_speed_reference, &tmp_speed_reference, sizeof(tmp_speed_reference));
  if (raw_speed_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_speed_reference(), target);
  }

  // double speed_error = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_error = this->_internal_speed_error();
  uint64_t raw_speed_error;
  memcpy(&raw_speed_error, &tmp_speed_error, sizeof(tmp_speed_error));
  if (raw_speed_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_speed_error(), target);
  }

  // double speed_controller_input_limited = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_controller_input_limited = this->_internal_speed_controller_input_limited();
  uint64_t raw_speed_controller_input_limited;
  memcpy(&raw_speed_controller_input_limited, &tmp_speed_controller_input_limited, sizeof(tmp_speed_controller_input_limited));
  if (raw_speed_controller_input_limited != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_speed_controller_input_limited(), target);
  }

  // double preview_speed_reference = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_speed_reference = this->_internal_preview_speed_reference();
  uint64_t raw_preview_speed_reference;
  memcpy(&raw_preview_speed_reference, &tmp_preview_speed_reference, sizeof(tmp_preview_speed_reference));
  if (raw_preview_speed_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_preview_speed_reference(), target);
  }

  // double preview_speed_error = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_speed_error = this->_internal_preview_speed_error();
  uint64_t raw_preview_speed_error;
  memcpy(&raw_preview_speed_error, &tmp_preview_speed_error, sizeof(tmp_preview_speed_error));
  if (raw_preview_speed_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_preview_speed_error(), target);
  }

  // double preview_acceleration_reference = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_acceleration_reference = this->_internal_preview_acceleration_reference();
  uint64_t raw_preview_acceleration_reference;
  memcpy(&raw_preview_acceleration_reference, &tmp_preview_acceleration_reference, sizeof(tmp_preview_acceleration_reference));
  if (raw_preview_acceleration_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_preview_acceleration_reference(), target);
  }

  // double acceleration_cmd_closeloop = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd_closeloop = this->_internal_acceleration_cmd_closeloop();
  uint64_t raw_acceleration_cmd_closeloop;
  memcpy(&raw_acceleration_cmd_closeloop, &tmp_acceleration_cmd_closeloop, sizeof(tmp_acceleration_cmd_closeloop));
  if (raw_acceleration_cmd_closeloop != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // double acceleration_cmd = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd = this->_internal_acceleration_cmd();
  uint64_t raw_acceleration_cmd;
  memcpy(&raw_acceleration_cmd, &tmp_acceleration_cmd, sizeof(tmp_acceleration_cmd));
  if (raw_acceleration_cmd != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_acceleration_cmd(), target);
  }

  // double acceleration_lookup = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_lookup = this->_internal_acceleration_lookup();
  uint64_t raw_acceleration_lookup;
  memcpy(&raw_acceleration_lookup, &tmp_acceleration_lookup, sizeof(tmp_acceleration_lookup));
  if (raw_acceleration_lookup != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_acceleration_lookup(), target);
  }

  // double speed_lookup = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_lookup = this->_internal_speed_lookup();
  uint64_t raw_speed_lookup;
  memcpy(&raw_speed_lookup, &tmp_speed_lookup, sizeof(tmp_speed_lookup));
  if (raw_speed_lookup != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_speed_lookup(), target);
  }

  // double calibration_value = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_calibration_value = this->_internal_calibration_value();
  uint64_t raw_calibration_value;
  memcpy(&raw_calibration_value, &tmp_calibration_value, sizeof(tmp_calibration_value));
  if (raw_calibration_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_calibration_value(), target);
  }

  // double throttle_cmd = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_cmd = this->_internal_throttle_cmd();
  uint64_t raw_throttle_cmd;
  memcpy(&raw_throttle_cmd, &tmp_throttle_cmd, sizeof(tmp_throttle_cmd));
  if (raw_throttle_cmd != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_throttle_cmd(), target);
  }

  // double brake_cmd = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_cmd = this->_internal_brake_cmd();
  uint64_t raw_brake_cmd;
  memcpy(&raw_brake_cmd, &tmp_brake_cmd, sizeof(tmp_brake_cmd));
  if (raw_brake_cmd != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_brake_cmd(), target);
  }

  // bool is_full_stop = 18;
  if (this->_internal_is_full_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_full_stop(), target);
  }

  // double slope_offset_compensation = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_slope_offset_compensation = this->_internal_slope_offset_compensation();
  uint64_t raw_slope_offset_compensation;
  memcpy(&raw_slope_offset_compensation, &tmp_slope_offset_compensation, sizeof(tmp_slope_offset_compensation));
  if (raw_slope_offset_compensation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_slope_offset_compensation(), target);
  }

  // double current_station = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_station = this->_internal_current_station();
  uint64_t raw_current_station;
  memcpy(&raw_current_station, &tmp_current_station, sizeof(tmp_current_station));
  if (raw_current_station != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_current_station(), target);
  }

  // double path_remain = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_path_remain = this->_internal_path_remain();
  uint64_t raw_path_remain;
  memcpy(&raw_path_remain, &tmp_path_remain, sizeof(tmp_path_remain));
  if (raw_path_remain != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_path_remain(), target);
  }

  // int32 pid_saturation_status = 22;
  if (this->_internal_pid_saturation_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_pid_saturation_status(), target);
  }

  // int32 leadlag_saturation_status = 23;
  if (this->_internal_leadlag_saturation_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_leadlag_saturation_status(), target);
  }

  // double speed_offset = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_offset = this->_internal_speed_offset();
  uint64_t raw_speed_offset;
  memcpy(&raw_speed_offset, &tmp_speed_offset, sizeof(tmp_speed_offset));
  if (raw_speed_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_speed_offset(), target);
  }

  // double current_speed = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_speed = this->_internal_current_speed();
  uint64_t raw_current_speed;
  memcpy(&raw_current_speed, &tmp_current_speed, sizeof(tmp_current_speed));
  if (raw_current_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_current_speed(), target);
  }

  // double acceleration_reference = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_reference = this->_internal_acceleration_reference();
  uint64_t raw_acceleration_reference;
  memcpy(&raw_acceleration_reference, &tmp_acceleration_reference, sizeof(tmp_acceleration_reference));
  if (raw_acceleration_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_reference(), target);
  }

  // double current_acceleration = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_acceleration = this->_internal_current_acceleration();
  uint64_t raw_current_acceleration;
  memcpy(&raw_current_acceleration, &tmp_current_acceleration, sizeof(tmp_current_acceleration));
  if (raw_current_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_current_acceleration(), target);
  }

  // double acceleration_error = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_error = this->_internal_acceleration_error();
  uint64_t raw_acceleration_error;
  memcpy(&raw_acceleration_error, &tmp_acceleration_error, sizeof(tmp_acceleration_error));
  if (raw_acceleration_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_error(), target);
  }

  // double jerk_reference = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_reference = this->_internal_jerk_reference();
  uint64_t raw_jerk_reference;
  memcpy(&raw_jerk_reference, &tmp_jerk_reference, sizeof(tmp_jerk_reference));
  if (raw_jerk_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_jerk_reference(), target);
  }

  // double current_jerk = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_jerk = this->_internal_current_jerk();
  uint64_t raw_current_jerk;
  memcpy(&raw_current_jerk, &tmp_current_jerk, sizeof(tmp_current_jerk));
  if (raw_current_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_current_jerk(), target);
  }

  // double jerk_error = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_error = this->_internal_jerk_error();
  uint64_t raw_jerk_error;
  memcpy(&raw_jerk_error, &tmp_jerk_error, sizeof(tmp_jerk_error));
  if (raw_jerk_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_jerk_error(), target);
  }

  // .autoagric.common.TrajectoryPoint current_matched_point = 32;
  if (this->_internal_has_current_matched_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::current_matched_point(this), target, stream);
  }

  // .autoagric.common.TrajectoryPoint current_reference_point = 33;
  if (this->_internal_has_current_reference_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::current_reference_point(this), target, stream);
  }

  // .autoagric.common.TrajectoryPoint preview_reference_point = 34;
  if (this->_internal_has_preview_reference_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::preview_reference_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.SimpleLongitudinalDebug)
  return target;
}

size_t SimpleLongitudinalDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.SimpleLongitudinalDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.TrajectoryPoint current_matched_point = 32;
  if (this->_internal_has_current_matched_point()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_matched_point_);
  }

  // .autoagric.common.TrajectoryPoint current_reference_point = 33;
  if (this->_internal_has_current_reference_point()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_reference_point_);
  }

  // .autoagric.common.TrajectoryPoint preview_reference_point = 34;
  if (this->_internal_has_preview_reference_point()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *preview_reference_point_);
  }

  // double station_reference = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_reference = this->_internal_station_reference();
  uint64_t raw_station_reference;
  memcpy(&raw_station_reference, &tmp_station_reference, sizeof(tmp_station_reference));
  if (raw_station_reference != 0) {
    total_size += 1 + 8;
  }

  // double station_error = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error = this->_internal_station_error();
  uint64_t raw_station_error;
  memcpy(&raw_station_error, &tmp_station_error, sizeof(tmp_station_error));
  if (raw_station_error != 0) {
    total_size += 1 + 8;
  }

  // double station_error_limited = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error_limited = this->_internal_station_error_limited();
  uint64_t raw_station_error_limited;
  memcpy(&raw_station_error_limited, &tmp_station_error_limited, sizeof(tmp_station_error_limited));
  if (raw_station_error_limited != 0) {
    total_size += 1 + 8;
  }

  // double preview_station_error = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_station_error = this->_internal_preview_station_error();
  uint64_t raw_preview_station_error;
  memcpy(&raw_preview_station_error, &tmp_preview_station_error, sizeof(tmp_preview_station_error));
  if (raw_preview_station_error != 0) {
    total_size += 1 + 8;
  }

  // double speed_reference = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_reference = this->_internal_speed_reference();
  uint64_t raw_speed_reference;
  memcpy(&raw_speed_reference, &tmp_speed_reference, sizeof(tmp_speed_reference));
  if (raw_speed_reference != 0) {
    total_size += 1 + 8;
  }

  // double speed_error = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_error = this->_internal_speed_error();
  uint64_t raw_speed_error;
  memcpy(&raw_speed_error, &tmp_speed_error, sizeof(tmp_speed_error));
  if (raw_speed_error != 0) {
    total_size += 1 + 8;
  }

  // double speed_controller_input_limited = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_controller_input_limited = this->_internal_speed_controller_input_limited();
  uint64_t raw_speed_controller_input_limited;
  memcpy(&raw_speed_controller_input_limited, &tmp_speed_controller_input_limited, sizeof(tmp_speed_controller_input_limited));
  if (raw_speed_controller_input_limited != 0) {
    total_size += 1 + 8;
  }

  // double preview_speed_reference = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_speed_reference = this->_internal_preview_speed_reference();
  uint64_t raw_preview_speed_reference;
  memcpy(&raw_preview_speed_reference, &tmp_preview_speed_reference, sizeof(tmp_preview_speed_reference));
  if (raw_preview_speed_reference != 0) {
    total_size += 1 + 8;
  }

  // double preview_speed_error = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_speed_error = this->_internal_preview_speed_error();
  uint64_t raw_preview_speed_error;
  memcpy(&raw_preview_speed_error, &tmp_preview_speed_error, sizeof(tmp_preview_speed_error));
  if (raw_preview_speed_error != 0) {
    total_size += 1 + 8;
  }

  // double preview_acceleration_reference = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_acceleration_reference = this->_internal_preview_acceleration_reference();
  uint64_t raw_preview_acceleration_reference;
  memcpy(&raw_preview_acceleration_reference, &tmp_preview_acceleration_reference, sizeof(tmp_preview_acceleration_reference));
  if (raw_preview_acceleration_reference != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_cmd_closeloop = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd_closeloop = this->_internal_acceleration_cmd_closeloop();
  uint64_t raw_acceleration_cmd_closeloop;
  memcpy(&raw_acceleration_cmd_closeloop, &tmp_acceleration_cmd_closeloop, sizeof(tmp_acceleration_cmd_closeloop));
  if (raw_acceleration_cmd_closeloop != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_cmd = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd = this->_internal_acceleration_cmd();
  uint64_t raw_acceleration_cmd;
  memcpy(&raw_acceleration_cmd, &tmp_acceleration_cmd, sizeof(tmp_acceleration_cmd));
  if (raw_acceleration_cmd != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_lookup = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_lookup = this->_internal_acceleration_lookup();
  uint64_t raw_acceleration_lookup;
  memcpy(&raw_acceleration_lookup, &tmp_acceleration_lookup, sizeof(tmp_acceleration_lookup));
  if (raw_acceleration_lookup != 0) {
    total_size += 1 + 8;
  }

  // double speed_lookup = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_lookup = this->_internal_speed_lookup();
  uint64_t raw_speed_lookup;
  memcpy(&raw_speed_lookup, &tmp_speed_lookup, sizeof(tmp_speed_lookup));
  if (raw_speed_lookup != 0) {
    total_size += 1 + 8;
  }

  // double calibration_value = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_calibration_value = this->_internal_calibration_value();
  uint64_t raw_calibration_value;
  memcpy(&raw_calibration_value, &tmp_calibration_value, sizeof(tmp_calibration_value));
  if (raw_calibration_value != 0) {
    total_size += 1 + 8;
  }

  // double throttle_cmd = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_cmd = this->_internal_throttle_cmd();
  uint64_t raw_throttle_cmd;
  memcpy(&raw_throttle_cmd, &tmp_throttle_cmd, sizeof(tmp_throttle_cmd));
  if (raw_throttle_cmd != 0) {
    total_size += 2 + 8;
  }

  // double brake_cmd = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_cmd = this->_internal_brake_cmd();
  uint64_t raw_brake_cmd;
  memcpy(&raw_brake_cmd, &tmp_brake_cmd, sizeof(tmp_brake_cmd));
  if (raw_brake_cmd != 0) {
    total_size += 2 + 8;
  }

  // double slope_offset_compensation = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_slope_offset_compensation = this->_internal_slope_offset_compensation();
  uint64_t raw_slope_offset_compensation;
  memcpy(&raw_slope_offset_compensation, &tmp_slope_offset_compensation, sizeof(tmp_slope_offset_compensation));
  if (raw_slope_offset_compensation != 0) {
    total_size += 2 + 8;
  }

  // double current_station = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_station = this->_internal_current_station();
  uint64_t raw_current_station;
  memcpy(&raw_current_station, &tmp_current_station, sizeof(tmp_current_station));
  if (raw_current_station != 0) {
    total_size += 2 + 8;
  }

  // bool is_full_stop = 18;
  if (this->_internal_is_full_stop() != 0) {
    total_size += 2 + 1;
  }

  // int32 pid_saturation_status = 22;
  if (this->_internal_pid_saturation_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pid_saturation_status());
  }

  // double path_remain = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_path_remain = this->_internal_path_remain();
  uint64_t raw_path_remain;
  memcpy(&raw_path_remain, &tmp_path_remain, sizeof(tmp_path_remain));
  if (raw_path_remain != 0) {
    total_size += 2 + 8;
  }

  // double speed_offset = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_offset = this->_internal_speed_offset();
  uint64_t raw_speed_offset;
  memcpy(&raw_speed_offset, &tmp_speed_offset, sizeof(tmp_speed_offset));
  if (raw_speed_offset != 0) {
    total_size += 2 + 8;
  }

  // double current_speed = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_speed = this->_internal_current_speed();
  uint64_t raw_current_speed;
  memcpy(&raw_current_speed, &tmp_current_speed, sizeof(tmp_current_speed));
  if (raw_current_speed != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_reference = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_reference = this->_internal_acceleration_reference();
  uint64_t raw_acceleration_reference;
  memcpy(&raw_acceleration_reference, &tmp_acceleration_reference, sizeof(tmp_acceleration_reference));
  if (raw_acceleration_reference != 0) {
    total_size += 2 + 8;
  }

  // double current_acceleration = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_acceleration = this->_internal_current_acceleration();
  uint64_t raw_current_acceleration;
  memcpy(&raw_current_acceleration, &tmp_current_acceleration, sizeof(tmp_current_acceleration));
  if (raw_current_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_error = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_error = this->_internal_acceleration_error();
  uint64_t raw_acceleration_error;
  memcpy(&raw_acceleration_error, &tmp_acceleration_error, sizeof(tmp_acceleration_error));
  if (raw_acceleration_error != 0) {
    total_size += 2 + 8;
  }

  // double jerk_reference = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_reference = this->_internal_jerk_reference();
  uint64_t raw_jerk_reference;
  memcpy(&raw_jerk_reference, &tmp_jerk_reference, sizeof(tmp_jerk_reference));
  if (raw_jerk_reference != 0) {
    total_size += 2 + 8;
  }

  // double current_jerk = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_jerk = this->_internal_current_jerk();
  uint64_t raw_current_jerk;
  memcpy(&raw_current_jerk, &tmp_current_jerk, sizeof(tmp_current_jerk));
  if (raw_current_jerk != 0) {
    total_size += 2 + 8;
  }

  // double jerk_error = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_error = this->_internal_jerk_error();
  uint64_t raw_jerk_error;
  memcpy(&raw_jerk_error, &tmp_jerk_error, sizeof(tmp_jerk_error));
  if (raw_jerk_error != 0) {
    total_size += 2 + 8;
  }

  // int32 leadlag_saturation_status = 23;
  if (this->_internal_leadlag_saturation_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leadlag_saturation_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleLongitudinalDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleLongitudinalDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleLongitudinalDebug::GetClassData() const { return &_class_data_; }

void SimpleLongitudinalDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleLongitudinalDebug *>(to)->MergeFrom(
      static_cast<const SimpleLongitudinalDebug &>(from));
}


void SimpleLongitudinalDebug::MergeFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.SimpleLongitudinalDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current_matched_point()) {
    _internal_mutable_current_matched_point()->::autoagric::common::TrajectoryPoint::MergeFrom(from._internal_current_matched_point());
  }
  if (from._internal_has_current_reference_point()) {
    _internal_mutable_current_reference_point()->::autoagric::common::TrajectoryPoint::MergeFrom(from._internal_current_reference_point());
  }
  if (from._internal_has_preview_reference_point()) {
    _internal_mutable_preview_reference_point()->::autoagric::common::TrajectoryPoint::MergeFrom(from._internal_preview_reference_point());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_reference = from._internal_station_reference();
  uint64_t raw_station_reference;
  memcpy(&raw_station_reference, &tmp_station_reference, sizeof(tmp_station_reference));
  if (raw_station_reference != 0) {
    _internal_set_station_reference(from._internal_station_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error = from._internal_station_error();
  uint64_t raw_station_error;
  memcpy(&raw_station_error, &tmp_station_error, sizeof(tmp_station_error));
  if (raw_station_error != 0) {
    _internal_set_station_error(from._internal_station_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error_limited = from._internal_station_error_limited();
  uint64_t raw_station_error_limited;
  memcpy(&raw_station_error_limited, &tmp_station_error_limited, sizeof(tmp_station_error_limited));
  if (raw_station_error_limited != 0) {
    _internal_set_station_error_limited(from._internal_station_error_limited());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_station_error = from._internal_preview_station_error();
  uint64_t raw_preview_station_error;
  memcpy(&raw_preview_station_error, &tmp_preview_station_error, sizeof(tmp_preview_station_error));
  if (raw_preview_station_error != 0) {
    _internal_set_preview_station_error(from._internal_preview_station_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_reference = from._internal_speed_reference();
  uint64_t raw_speed_reference;
  memcpy(&raw_speed_reference, &tmp_speed_reference, sizeof(tmp_speed_reference));
  if (raw_speed_reference != 0) {
    _internal_set_speed_reference(from._internal_speed_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_error = from._internal_speed_error();
  uint64_t raw_speed_error;
  memcpy(&raw_speed_error, &tmp_speed_error, sizeof(tmp_speed_error));
  if (raw_speed_error != 0) {
    _internal_set_speed_error(from._internal_speed_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_controller_input_limited = from._internal_speed_controller_input_limited();
  uint64_t raw_speed_controller_input_limited;
  memcpy(&raw_speed_controller_input_limited, &tmp_speed_controller_input_limited, sizeof(tmp_speed_controller_input_limited));
  if (raw_speed_controller_input_limited != 0) {
    _internal_set_speed_controller_input_limited(from._internal_speed_controller_input_limited());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_speed_reference = from._internal_preview_speed_reference();
  uint64_t raw_preview_speed_reference;
  memcpy(&raw_preview_speed_reference, &tmp_preview_speed_reference, sizeof(tmp_preview_speed_reference));
  if (raw_preview_speed_reference != 0) {
    _internal_set_preview_speed_reference(from._internal_preview_speed_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_speed_error = from._internal_preview_speed_error();
  uint64_t raw_preview_speed_error;
  memcpy(&raw_preview_speed_error, &tmp_preview_speed_error, sizeof(tmp_preview_speed_error));
  if (raw_preview_speed_error != 0) {
    _internal_set_preview_speed_error(from._internal_preview_speed_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_preview_acceleration_reference = from._internal_preview_acceleration_reference();
  uint64_t raw_preview_acceleration_reference;
  memcpy(&raw_preview_acceleration_reference, &tmp_preview_acceleration_reference, sizeof(tmp_preview_acceleration_reference));
  if (raw_preview_acceleration_reference != 0) {
    _internal_set_preview_acceleration_reference(from._internal_preview_acceleration_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd_closeloop = from._internal_acceleration_cmd_closeloop();
  uint64_t raw_acceleration_cmd_closeloop;
  memcpy(&raw_acceleration_cmd_closeloop, &tmp_acceleration_cmd_closeloop, sizeof(tmp_acceleration_cmd_closeloop));
  if (raw_acceleration_cmd_closeloop != 0) {
    _internal_set_acceleration_cmd_closeloop(from._internal_acceleration_cmd_closeloop());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd = from._internal_acceleration_cmd();
  uint64_t raw_acceleration_cmd;
  memcpy(&raw_acceleration_cmd, &tmp_acceleration_cmd, sizeof(tmp_acceleration_cmd));
  if (raw_acceleration_cmd != 0) {
    _internal_set_acceleration_cmd(from._internal_acceleration_cmd());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_lookup = from._internal_acceleration_lookup();
  uint64_t raw_acceleration_lookup;
  memcpy(&raw_acceleration_lookup, &tmp_acceleration_lookup, sizeof(tmp_acceleration_lookup));
  if (raw_acceleration_lookup != 0) {
    _internal_set_acceleration_lookup(from._internal_acceleration_lookup());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_lookup = from._internal_speed_lookup();
  uint64_t raw_speed_lookup;
  memcpy(&raw_speed_lookup, &tmp_speed_lookup, sizeof(tmp_speed_lookup));
  if (raw_speed_lookup != 0) {
    _internal_set_speed_lookup(from._internal_speed_lookup());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_calibration_value = from._internal_calibration_value();
  uint64_t raw_calibration_value;
  memcpy(&raw_calibration_value, &tmp_calibration_value, sizeof(tmp_calibration_value));
  if (raw_calibration_value != 0) {
    _internal_set_calibration_value(from._internal_calibration_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_cmd = from._internal_throttle_cmd();
  uint64_t raw_throttle_cmd;
  memcpy(&raw_throttle_cmd, &tmp_throttle_cmd, sizeof(tmp_throttle_cmd));
  if (raw_throttle_cmd != 0) {
    _internal_set_throttle_cmd(from._internal_throttle_cmd());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_cmd = from._internal_brake_cmd();
  uint64_t raw_brake_cmd;
  memcpy(&raw_brake_cmd, &tmp_brake_cmd, sizeof(tmp_brake_cmd));
  if (raw_brake_cmd != 0) {
    _internal_set_brake_cmd(from._internal_brake_cmd());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_slope_offset_compensation = from._internal_slope_offset_compensation();
  uint64_t raw_slope_offset_compensation;
  memcpy(&raw_slope_offset_compensation, &tmp_slope_offset_compensation, sizeof(tmp_slope_offset_compensation));
  if (raw_slope_offset_compensation != 0) {
    _internal_set_slope_offset_compensation(from._internal_slope_offset_compensation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_station = from._internal_current_station();
  uint64_t raw_current_station;
  memcpy(&raw_current_station, &tmp_current_station, sizeof(tmp_current_station));
  if (raw_current_station != 0) {
    _internal_set_current_station(from._internal_current_station());
  }
  if (from._internal_is_full_stop() != 0) {
    _internal_set_is_full_stop(from._internal_is_full_stop());
  }
  if (from._internal_pid_saturation_status() != 0) {
    _internal_set_pid_saturation_status(from._internal_pid_saturation_status());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_path_remain = from._internal_path_remain();
  uint64_t raw_path_remain;
  memcpy(&raw_path_remain, &tmp_path_remain, sizeof(tmp_path_remain));
  if (raw_path_remain != 0) {
    _internal_set_path_remain(from._internal_path_remain());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_offset = from._internal_speed_offset();
  uint64_t raw_speed_offset;
  memcpy(&raw_speed_offset, &tmp_speed_offset, sizeof(tmp_speed_offset));
  if (raw_speed_offset != 0) {
    _internal_set_speed_offset(from._internal_speed_offset());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_speed = from._internal_current_speed();
  uint64_t raw_current_speed;
  memcpy(&raw_current_speed, &tmp_current_speed, sizeof(tmp_current_speed));
  if (raw_current_speed != 0) {
    _internal_set_current_speed(from._internal_current_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_reference = from._internal_acceleration_reference();
  uint64_t raw_acceleration_reference;
  memcpy(&raw_acceleration_reference, &tmp_acceleration_reference, sizeof(tmp_acceleration_reference));
  if (raw_acceleration_reference != 0) {
    _internal_set_acceleration_reference(from._internal_acceleration_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_acceleration = from._internal_current_acceleration();
  uint64_t raw_current_acceleration;
  memcpy(&raw_current_acceleration, &tmp_current_acceleration, sizeof(tmp_current_acceleration));
  if (raw_current_acceleration != 0) {
    _internal_set_current_acceleration(from._internal_current_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_error = from._internal_acceleration_error();
  uint64_t raw_acceleration_error;
  memcpy(&raw_acceleration_error, &tmp_acceleration_error, sizeof(tmp_acceleration_error));
  if (raw_acceleration_error != 0) {
    _internal_set_acceleration_error(from._internal_acceleration_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_reference = from._internal_jerk_reference();
  uint64_t raw_jerk_reference;
  memcpy(&raw_jerk_reference, &tmp_jerk_reference, sizeof(tmp_jerk_reference));
  if (raw_jerk_reference != 0) {
    _internal_set_jerk_reference(from._internal_jerk_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_current_jerk = from._internal_current_jerk();
  uint64_t raw_current_jerk;
  memcpy(&raw_current_jerk, &tmp_current_jerk, sizeof(tmp_current_jerk));
  if (raw_current_jerk != 0) {
    _internal_set_current_jerk(from._internal_current_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_error = from._internal_jerk_error();
  uint64_t raw_jerk_error;
  memcpy(&raw_jerk_error, &tmp_jerk_error, sizeof(tmp_jerk_error));
  if (raw_jerk_error != 0) {
    _internal_set_jerk_error(from._internal_jerk_error());
  }
  if (from._internal_leadlag_saturation_status() != 0) {
    _internal_set_leadlag_saturation_status(from._internal_leadlag_saturation_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleLongitudinalDebug::CopyFrom(const SimpleLongitudinalDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.SimpleLongitudinalDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLongitudinalDebug::IsInitialized() const {
  return true;
}

void SimpleLongitudinalDebug::InternalSwap(SimpleLongitudinalDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLongitudinalDebug, leadlag_saturation_status_)
      + sizeof(SimpleLongitudinalDebug::leadlag_saturation_status_)
      - PROTOBUF_FIELD_OFFSET(SimpleLongitudinalDebug, current_matched_point_)>(
          reinterpret_cast<char*>(&current_matched_point_),
          reinterpret_cast<char*>(&other->current_matched_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLongitudinalDebug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[2]);
}

// ===================================================================

class SimpleLateralDebug::_Internal {
 public:
  static const ::autoagric::common::TrajectoryPoint& current_target_point(const SimpleLateralDebug* msg);
  static const ::autoagric::control::MracDebug& steer_mrac_debug(const SimpleLateralDebug* msg);
};

const ::autoagric::common::TrajectoryPoint&
SimpleLateralDebug::_Internal::current_target_point(const SimpleLateralDebug* msg) {
  return *msg->current_target_point_;
}
const ::autoagric::control::MracDebug&
SimpleLateralDebug::_Internal::steer_mrac_debug(const SimpleLateralDebug* msg) {
  return *msg->steer_mrac_debug_;
}
void SimpleLateralDebug::clear_current_target_point() {
  if (GetArenaForAllocation() == nullptr && current_target_point_ != nullptr) {
    delete current_target_point_;
  }
  current_target_point_ = nullptr;
}
SimpleLateralDebug::SimpleLateralDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.SimpleLateralDebug)
}
SimpleLateralDebug::SimpleLateralDebug(const SimpleLateralDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_current_target_point()) {
    current_target_point_ = new ::autoagric::common::TrajectoryPoint(*from.current_target_point_);
  } else {
    current_target_point_ = nullptr;
  }
  if (from._internal_has_steer_mrac_debug()) {
    steer_mrac_debug_ = new ::autoagric::control::MracDebug(*from.steer_mrac_debug_);
  } else {
    steer_mrac_debug_ = nullptr;
  }
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_mrac_enable_status_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(steer_mrac_enable_status_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.SimpleLateralDebug)
}

inline void SimpleLateralDebug::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_target_point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steer_mrac_enable_status_) -
    reinterpret_cast<char*>(&current_target_point_)) + sizeof(steer_mrac_enable_status_));
}

SimpleLateralDebug::~SimpleLateralDebug() {
  // @@protoc_insertion_point(destructor:autoagric.control.SimpleLateralDebug)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimpleLateralDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete current_target_point_;
  if (this != internal_default_instance()) delete steer_mrac_debug_;
}

void SimpleLateralDebug::ArenaDtor(void* object) {
  SimpleLateralDebug* _this = reinterpret_cast< SimpleLateralDebug* >(object);
  (void)_this;
}
void SimpleLateralDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleLateralDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleLateralDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.SimpleLateralDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && current_target_point_ != nullptr) {
    delete current_target_point_;
  }
  current_target_point_ = nullptr;
  if (GetArenaForAllocation() == nullptr && steer_mrac_debug_ != nullptr) {
    delete steer_mrac_debug_;
  }
  steer_mrac_debug_ = nullptr;
  ::memset(&lateral_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_mrac_enable_status_) -
      reinterpret_cast<char*>(&lateral_error_)) + sizeof(steer_mrac_enable_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleLateralDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_acceleration = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_jerk = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading_rate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_rate = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading_acceleration = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_acceleration = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error_acceleration = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading_jerk = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_jerk = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error_jerk = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_error_feedback = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          lateral_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error_feedback = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          heading_error_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.TrajectoryPoint current_target_point = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_target_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_feedback_augment = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          steer_angle_feedback_augment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.MracDebug steer_mrac_debug = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_mrac_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool steer_mrac_enable_status = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          steer_mrac_enable_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleLateralDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.SimpleLateralDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lateral_error = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error = this->_internal_lateral_error();
  uint64_t raw_lateral_error;
  memcpy(&raw_lateral_error, &tmp_lateral_error, sizeof(tmp_lateral_error));
  if (raw_lateral_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // double ref_heading = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading = this->_internal_ref_heading();
  uint64_t raw_ref_heading;
  memcpy(&raw_ref_heading, &tmp_ref_heading, sizeof(tmp_ref_heading));
  if (raw_ref_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // double heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // double heading_error = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error = this->_internal_heading_error();
  uint64_t raw_heading_error;
  memcpy(&raw_heading_error, &tmp_heading_error, sizeof(tmp_heading_error));
  if (raw_heading_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // double heading_error_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_rate = this->_internal_heading_error_rate();
  uint64_t raw_heading_error_rate;
  memcpy(&raw_heading_error_rate, &tmp_heading_error_rate, sizeof(tmp_heading_error_rate));
  if (raw_heading_error_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // double lateral_error_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_rate = this->_internal_lateral_error_rate();
  uint64_t raw_lateral_error_rate;
  memcpy(&raw_lateral_error_rate, &tmp_lateral_error_rate, sizeof(tmp_lateral_error_rate));
  if (raw_lateral_error_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // double curvature = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // double steer_angle = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle = this->_internal_steer_angle();
  uint64_t raw_steer_angle;
  memcpy(&raw_steer_angle, &tmp_steer_angle, sizeof(tmp_steer_angle));
  if (raw_steer_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // double steer_angle_feedforward = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward = this->_internal_steer_angle_feedforward();
  uint64_t raw_steer_angle_feedforward;
  memcpy(&raw_steer_angle_feedforward, &tmp_steer_angle_feedforward, sizeof(tmp_steer_angle_feedforward));
  if (raw_steer_angle_feedforward != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // double steer_angle_lateral_contribution = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_contribution = this->_internal_steer_angle_lateral_contribution();
  uint64_t raw_steer_angle_lateral_contribution;
  memcpy(&raw_steer_angle_lateral_contribution, &tmp_steer_angle_lateral_contribution, sizeof(tmp_steer_angle_lateral_contribution));
  if (raw_steer_angle_lateral_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // double steer_angle_lateral_rate_contribution = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_rate_contribution = this->_internal_steer_angle_lateral_rate_contribution();
  uint64_t raw_steer_angle_lateral_rate_contribution;
  memcpy(&raw_steer_angle_lateral_rate_contribution, &tmp_steer_angle_lateral_rate_contribution, sizeof(tmp_steer_angle_lateral_rate_contribution));
  if (raw_steer_angle_lateral_rate_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // double steer_angle_heading_contribution = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_contribution = this->_internal_steer_angle_heading_contribution();
  uint64_t raw_steer_angle_heading_contribution;
  memcpy(&raw_steer_angle_heading_contribution, &tmp_steer_angle_heading_contribution, sizeof(tmp_steer_angle_heading_contribution));
  if (raw_steer_angle_heading_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // double steer_angle_heading_rate_contribution = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_rate_contribution = this->_internal_steer_angle_heading_rate_contribution();
  uint64_t raw_steer_angle_heading_rate_contribution;
  memcpy(&raw_steer_angle_heading_rate_contribution, &tmp_steer_angle_heading_rate_contribution, sizeof(tmp_steer_angle_heading_rate_contribution));
  if (raw_steer_angle_heading_rate_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // double steer_angle_feedback = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback = this->_internal_steer_angle_feedback();
  uint64_t raw_steer_angle_feedback;
  memcpy(&raw_steer_angle_feedback, &tmp_steer_angle_feedback, sizeof(tmp_steer_angle_feedback));
  if (raw_steer_angle_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // double steering_position = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_position = this->_internal_steering_position();
  uint64_t raw_steering_position;
  memcpy(&raw_steering_position, &tmp_steering_position, sizeof(tmp_steering_position));
  if (raw_steering_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // double ref_speed = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_speed = this->_internal_ref_speed();
  uint64_t raw_ref_speed;
  memcpy(&raw_ref_speed, &tmp_ref_speed, sizeof(tmp_ref_speed));
  if (raw_ref_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // double steer_angle_limited = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_limited = this->_internal_steer_angle_limited();
  uint64_t raw_steer_angle_limited;
  memcpy(&raw_steer_angle_limited, &tmp_steer_angle_limited, sizeof(tmp_steer_angle_limited));
  if (raw_steer_angle_limited != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // double lateral_acceleration = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_acceleration = this->_internal_lateral_acceleration();
  uint64_t raw_lateral_acceleration;
  memcpy(&raw_lateral_acceleration, &tmp_lateral_acceleration, sizeof(tmp_lateral_acceleration));
  if (raw_lateral_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_lateral_acceleration(), target);
  }

  // double lateral_jerk = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_jerk = this->_internal_lateral_jerk();
  uint64_t raw_lateral_jerk;
  memcpy(&raw_lateral_jerk, &tmp_lateral_jerk, sizeof(tmp_lateral_jerk));
  if (raw_lateral_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_lateral_jerk(), target);
  }

  // double ref_heading_rate = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_rate = this->_internal_ref_heading_rate();
  uint64_t raw_ref_heading_rate;
  memcpy(&raw_ref_heading_rate, &tmp_ref_heading_rate, sizeof(tmp_ref_heading_rate));
  if (raw_ref_heading_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_ref_heading_rate(), target);
  }

  // double heading_rate = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_rate = this->_internal_heading_rate();
  uint64_t raw_heading_rate;
  memcpy(&raw_heading_rate, &tmp_heading_rate, sizeof(tmp_heading_rate));
  if (raw_heading_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_heading_rate(), target);
  }

  // double ref_heading_acceleration = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_acceleration = this->_internal_ref_heading_acceleration();
  uint64_t raw_ref_heading_acceleration;
  memcpy(&raw_ref_heading_acceleration, &tmp_ref_heading_acceleration, sizeof(tmp_ref_heading_acceleration));
  if (raw_ref_heading_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_ref_heading_acceleration(), target);
  }

  // double heading_acceleration = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_acceleration = this->_internal_heading_acceleration();
  uint64_t raw_heading_acceleration;
  memcpy(&raw_heading_acceleration, &tmp_heading_acceleration, sizeof(tmp_heading_acceleration));
  if (raw_heading_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_heading_acceleration(), target);
  }

  // double heading_error_acceleration = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_acceleration = this->_internal_heading_error_acceleration();
  uint64_t raw_heading_error_acceleration;
  memcpy(&raw_heading_error_acceleration, &tmp_heading_error_acceleration, sizeof(tmp_heading_error_acceleration));
  if (raw_heading_error_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_heading_error_acceleration(), target);
  }

  // double ref_heading_jerk = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_jerk = this->_internal_ref_heading_jerk();
  uint64_t raw_ref_heading_jerk;
  memcpy(&raw_ref_heading_jerk, &tmp_ref_heading_jerk, sizeof(tmp_ref_heading_jerk));
  if (raw_ref_heading_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_ref_heading_jerk(), target);
  }

  // double heading_jerk = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_jerk = this->_internal_heading_jerk();
  uint64_t raw_heading_jerk;
  memcpy(&raw_heading_jerk, &tmp_heading_jerk, sizeof(tmp_heading_jerk));
  if (raw_heading_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_heading_jerk(), target);
  }

  // double heading_error_jerk = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_jerk = this->_internal_heading_error_jerk();
  uint64_t raw_heading_error_jerk;
  memcpy(&raw_heading_error_jerk, &tmp_heading_error_jerk, sizeof(tmp_heading_error_jerk));
  if (raw_heading_error_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_heading_error_jerk(), target);
  }

  // double lateral_error_feedback = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_feedback = this->_internal_lateral_error_feedback();
  uint64_t raw_lateral_error_feedback;
  memcpy(&raw_lateral_error_feedback, &tmp_lateral_error_feedback, sizeof(tmp_lateral_error_feedback));
  if (raw_lateral_error_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_lateral_error_feedback(), target);
  }

  // double heading_error_feedback = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_feedback = this->_internal_heading_error_feedback();
  uint64_t raw_heading_error_feedback;
  memcpy(&raw_heading_error_feedback, &tmp_heading_error_feedback, sizeof(tmp_heading_error_feedback));
  if (raw_heading_error_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_heading_error_feedback(), target);
  }

  // .autoagric.common.TrajectoryPoint current_target_point = 30;
  if (this->_internal_has_current_target_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::current_target_point(this), target, stream);
  }

  // double steer_angle_feedback_augment = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback_augment = this->_internal_steer_angle_feedback_augment();
  uint64_t raw_steer_angle_feedback_augment;
  memcpy(&raw_steer_angle_feedback_augment, &tmp_steer_angle_feedback_augment, sizeof(tmp_steer_angle_feedback_augment));
  if (raw_steer_angle_feedback_augment != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_angle_feedback_augment(), target);
  }

  // .autoagric.control.MracDebug steer_mrac_debug = 32;
  if (this->_internal_has_steer_mrac_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::steer_mrac_debug(this), target, stream);
  }

  // bool steer_mrac_enable_status = 33;
  if (this->_internal_steer_mrac_enable_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(33, this->_internal_steer_mrac_enable_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.SimpleLateralDebug)
  return target;
}

size_t SimpleLateralDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.SimpleLateralDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.TrajectoryPoint current_target_point = 30;
  if (this->_internal_has_current_target_point()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_target_point_);
  }

  // .autoagric.control.MracDebug steer_mrac_debug = 32;
  if (this->_internal_has_steer_mrac_debug()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steer_mrac_debug_);
  }

  // double lateral_error = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error = this->_internal_lateral_error();
  uint64_t raw_lateral_error;
  memcpy(&raw_lateral_error, &tmp_lateral_error, sizeof(tmp_lateral_error));
  if (raw_lateral_error != 0) {
    total_size += 1 + 8;
  }

  // double ref_heading = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading = this->_internal_ref_heading();
  uint64_t raw_ref_heading;
  memcpy(&raw_ref_heading, &tmp_ref_heading, sizeof(tmp_ref_heading));
  if (raw_ref_heading != 0) {
    total_size += 1 + 8;
  }

  // double heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    total_size += 1 + 8;
  }

  // double heading_error = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error = this->_internal_heading_error();
  uint64_t raw_heading_error;
  memcpy(&raw_heading_error, &tmp_heading_error, sizeof(tmp_heading_error));
  if (raw_heading_error != 0) {
    total_size += 1 + 8;
  }

  // double heading_error_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_rate = this->_internal_heading_error_rate();
  uint64_t raw_heading_error_rate;
  memcpy(&raw_heading_error_rate, &tmp_heading_error_rate, sizeof(tmp_heading_error_rate));
  if (raw_heading_error_rate != 0) {
    total_size += 1 + 8;
  }

  // double lateral_error_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_rate = this->_internal_lateral_error_rate();
  uint64_t raw_lateral_error_rate;
  memcpy(&raw_lateral_error_rate, &tmp_lateral_error_rate, sizeof(tmp_lateral_error_rate));
  if (raw_lateral_error_rate != 0) {
    total_size += 1 + 8;
  }

  // double curvature = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle = this->_internal_steer_angle();
  uint64_t raw_steer_angle;
  memcpy(&raw_steer_angle, &tmp_steer_angle, sizeof(tmp_steer_angle));
  if (raw_steer_angle != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedforward = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward = this->_internal_steer_angle_feedforward();
  uint64_t raw_steer_angle_feedforward;
  memcpy(&raw_steer_angle_feedforward, &tmp_steer_angle_feedforward, sizeof(tmp_steer_angle_feedforward));
  if (raw_steer_angle_feedforward != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_contribution = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_contribution = this->_internal_steer_angle_lateral_contribution();
  uint64_t raw_steer_angle_lateral_contribution;
  memcpy(&raw_steer_angle_lateral_contribution, &tmp_steer_angle_lateral_contribution, sizeof(tmp_steer_angle_lateral_contribution));
  if (raw_steer_angle_lateral_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_rate_contribution = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_rate_contribution = this->_internal_steer_angle_lateral_rate_contribution();
  uint64_t raw_steer_angle_lateral_rate_contribution;
  memcpy(&raw_steer_angle_lateral_rate_contribution, &tmp_steer_angle_lateral_rate_contribution, sizeof(tmp_steer_angle_lateral_rate_contribution));
  if (raw_steer_angle_lateral_rate_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_contribution = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_contribution = this->_internal_steer_angle_heading_contribution();
  uint64_t raw_steer_angle_heading_contribution;
  memcpy(&raw_steer_angle_heading_contribution, &tmp_steer_angle_heading_contribution, sizeof(tmp_steer_angle_heading_contribution));
  if (raw_steer_angle_heading_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_rate_contribution = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_rate_contribution = this->_internal_steer_angle_heading_rate_contribution();
  uint64_t raw_steer_angle_heading_rate_contribution;
  memcpy(&raw_steer_angle_heading_rate_contribution, &tmp_steer_angle_heading_rate_contribution, sizeof(tmp_steer_angle_heading_rate_contribution));
  if (raw_steer_angle_heading_rate_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedback = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback = this->_internal_steer_angle_feedback();
  uint64_t raw_steer_angle_feedback;
  memcpy(&raw_steer_angle_feedback, &tmp_steer_angle_feedback, sizeof(tmp_steer_angle_feedback));
  if (raw_steer_angle_feedback != 0) {
    total_size += 1 + 8;
  }

  // double steering_position = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_position = this->_internal_steering_position();
  uint64_t raw_steering_position;
  memcpy(&raw_steering_position, &tmp_steering_position, sizeof(tmp_steering_position));
  if (raw_steering_position != 0) {
    total_size += 1 + 8;
  }

  // double ref_speed = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_speed = this->_internal_ref_speed();
  uint64_t raw_ref_speed;
  memcpy(&raw_ref_speed, &tmp_ref_speed, sizeof(tmp_ref_speed));
  if (raw_ref_speed != 0) {
    total_size += 2 + 8;
  }

  // double steer_angle_limited = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_limited = this->_internal_steer_angle_limited();
  uint64_t raw_steer_angle_limited;
  memcpy(&raw_steer_angle_limited, &tmp_steer_angle_limited, sizeof(tmp_steer_angle_limited));
  if (raw_steer_angle_limited != 0) {
    total_size += 2 + 8;
  }

  // double lateral_acceleration = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_acceleration = this->_internal_lateral_acceleration();
  uint64_t raw_lateral_acceleration;
  memcpy(&raw_lateral_acceleration, &tmp_lateral_acceleration, sizeof(tmp_lateral_acceleration));
  if (raw_lateral_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double lateral_jerk = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_jerk = this->_internal_lateral_jerk();
  uint64_t raw_lateral_jerk;
  memcpy(&raw_lateral_jerk, &tmp_lateral_jerk, sizeof(tmp_lateral_jerk));
  if (raw_lateral_jerk != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_rate = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_rate = this->_internal_ref_heading_rate();
  uint64_t raw_ref_heading_rate;
  memcpy(&raw_ref_heading_rate, &tmp_ref_heading_rate, sizeof(tmp_ref_heading_rate));
  if (raw_ref_heading_rate != 0) {
    total_size += 2 + 8;
  }

  // double heading_rate = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_rate = this->_internal_heading_rate();
  uint64_t raw_heading_rate;
  memcpy(&raw_heading_rate, &tmp_heading_rate, sizeof(tmp_heading_rate));
  if (raw_heading_rate != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_acceleration = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_acceleration = this->_internal_ref_heading_acceleration();
  uint64_t raw_ref_heading_acceleration;
  memcpy(&raw_ref_heading_acceleration, &tmp_ref_heading_acceleration, sizeof(tmp_ref_heading_acceleration));
  if (raw_ref_heading_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double heading_acceleration = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_acceleration = this->_internal_heading_acceleration();
  uint64_t raw_heading_acceleration;
  memcpy(&raw_heading_acceleration, &tmp_heading_acceleration, sizeof(tmp_heading_acceleration));
  if (raw_heading_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double heading_error_acceleration = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_acceleration = this->_internal_heading_error_acceleration();
  uint64_t raw_heading_error_acceleration;
  memcpy(&raw_heading_error_acceleration, &tmp_heading_error_acceleration, sizeof(tmp_heading_error_acceleration));
  if (raw_heading_error_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_jerk = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_jerk = this->_internal_ref_heading_jerk();
  uint64_t raw_ref_heading_jerk;
  memcpy(&raw_ref_heading_jerk, &tmp_ref_heading_jerk, sizeof(tmp_ref_heading_jerk));
  if (raw_ref_heading_jerk != 0) {
    total_size += 2 + 8;
  }

  // double heading_jerk = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_jerk = this->_internal_heading_jerk();
  uint64_t raw_heading_jerk;
  memcpy(&raw_heading_jerk, &tmp_heading_jerk, sizeof(tmp_heading_jerk));
  if (raw_heading_jerk != 0) {
    total_size += 2 + 8;
  }

  // double heading_error_jerk = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_jerk = this->_internal_heading_error_jerk();
  uint64_t raw_heading_error_jerk;
  memcpy(&raw_heading_error_jerk, &tmp_heading_error_jerk, sizeof(tmp_heading_error_jerk));
  if (raw_heading_error_jerk != 0) {
    total_size += 2 + 8;
  }

  // double lateral_error_feedback = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_feedback = this->_internal_lateral_error_feedback();
  uint64_t raw_lateral_error_feedback;
  memcpy(&raw_lateral_error_feedback, &tmp_lateral_error_feedback, sizeof(tmp_lateral_error_feedback));
  if (raw_lateral_error_feedback != 0) {
    total_size += 2 + 8;
  }

  // double heading_error_feedback = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_feedback = this->_internal_heading_error_feedback();
  uint64_t raw_heading_error_feedback;
  memcpy(&raw_heading_error_feedback, &tmp_heading_error_feedback, sizeof(tmp_heading_error_feedback));
  if (raw_heading_error_feedback != 0) {
    total_size += 2 + 8;
  }

  // double steer_angle_feedback_augment = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback_augment = this->_internal_steer_angle_feedback_augment();
  uint64_t raw_steer_angle_feedback_augment;
  memcpy(&raw_steer_angle_feedback_augment, &tmp_steer_angle_feedback_augment, sizeof(tmp_steer_angle_feedback_augment));
  if (raw_steer_angle_feedback_augment != 0) {
    total_size += 2 + 8;
  }

  // bool steer_mrac_enable_status = 33;
  if (this->_internal_steer_mrac_enable_status() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleLateralDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleLateralDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleLateralDebug::GetClassData() const { return &_class_data_; }

void SimpleLateralDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleLateralDebug *>(to)->MergeFrom(
      static_cast<const SimpleLateralDebug &>(from));
}


void SimpleLateralDebug::MergeFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.SimpleLateralDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current_target_point()) {
    _internal_mutable_current_target_point()->::autoagric::common::TrajectoryPoint::MergeFrom(from._internal_current_target_point());
  }
  if (from._internal_has_steer_mrac_debug()) {
    _internal_mutable_steer_mrac_debug()->::autoagric::control::MracDebug::MergeFrom(from._internal_steer_mrac_debug());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error = from._internal_lateral_error();
  uint64_t raw_lateral_error;
  memcpy(&raw_lateral_error, &tmp_lateral_error, sizeof(tmp_lateral_error));
  if (raw_lateral_error != 0) {
    _internal_set_lateral_error(from._internal_lateral_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading = from._internal_ref_heading();
  uint64_t raw_ref_heading;
  memcpy(&raw_ref_heading, &tmp_ref_heading, sizeof(tmp_ref_heading));
  if (raw_ref_heading != 0) {
    _internal_set_ref_heading(from._internal_ref_heading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = from._internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    _internal_set_heading(from._internal_heading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error = from._internal_heading_error();
  uint64_t raw_heading_error;
  memcpy(&raw_heading_error, &tmp_heading_error, sizeof(tmp_heading_error));
  if (raw_heading_error != 0) {
    _internal_set_heading_error(from._internal_heading_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_rate = from._internal_heading_error_rate();
  uint64_t raw_heading_error_rate;
  memcpy(&raw_heading_error_rate, &tmp_heading_error_rate, sizeof(tmp_heading_error_rate));
  if (raw_heading_error_rate != 0) {
    _internal_set_heading_error_rate(from._internal_heading_error_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_rate = from._internal_lateral_error_rate();
  uint64_t raw_lateral_error_rate;
  memcpy(&raw_lateral_error_rate, &tmp_lateral_error_rate, sizeof(tmp_lateral_error_rate));
  if (raw_lateral_error_rate != 0) {
    _internal_set_lateral_error_rate(from._internal_lateral_error_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = from._internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    _internal_set_curvature(from._internal_curvature());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle = from._internal_steer_angle();
  uint64_t raw_steer_angle;
  memcpy(&raw_steer_angle, &tmp_steer_angle, sizeof(tmp_steer_angle));
  if (raw_steer_angle != 0) {
    _internal_set_steer_angle(from._internal_steer_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward = from._internal_steer_angle_feedforward();
  uint64_t raw_steer_angle_feedforward;
  memcpy(&raw_steer_angle_feedforward, &tmp_steer_angle_feedforward, sizeof(tmp_steer_angle_feedforward));
  if (raw_steer_angle_feedforward != 0) {
    _internal_set_steer_angle_feedforward(from._internal_steer_angle_feedforward());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_contribution = from._internal_steer_angle_lateral_contribution();
  uint64_t raw_steer_angle_lateral_contribution;
  memcpy(&raw_steer_angle_lateral_contribution, &tmp_steer_angle_lateral_contribution, sizeof(tmp_steer_angle_lateral_contribution));
  if (raw_steer_angle_lateral_contribution != 0) {
    _internal_set_steer_angle_lateral_contribution(from._internal_steer_angle_lateral_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_rate_contribution = from._internal_steer_angle_lateral_rate_contribution();
  uint64_t raw_steer_angle_lateral_rate_contribution;
  memcpy(&raw_steer_angle_lateral_rate_contribution, &tmp_steer_angle_lateral_rate_contribution, sizeof(tmp_steer_angle_lateral_rate_contribution));
  if (raw_steer_angle_lateral_rate_contribution != 0) {
    _internal_set_steer_angle_lateral_rate_contribution(from._internal_steer_angle_lateral_rate_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_contribution = from._internal_steer_angle_heading_contribution();
  uint64_t raw_steer_angle_heading_contribution;
  memcpy(&raw_steer_angle_heading_contribution, &tmp_steer_angle_heading_contribution, sizeof(tmp_steer_angle_heading_contribution));
  if (raw_steer_angle_heading_contribution != 0) {
    _internal_set_steer_angle_heading_contribution(from._internal_steer_angle_heading_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_rate_contribution = from._internal_steer_angle_heading_rate_contribution();
  uint64_t raw_steer_angle_heading_rate_contribution;
  memcpy(&raw_steer_angle_heading_rate_contribution, &tmp_steer_angle_heading_rate_contribution, sizeof(tmp_steer_angle_heading_rate_contribution));
  if (raw_steer_angle_heading_rate_contribution != 0) {
    _internal_set_steer_angle_heading_rate_contribution(from._internal_steer_angle_heading_rate_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback = from._internal_steer_angle_feedback();
  uint64_t raw_steer_angle_feedback;
  memcpy(&raw_steer_angle_feedback, &tmp_steer_angle_feedback, sizeof(tmp_steer_angle_feedback));
  if (raw_steer_angle_feedback != 0) {
    _internal_set_steer_angle_feedback(from._internal_steer_angle_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_position = from._internal_steering_position();
  uint64_t raw_steering_position;
  memcpy(&raw_steering_position, &tmp_steering_position, sizeof(tmp_steering_position));
  if (raw_steering_position != 0) {
    _internal_set_steering_position(from._internal_steering_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_speed = from._internal_ref_speed();
  uint64_t raw_ref_speed;
  memcpy(&raw_ref_speed, &tmp_ref_speed, sizeof(tmp_ref_speed));
  if (raw_ref_speed != 0) {
    _internal_set_ref_speed(from._internal_ref_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_limited = from._internal_steer_angle_limited();
  uint64_t raw_steer_angle_limited;
  memcpy(&raw_steer_angle_limited, &tmp_steer_angle_limited, sizeof(tmp_steer_angle_limited));
  if (raw_steer_angle_limited != 0) {
    _internal_set_steer_angle_limited(from._internal_steer_angle_limited());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_acceleration = from._internal_lateral_acceleration();
  uint64_t raw_lateral_acceleration;
  memcpy(&raw_lateral_acceleration, &tmp_lateral_acceleration, sizeof(tmp_lateral_acceleration));
  if (raw_lateral_acceleration != 0) {
    _internal_set_lateral_acceleration(from._internal_lateral_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_jerk = from._internal_lateral_jerk();
  uint64_t raw_lateral_jerk;
  memcpy(&raw_lateral_jerk, &tmp_lateral_jerk, sizeof(tmp_lateral_jerk));
  if (raw_lateral_jerk != 0) {
    _internal_set_lateral_jerk(from._internal_lateral_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_rate = from._internal_ref_heading_rate();
  uint64_t raw_ref_heading_rate;
  memcpy(&raw_ref_heading_rate, &tmp_ref_heading_rate, sizeof(tmp_ref_heading_rate));
  if (raw_ref_heading_rate != 0) {
    _internal_set_ref_heading_rate(from._internal_ref_heading_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_rate = from._internal_heading_rate();
  uint64_t raw_heading_rate;
  memcpy(&raw_heading_rate, &tmp_heading_rate, sizeof(tmp_heading_rate));
  if (raw_heading_rate != 0) {
    _internal_set_heading_rate(from._internal_heading_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_acceleration = from._internal_ref_heading_acceleration();
  uint64_t raw_ref_heading_acceleration;
  memcpy(&raw_ref_heading_acceleration, &tmp_ref_heading_acceleration, sizeof(tmp_ref_heading_acceleration));
  if (raw_ref_heading_acceleration != 0) {
    _internal_set_ref_heading_acceleration(from._internal_ref_heading_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_acceleration = from._internal_heading_acceleration();
  uint64_t raw_heading_acceleration;
  memcpy(&raw_heading_acceleration, &tmp_heading_acceleration, sizeof(tmp_heading_acceleration));
  if (raw_heading_acceleration != 0) {
    _internal_set_heading_acceleration(from._internal_heading_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_acceleration = from._internal_heading_error_acceleration();
  uint64_t raw_heading_error_acceleration;
  memcpy(&raw_heading_error_acceleration, &tmp_heading_error_acceleration, sizeof(tmp_heading_error_acceleration));
  if (raw_heading_error_acceleration != 0) {
    _internal_set_heading_error_acceleration(from._internal_heading_error_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_jerk = from._internal_ref_heading_jerk();
  uint64_t raw_ref_heading_jerk;
  memcpy(&raw_ref_heading_jerk, &tmp_ref_heading_jerk, sizeof(tmp_ref_heading_jerk));
  if (raw_ref_heading_jerk != 0) {
    _internal_set_ref_heading_jerk(from._internal_ref_heading_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_jerk = from._internal_heading_jerk();
  uint64_t raw_heading_jerk;
  memcpy(&raw_heading_jerk, &tmp_heading_jerk, sizeof(tmp_heading_jerk));
  if (raw_heading_jerk != 0) {
    _internal_set_heading_jerk(from._internal_heading_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_jerk = from._internal_heading_error_jerk();
  uint64_t raw_heading_error_jerk;
  memcpy(&raw_heading_error_jerk, &tmp_heading_error_jerk, sizeof(tmp_heading_error_jerk));
  if (raw_heading_error_jerk != 0) {
    _internal_set_heading_error_jerk(from._internal_heading_error_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_feedback = from._internal_lateral_error_feedback();
  uint64_t raw_lateral_error_feedback;
  memcpy(&raw_lateral_error_feedback, &tmp_lateral_error_feedback, sizeof(tmp_lateral_error_feedback));
  if (raw_lateral_error_feedback != 0) {
    _internal_set_lateral_error_feedback(from._internal_lateral_error_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_feedback = from._internal_heading_error_feedback();
  uint64_t raw_heading_error_feedback;
  memcpy(&raw_heading_error_feedback, &tmp_heading_error_feedback, sizeof(tmp_heading_error_feedback));
  if (raw_heading_error_feedback != 0) {
    _internal_set_heading_error_feedback(from._internal_heading_error_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback_augment = from._internal_steer_angle_feedback_augment();
  uint64_t raw_steer_angle_feedback_augment;
  memcpy(&raw_steer_angle_feedback_augment, &tmp_steer_angle_feedback_augment, sizeof(tmp_steer_angle_feedback_augment));
  if (raw_steer_angle_feedback_augment != 0) {
    _internal_set_steer_angle_feedback_augment(from._internal_steer_angle_feedback_augment());
  }
  if (from._internal_steer_mrac_enable_status() != 0) {
    _internal_set_steer_mrac_enable_status(from._internal_steer_mrac_enable_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleLateralDebug::CopyFrom(const SimpleLateralDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.SimpleLateralDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleLateralDebug::IsInitialized() const {
  return true;
}

void SimpleLateralDebug::InternalSwap(SimpleLateralDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleLateralDebug, steer_mrac_enable_status_)
      + sizeof(SimpleLateralDebug::steer_mrac_enable_status_)
      - PROTOBUF_FIELD_OFFSET(SimpleLateralDebug, current_target_point_)>(
          reinterpret_cast<char*>(&current_target_point_),
          reinterpret_cast<char*>(&other->current_target_point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleLateralDebug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[3]);
}

// ===================================================================

class SimpleMPCDebug::_Internal {
 public:
};

SimpleMPCDebug::SimpleMPCDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matrix_q_updated_(arena),
  matrix_r_updated_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.SimpleMPCDebug)
}
SimpleMPCDebug::SimpleMPCDebug(const SimpleMPCDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_q_updated_(from.matrix_q_updated_),
      matrix_r_updated_(from.matrix_r_updated_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lateral_error_, &from.lateral_error_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.SimpleMPCDebug)
}

inline void SimpleMPCDebug::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lateral_error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_full_stop_) -
    reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
}

SimpleMPCDebug::~SimpleMPCDebug() {
  // @@protoc_insertion_point(destructor:autoagric.control.SimpleMPCDebug)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimpleMPCDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SimpleMPCDebug::ArenaDtor(void* object) {
  SimpleMPCDebug* _this = reinterpret_cast< SimpleMPCDebug* >(object);
  (void)_this;
}
void SimpleMPCDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleMPCDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleMPCDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.SimpleMPCDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_updated_.Clear();
  matrix_r_updated_.Clear();
  ::memset(&lateral_error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_full_stop_) -
      reinterpret_cast<char*>(&lateral_error_)) + sizeof(is_full_stop_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleMPCDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lateral_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lateral_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ref_heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          heading_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          heading_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_error_rate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          lateral_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double curvature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_feedforward = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          steer_angle_feedforward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_lateral_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          steer_angle_lateral_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_lateral_rate_contribution = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          steer_angle_lateral_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_heading_contribution = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          steer_angle_heading_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_heading_rate_contribution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          steer_angle_heading_rate_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_feedback = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          steer_angle_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steering_position = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          steering_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          ref_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_limited = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          steer_angle_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double station_reference = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          station_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double station_error = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          station_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_reference = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          speed_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_error = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          speed_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_reference = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          acceleration_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_full_stop = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          is_full_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double station_feedback = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          station_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_feedback = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          speed_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_cmd_closeloop = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          acceleration_cmd_closeloop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_cmd = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          acceleration_cmd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_lookup = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          acceleration_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double speed_lookup = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          speed_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double calibration_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          calibration_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_unconstrained_control_diff = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          steer_unconstrained_control_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_angle_feedforward_compensation = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          steer_angle_feedforward_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_q_updated = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q_updated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_matrix_q_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_r_updated = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_r_updated(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_matrix_r_updated(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_acceleration = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_jerk = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          lateral_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading_rate = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ref_heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_rate = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          heading_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading_acceleration = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          ref_heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_acceleration = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          heading_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error_acceleration = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          heading_error_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double ref_heading_jerk = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          ref_heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_jerk = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          heading_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double heading_error_jerk = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          heading_error_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_feedback = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          acceleration_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_error = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          acceleration_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jerk_reference = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          jerk_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jerk_feedback = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          jerk_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double jerk_error = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          jerk_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleMPCDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.SimpleMPCDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lateral_error = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error = this->_internal_lateral_error();
  uint64_t raw_lateral_error;
  memcpy(&raw_lateral_error, &tmp_lateral_error, sizeof(tmp_lateral_error));
  if (raw_lateral_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lateral_error(), target);
  }

  // double ref_heading = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading = this->_internal_ref_heading();
  uint64_t raw_ref_heading;
  memcpy(&raw_ref_heading, &tmp_ref_heading, sizeof(tmp_ref_heading));
  if (raw_ref_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ref_heading(), target);
  }

  // double heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_heading(), target);
  }

  // double heading_error = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error = this->_internal_heading_error();
  uint64_t raw_heading_error;
  memcpy(&raw_heading_error, &tmp_heading_error, sizeof(tmp_heading_error));
  if (raw_heading_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading_error(), target);
  }

  // double heading_error_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_rate = this->_internal_heading_error_rate();
  uint64_t raw_heading_error_rate;
  memcpy(&raw_heading_error_rate, &tmp_heading_error_rate, sizeof(tmp_heading_error_rate));
  if (raw_heading_error_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading_error_rate(), target);
  }

  // double lateral_error_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_rate = this->_internal_lateral_error_rate();
  uint64_t raw_lateral_error_rate;
  memcpy(&raw_lateral_error_rate, &tmp_lateral_error_rate, sizeof(tmp_lateral_error_rate));
  if (raw_lateral_error_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lateral_error_rate(), target);
  }

  // double curvature = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature(), target);
  }

  // double steer_angle = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle = this->_internal_steer_angle();
  uint64_t raw_steer_angle;
  memcpy(&raw_steer_angle, &tmp_steer_angle, sizeof(tmp_steer_angle));
  if (raw_steer_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_steer_angle(), target);
  }

  // double steer_angle_feedforward = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward = this->_internal_steer_angle_feedforward();
  uint64_t raw_steer_angle_feedforward;
  memcpy(&raw_steer_angle_feedforward, &tmp_steer_angle_feedforward, sizeof(tmp_steer_angle_feedforward));
  if (raw_steer_angle_feedforward != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_steer_angle_feedforward(), target);
  }

  // double steer_angle_lateral_contribution = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_contribution = this->_internal_steer_angle_lateral_contribution();
  uint64_t raw_steer_angle_lateral_contribution;
  memcpy(&raw_steer_angle_lateral_contribution, &tmp_steer_angle_lateral_contribution, sizeof(tmp_steer_angle_lateral_contribution));
  if (raw_steer_angle_lateral_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_steer_angle_lateral_contribution(), target);
  }

  // double steer_angle_lateral_rate_contribution = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_rate_contribution = this->_internal_steer_angle_lateral_rate_contribution();
  uint64_t raw_steer_angle_lateral_rate_contribution;
  memcpy(&raw_steer_angle_lateral_rate_contribution, &tmp_steer_angle_lateral_rate_contribution, sizeof(tmp_steer_angle_lateral_rate_contribution));
  if (raw_steer_angle_lateral_rate_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_steer_angle_lateral_rate_contribution(), target);
  }

  // double steer_angle_heading_contribution = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_contribution = this->_internal_steer_angle_heading_contribution();
  uint64_t raw_steer_angle_heading_contribution;
  memcpy(&raw_steer_angle_heading_contribution, &tmp_steer_angle_heading_contribution, sizeof(tmp_steer_angle_heading_contribution));
  if (raw_steer_angle_heading_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_steer_angle_heading_contribution(), target);
  }

  // double steer_angle_heading_rate_contribution = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_rate_contribution = this->_internal_steer_angle_heading_rate_contribution();
  uint64_t raw_steer_angle_heading_rate_contribution;
  memcpy(&raw_steer_angle_heading_rate_contribution, &tmp_steer_angle_heading_rate_contribution, sizeof(tmp_steer_angle_heading_rate_contribution));
  if (raw_steer_angle_heading_rate_contribution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_steer_angle_heading_rate_contribution(), target);
  }

  // double steer_angle_feedback = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback = this->_internal_steer_angle_feedback();
  uint64_t raw_steer_angle_feedback;
  memcpy(&raw_steer_angle_feedback, &tmp_steer_angle_feedback, sizeof(tmp_steer_angle_feedback));
  if (raw_steer_angle_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_steer_angle_feedback(), target);
  }

  // double steering_position = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_position = this->_internal_steering_position();
  uint64_t raw_steering_position;
  memcpy(&raw_steering_position, &tmp_steering_position, sizeof(tmp_steering_position));
  if (raw_steering_position != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_steering_position(), target);
  }

  // double ref_speed = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_speed = this->_internal_ref_speed();
  uint64_t raw_ref_speed;
  memcpy(&raw_ref_speed, &tmp_ref_speed, sizeof(tmp_ref_speed));
  if (raw_ref_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_ref_speed(), target);
  }

  // double steer_angle_limited = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_limited = this->_internal_steer_angle_limited();
  uint64_t raw_steer_angle_limited;
  memcpy(&raw_steer_angle_limited, &tmp_steer_angle_limited, sizeof(tmp_steer_angle_limited));
  if (raw_steer_angle_limited != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_steer_angle_limited(), target);
  }

  // double station_reference = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_reference = this->_internal_station_reference();
  uint64_t raw_station_reference;
  memcpy(&raw_station_reference, &tmp_station_reference, sizeof(tmp_station_reference));
  if (raw_station_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_station_reference(), target);
  }

  // double station_error = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error = this->_internal_station_error();
  uint64_t raw_station_error;
  memcpy(&raw_station_error, &tmp_station_error, sizeof(tmp_station_error));
  if (raw_station_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_station_error(), target);
  }

  // double speed_reference = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_reference = this->_internal_speed_reference();
  uint64_t raw_speed_reference;
  memcpy(&raw_speed_reference, &tmp_speed_reference, sizeof(tmp_speed_reference));
  if (raw_speed_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_speed_reference(), target);
  }

  // double speed_error = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_error = this->_internal_speed_error();
  uint64_t raw_speed_error;
  memcpy(&raw_speed_error, &tmp_speed_error, sizeof(tmp_speed_error));
  if (raw_speed_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_speed_error(), target);
  }

  // double acceleration_reference = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_reference = this->_internal_acceleration_reference();
  uint64_t raw_acceleration_reference;
  memcpy(&raw_acceleration_reference, &tmp_acceleration_reference, sizeof(tmp_acceleration_reference));
  if (raw_acceleration_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_acceleration_reference(), target);
  }

  // bool is_full_stop = 23;
  if (this->_internal_is_full_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_is_full_stop(), target);
  }

  // double station_feedback = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_feedback = this->_internal_station_feedback();
  uint64_t raw_station_feedback;
  memcpy(&raw_station_feedback, &tmp_station_feedback, sizeof(tmp_station_feedback));
  if (raw_station_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_station_feedback(), target);
  }

  // double speed_feedback = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_feedback = this->_internal_speed_feedback();
  uint64_t raw_speed_feedback;
  memcpy(&raw_speed_feedback, &tmp_speed_feedback, sizeof(tmp_speed_feedback));
  if (raw_speed_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_speed_feedback(), target);
  }

  // double acceleration_cmd_closeloop = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd_closeloop = this->_internal_acceleration_cmd_closeloop();
  uint64_t raw_acceleration_cmd_closeloop;
  memcpy(&raw_acceleration_cmd_closeloop, &tmp_acceleration_cmd_closeloop, sizeof(tmp_acceleration_cmd_closeloop));
  if (raw_acceleration_cmd_closeloop != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_acceleration_cmd_closeloop(), target);
  }

  // double acceleration_cmd = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd = this->_internal_acceleration_cmd();
  uint64_t raw_acceleration_cmd;
  memcpy(&raw_acceleration_cmd, &tmp_acceleration_cmd, sizeof(tmp_acceleration_cmd));
  if (raw_acceleration_cmd != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_acceleration_cmd(), target);
  }

  // double acceleration_lookup = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_lookup = this->_internal_acceleration_lookup();
  uint64_t raw_acceleration_lookup;
  memcpy(&raw_acceleration_lookup, &tmp_acceleration_lookup, sizeof(tmp_acceleration_lookup));
  if (raw_acceleration_lookup != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_acceleration_lookup(), target);
  }

  // double speed_lookup = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_lookup = this->_internal_speed_lookup();
  uint64_t raw_speed_lookup;
  memcpy(&raw_speed_lookup, &tmp_speed_lookup, sizeof(tmp_speed_lookup));
  if (raw_speed_lookup != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_speed_lookup(), target);
  }

  // double calibration_value = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_calibration_value = this->_internal_calibration_value();
  uint64_t raw_calibration_value;
  memcpy(&raw_calibration_value, &tmp_calibration_value, sizeof(tmp_calibration_value));
  if (raw_calibration_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(30, this->_internal_calibration_value(), target);
  }

  // double steer_unconstrained_control_diff = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_unconstrained_control_diff = this->_internal_steer_unconstrained_control_diff();
  uint64_t raw_steer_unconstrained_control_diff;
  memcpy(&raw_steer_unconstrained_control_diff, &tmp_steer_unconstrained_control_diff, sizeof(tmp_steer_unconstrained_control_diff));
  if (raw_steer_unconstrained_control_diff != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_steer_unconstrained_control_diff(), target);
  }

  // double steer_angle_feedforward_compensation = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward_compensation = this->_internal_steer_angle_feedforward_compensation();
  uint64_t raw_steer_angle_feedforward_compensation;
  memcpy(&raw_steer_angle_feedforward_compensation, &tmp_steer_angle_feedforward_compensation, sizeof(tmp_steer_angle_feedforward_compensation));
  if (raw_steer_angle_feedforward_compensation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->_internal_steer_angle_feedforward_compensation(), target);
  }

  // repeated double matrix_q_updated = 33;
  if (this->_internal_matrix_q_updated_size() > 0) {
    target = stream->WriteFixedPacked(33, _internal_matrix_q_updated(), target);
  }

  // repeated double matrix_r_updated = 34;
  if (this->_internal_matrix_r_updated_size() > 0) {
    target = stream->WriteFixedPacked(34, _internal_matrix_r_updated(), target);
  }

  // double lateral_acceleration = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_acceleration = this->_internal_lateral_acceleration();
  uint64_t raw_lateral_acceleration;
  memcpy(&raw_lateral_acceleration, &tmp_lateral_acceleration, sizeof(tmp_lateral_acceleration));
  if (raw_lateral_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_lateral_acceleration(), target);
  }

  // double lateral_jerk = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_jerk = this->_internal_lateral_jerk();
  uint64_t raw_lateral_jerk;
  memcpy(&raw_lateral_jerk, &tmp_lateral_jerk, sizeof(tmp_lateral_jerk));
  if (raw_lateral_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->_internal_lateral_jerk(), target);
  }

  // double ref_heading_rate = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_rate = this->_internal_ref_heading_rate();
  uint64_t raw_ref_heading_rate;
  memcpy(&raw_ref_heading_rate, &tmp_ref_heading_rate, sizeof(tmp_ref_heading_rate));
  if (raw_ref_heading_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(37, this->_internal_ref_heading_rate(), target);
  }

  // double heading_rate = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_rate = this->_internal_heading_rate();
  uint64_t raw_heading_rate;
  memcpy(&raw_heading_rate, &tmp_heading_rate, sizeof(tmp_heading_rate));
  if (raw_heading_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(38, this->_internal_heading_rate(), target);
  }

  // double ref_heading_acceleration = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_acceleration = this->_internal_ref_heading_acceleration();
  uint64_t raw_ref_heading_acceleration;
  memcpy(&raw_ref_heading_acceleration, &tmp_ref_heading_acceleration, sizeof(tmp_ref_heading_acceleration));
  if (raw_ref_heading_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(39, this->_internal_ref_heading_acceleration(), target);
  }

  // double heading_acceleration = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_acceleration = this->_internal_heading_acceleration();
  uint64_t raw_heading_acceleration;
  memcpy(&raw_heading_acceleration, &tmp_heading_acceleration, sizeof(tmp_heading_acceleration));
  if (raw_heading_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(40, this->_internal_heading_acceleration(), target);
  }

  // double heading_error_acceleration = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_acceleration = this->_internal_heading_error_acceleration();
  uint64_t raw_heading_error_acceleration;
  memcpy(&raw_heading_error_acceleration, &tmp_heading_error_acceleration, sizeof(tmp_heading_error_acceleration));
  if (raw_heading_error_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(41, this->_internal_heading_error_acceleration(), target);
  }

  // double ref_heading_jerk = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_jerk = this->_internal_ref_heading_jerk();
  uint64_t raw_ref_heading_jerk;
  memcpy(&raw_ref_heading_jerk, &tmp_ref_heading_jerk, sizeof(tmp_ref_heading_jerk));
  if (raw_ref_heading_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(42, this->_internal_ref_heading_jerk(), target);
  }

  // double heading_jerk = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_jerk = this->_internal_heading_jerk();
  uint64_t raw_heading_jerk;
  memcpy(&raw_heading_jerk, &tmp_heading_jerk, sizeof(tmp_heading_jerk));
  if (raw_heading_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(43, this->_internal_heading_jerk(), target);
  }

  // double heading_error_jerk = 44;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_jerk = this->_internal_heading_error_jerk();
  uint64_t raw_heading_error_jerk;
  memcpy(&raw_heading_error_jerk, &tmp_heading_error_jerk, sizeof(tmp_heading_error_jerk));
  if (raw_heading_error_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(44, this->_internal_heading_error_jerk(), target);
  }

  // double acceleration_feedback = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_feedback = this->_internal_acceleration_feedback();
  uint64_t raw_acceleration_feedback;
  memcpy(&raw_acceleration_feedback, &tmp_acceleration_feedback, sizeof(tmp_acceleration_feedback));
  if (raw_acceleration_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(45, this->_internal_acceleration_feedback(), target);
  }

  // double acceleration_error = 46;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_error = this->_internal_acceleration_error();
  uint64_t raw_acceleration_error;
  memcpy(&raw_acceleration_error, &tmp_acceleration_error, sizeof(tmp_acceleration_error));
  if (raw_acceleration_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(46, this->_internal_acceleration_error(), target);
  }

  // double jerk_reference = 47;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_reference = this->_internal_jerk_reference();
  uint64_t raw_jerk_reference;
  memcpy(&raw_jerk_reference, &tmp_jerk_reference, sizeof(tmp_jerk_reference));
  if (raw_jerk_reference != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(47, this->_internal_jerk_reference(), target);
  }

  // double jerk_feedback = 48;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_feedback = this->_internal_jerk_feedback();
  uint64_t raw_jerk_feedback;
  memcpy(&raw_jerk_feedback, &tmp_jerk_feedback, sizeof(tmp_jerk_feedback));
  if (raw_jerk_feedback != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(48, this->_internal_jerk_feedback(), target);
  }

  // double jerk_error = 49;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_error = this->_internal_jerk_error();
  uint64_t raw_jerk_error;
  memcpy(&raw_jerk_error, &tmp_jerk_error, sizeof(tmp_jerk_error));
  if (raw_jerk_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(49, this->_internal_jerk_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.SimpleMPCDebug)
  return target;
}

size_t SimpleMPCDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.SimpleMPCDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q_updated = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_updated_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double matrix_r_updated = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_r_updated_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double lateral_error = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error = this->_internal_lateral_error();
  uint64_t raw_lateral_error;
  memcpy(&raw_lateral_error, &tmp_lateral_error, sizeof(tmp_lateral_error));
  if (raw_lateral_error != 0) {
    total_size += 1 + 8;
  }

  // double ref_heading = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading = this->_internal_ref_heading();
  uint64_t raw_ref_heading;
  memcpy(&raw_ref_heading, &tmp_ref_heading, sizeof(tmp_ref_heading));
  if (raw_ref_heading != 0) {
    total_size += 1 + 8;
  }

  // double heading = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = this->_internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    total_size += 1 + 8;
  }

  // double heading_error = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error = this->_internal_heading_error();
  uint64_t raw_heading_error;
  memcpy(&raw_heading_error, &tmp_heading_error, sizeof(tmp_heading_error));
  if (raw_heading_error != 0) {
    total_size += 1 + 8;
  }

  // double heading_error_rate = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_rate = this->_internal_heading_error_rate();
  uint64_t raw_heading_error_rate;
  memcpy(&raw_heading_error_rate, &tmp_heading_error_rate, sizeof(tmp_heading_error_rate));
  if (raw_heading_error_rate != 0) {
    total_size += 1 + 8;
  }

  // double lateral_error_rate = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_rate = this->_internal_lateral_error_rate();
  uint64_t raw_lateral_error_rate;
  memcpy(&raw_lateral_error_rate, &tmp_lateral_error_rate, sizeof(tmp_lateral_error_rate));
  if (raw_lateral_error_rate != 0) {
    total_size += 1 + 8;
  }

  // double curvature = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = this->_internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle = this->_internal_steer_angle();
  uint64_t raw_steer_angle;
  memcpy(&raw_steer_angle, &tmp_steer_angle, sizeof(tmp_steer_angle));
  if (raw_steer_angle != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedforward = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward = this->_internal_steer_angle_feedforward();
  uint64_t raw_steer_angle_feedforward;
  memcpy(&raw_steer_angle_feedforward, &tmp_steer_angle_feedforward, sizeof(tmp_steer_angle_feedforward));
  if (raw_steer_angle_feedforward != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_contribution = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_contribution = this->_internal_steer_angle_lateral_contribution();
  uint64_t raw_steer_angle_lateral_contribution;
  memcpy(&raw_steer_angle_lateral_contribution, &tmp_steer_angle_lateral_contribution, sizeof(tmp_steer_angle_lateral_contribution));
  if (raw_steer_angle_lateral_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_lateral_rate_contribution = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_rate_contribution = this->_internal_steer_angle_lateral_rate_contribution();
  uint64_t raw_steer_angle_lateral_rate_contribution;
  memcpy(&raw_steer_angle_lateral_rate_contribution, &tmp_steer_angle_lateral_rate_contribution, sizeof(tmp_steer_angle_lateral_rate_contribution));
  if (raw_steer_angle_lateral_rate_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_contribution = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_contribution = this->_internal_steer_angle_heading_contribution();
  uint64_t raw_steer_angle_heading_contribution;
  memcpy(&raw_steer_angle_heading_contribution, &tmp_steer_angle_heading_contribution, sizeof(tmp_steer_angle_heading_contribution));
  if (raw_steer_angle_heading_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_heading_rate_contribution = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_rate_contribution = this->_internal_steer_angle_heading_rate_contribution();
  uint64_t raw_steer_angle_heading_rate_contribution;
  memcpy(&raw_steer_angle_heading_rate_contribution, &tmp_steer_angle_heading_rate_contribution, sizeof(tmp_steer_angle_heading_rate_contribution));
  if (raw_steer_angle_heading_rate_contribution != 0) {
    total_size += 1 + 8;
  }

  // double steer_angle_feedback = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback = this->_internal_steer_angle_feedback();
  uint64_t raw_steer_angle_feedback;
  memcpy(&raw_steer_angle_feedback, &tmp_steer_angle_feedback, sizeof(tmp_steer_angle_feedback));
  if (raw_steer_angle_feedback != 0) {
    total_size += 1 + 8;
  }

  // double steering_position = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_position = this->_internal_steering_position();
  uint64_t raw_steering_position;
  memcpy(&raw_steering_position, &tmp_steering_position, sizeof(tmp_steering_position));
  if (raw_steering_position != 0) {
    total_size += 1 + 8;
  }

  // double ref_speed = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_speed = this->_internal_ref_speed();
  uint64_t raw_ref_speed;
  memcpy(&raw_ref_speed, &tmp_ref_speed, sizeof(tmp_ref_speed));
  if (raw_ref_speed != 0) {
    total_size += 2 + 8;
  }

  // double steer_angle_limited = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_limited = this->_internal_steer_angle_limited();
  uint64_t raw_steer_angle_limited;
  memcpy(&raw_steer_angle_limited, &tmp_steer_angle_limited, sizeof(tmp_steer_angle_limited));
  if (raw_steer_angle_limited != 0) {
    total_size += 2 + 8;
  }

  // double station_reference = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_reference = this->_internal_station_reference();
  uint64_t raw_station_reference;
  memcpy(&raw_station_reference, &tmp_station_reference, sizeof(tmp_station_reference));
  if (raw_station_reference != 0) {
    total_size += 2 + 8;
  }

  // double station_error = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error = this->_internal_station_error();
  uint64_t raw_station_error;
  memcpy(&raw_station_error, &tmp_station_error, sizeof(tmp_station_error));
  if (raw_station_error != 0) {
    total_size += 2 + 8;
  }

  // double speed_reference = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_reference = this->_internal_speed_reference();
  uint64_t raw_speed_reference;
  memcpy(&raw_speed_reference, &tmp_speed_reference, sizeof(tmp_speed_reference));
  if (raw_speed_reference != 0) {
    total_size += 2 + 8;
  }

  // double speed_error = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_error = this->_internal_speed_error();
  uint64_t raw_speed_error;
  memcpy(&raw_speed_error, &tmp_speed_error, sizeof(tmp_speed_error));
  if (raw_speed_error != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_reference = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_reference = this->_internal_acceleration_reference();
  uint64_t raw_acceleration_reference;
  memcpy(&raw_acceleration_reference, &tmp_acceleration_reference, sizeof(tmp_acceleration_reference));
  if (raw_acceleration_reference != 0) {
    total_size += 2 + 8;
  }

  // double station_feedback = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_feedback = this->_internal_station_feedback();
  uint64_t raw_station_feedback;
  memcpy(&raw_station_feedback, &tmp_station_feedback, sizeof(tmp_station_feedback));
  if (raw_station_feedback != 0) {
    total_size += 2 + 8;
  }

  // double speed_feedback = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_feedback = this->_internal_speed_feedback();
  uint64_t raw_speed_feedback;
  memcpy(&raw_speed_feedback, &tmp_speed_feedback, sizeof(tmp_speed_feedback));
  if (raw_speed_feedback != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_cmd_closeloop = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd_closeloop = this->_internal_acceleration_cmd_closeloop();
  uint64_t raw_acceleration_cmd_closeloop;
  memcpy(&raw_acceleration_cmd_closeloop, &tmp_acceleration_cmd_closeloop, sizeof(tmp_acceleration_cmd_closeloop));
  if (raw_acceleration_cmd_closeloop != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_cmd = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd = this->_internal_acceleration_cmd();
  uint64_t raw_acceleration_cmd;
  memcpy(&raw_acceleration_cmd, &tmp_acceleration_cmd, sizeof(tmp_acceleration_cmd));
  if (raw_acceleration_cmd != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_lookup = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_lookup = this->_internal_acceleration_lookup();
  uint64_t raw_acceleration_lookup;
  memcpy(&raw_acceleration_lookup, &tmp_acceleration_lookup, sizeof(tmp_acceleration_lookup));
  if (raw_acceleration_lookup != 0) {
    total_size += 2 + 8;
  }

  // double speed_lookup = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_lookup = this->_internal_speed_lookup();
  uint64_t raw_speed_lookup;
  memcpy(&raw_speed_lookup, &tmp_speed_lookup, sizeof(tmp_speed_lookup));
  if (raw_speed_lookup != 0) {
    total_size += 2 + 8;
  }

  // double calibration_value = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_calibration_value = this->_internal_calibration_value();
  uint64_t raw_calibration_value;
  memcpy(&raw_calibration_value, &tmp_calibration_value, sizeof(tmp_calibration_value));
  if (raw_calibration_value != 0) {
    total_size += 2 + 8;
  }

  // double steer_unconstrained_control_diff = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_unconstrained_control_diff = this->_internal_steer_unconstrained_control_diff();
  uint64_t raw_steer_unconstrained_control_diff;
  memcpy(&raw_steer_unconstrained_control_diff, &tmp_steer_unconstrained_control_diff, sizeof(tmp_steer_unconstrained_control_diff));
  if (raw_steer_unconstrained_control_diff != 0) {
    total_size += 2 + 8;
  }

  // double steer_angle_feedforward_compensation = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward_compensation = this->_internal_steer_angle_feedforward_compensation();
  uint64_t raw_steer_angle_feedforward_compensation;
  memcpy(&raw_steer_angle_feedforward_compensation, &tmp_steer_angle_feedforward_compensation, sizeof(tmp_steer_angle_feedforward_compensation));
  if (raw_steer_angle_feedforward_compensation != 0) {
    total_size += 2 + 8;
  }

  // double lateral_acceleration = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_acceleration = this->_internal_lateral_acceleration();
  uint64_t raw_lateral_acceleration;
  memcpy(&raw_lateral_acceleration, &tmp_lateral_acceleration, sizeof(tmp_lateral_acceleration));
  if (raw_lateral_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double lateral_jerk = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_jerk = this->_internal_lateral_jerk();
  uint64_t raw_lateral_jerk;
  memcpy(&raw_lateral_jerk, &tmp_lateral_jerk, sizeof(tmp_lateral_jerk));
  if (raw_lateral_jerk != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_rate = 37;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_rate = this->_internal_ref_heading_rate();
  uint64_t raw_ref_heading_rate;
  memcpy(&raw_ref_heading_rate, &tmp_ref_heading_rate, sizeof(tmp_ref_heading_rate));
  if (raw_ref_heading_rate != 0) {
    total_size += 2 + 8;
  }

  // double heading_rate = 38;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_rate = this->_internal_heading_rate();
  uint64_t raw_heading_rate;
  memcpy(&raw_heading_rate, &tmp_heading_rate, sizeof(tmp_heading_rate));
  if (raw_heading_rate != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_acceleration = 39;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_acceleration = this->_internal_ref_heading_acceleration();
  uint64_t raw_ref_heading_acceleration;
  memcpy(&raw_ref_heading_acceleration, &tmp_ref_heading_acceleration, sizeof(tmp_ref_heading_acceleration));
  if (raw_ref_heading_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double heading_acceleration = 40;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_acceleration = this->_internal_heading_acceleration();
  uint64_t raw_heading_acceleration;
  memcpy(&raw_heading_acceleration, &tmp_heading_acceleration, sizeof(tmp_heading_acceleration));
  if (raw_heading_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double heading_error_acceleration = 41;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_acceleration = this->_internal_heading_error_acceleration();
  uint64_t raw_heading_error_acceleration;
  memcpy(&raw_heading_error_acceleration, &tmp_heading_error_acceleration, sizeof(tmp_heading_error_acceleration));
  if (raw_heading_error_acceleration != 0) {
    total_size += 2 + 8;
  }

  // double ref_heading_jerk = 42;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_jerk = this->_internal_ref_heading_jerk();
  uint64_t raw_ref_heading_jerk;
  memcpy(&raw_ref_heading_jerk, &tmp_ref_heading_jerk, sizeof(tmp_ref_heading_jerk));
  if (raw_ref_heading_jerk != 0) {
    total_size += 2 + 8;
  }

  // double heading_jerk = 43;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_jerk = this->_internal_heading_jerk();
  uint64_t raw_heading_jerk;
  memcpy(&raw_heading_jerk, &tmp_heading_jerk, sizeof(tmp_heading_jerk));
  if (raw_heading_jerk != 0) {
    total_size += 2 + 8;
  }

  // double heading_error_jerk = 44;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_jerk = this->_internal_heading_error_jerk();
  uint64_t raw_heading_error_jerk;
  memcpy(&raw_heading_error_jerk, &tmp_heading_error_jerk, sizeof(tmp_heading_error_jerk));
  if (raw_heading_error_jerk != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_feedback = 45;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_feedback = this->_internal_acceleration_feedback();
  uint64_t raw_acceleration_feedback;
  memcpy(&raw_acceleration_feedback, &tmp_acceleration_feedback, sizeof(tmp_acceleration_feedback));
  if (raw_acceleration_feedback != 0) {
    total_size += 2 + 8;
  }

  // double acceleration_error = 46;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_error = this->_internal_acceleration_error();
  uint64_t raw_acceleration_error;
  memcpy(&raw_acceleration_error, &tmp_acceleration_error, sizeof(tmp_acceleration_error));
  if (raw_acceleration_error != 0) {
    total_size += 2 + 8;
  }

  // double jerk_reference = 47;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_reference = this->_internal_jerk_reference();
  uint64_t raw_jerk_reference;
  memcpy(&raw_jerk_reference, &tmp_jerk_reference, sizeof(tmp_jerk_reference));
  if (raw_jerk_reference != 0) {
    total_size += 2 + 8;
  }

  // double jerk_feedback = 48;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_feedback = this->_internal_jerk_feedback();
  uint64_t raw_jerk_feedback;
  memcpy(&raw_jerk_feedback, &tmp_jerk_feedback, sizeof(tmp_jerk_feedback));
  if (raw_jerk_feedback != 0) {
    total_size += 2 + 8;
  }

  // double jerk_error = 49;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_error = this->_internal_jerk_error();
  uint64_t raw_jerk_error;
  memcpy(&raw_jerk_error, &tmp_jerk_error, sizeof(tmp_jerk_error));
  if (raw_jerk_error != 0) {
    total_size += 2 + 8;
  }

  // bool is_full_stop = 23;
  if (this->_internal_is_full_stop() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleMPCDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleMPCDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleMPCDebug::GetClassData() const { return &_class_data_; }

void SimpleMPCDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleMPCDebug *>(to)->MergeFrom(
      static_cast<const SimpleMPCDebug &>(from));
}


void SimpleMPCDebug::MergeFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.SimpleMPCDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_updated_.MergeFrom(from.matrix_q_updated_);
  matrix_r_updated_.MergeFrom(from.matrix_r_updated_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error = from._internal_lateral_error();
  uint64_t raw_lateral_error;
  memcpy(&raw_lateral_error, &tmp_lateral_error, sizeof(tmp_lateral_error));
  if (raw_lateral_error != 0) {
    _internal_set_lateral_error(from._internal_lateral_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading = from._internal_ref_heading();
  uint64_t raw_ref_heading;
  memcpy(&raw_ref_heading, &tmp_ref_heading, sizeof(tmp_ref_heading));
  if (raw_ref_heading != 0) {
    _internal_set_ref_heading(from._internal_ref_heading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading = from._internal_heading();
  uint64_t raw_heading;
  memcpy(&raw_heading, &tmp_heading, sizeof(tmp_heading));
  if (raw_heading != 0) {
    _internal_set_heading(from._internal_heading());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error = from._internal_heading_error();
  uint64_t raw_heading_error;
  memcpy(&raw_heading_error, &tmp_heading_error, sizeof(tmp_heading_error));
  if (raw_heading_error != 0) {
    _internal_set_heading_error(from._internal_heading_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_rate = from._internal_heading_error_rate();
  uint64_t raw_heading_error_rate;
  memcpy(&raw_heading_error_rate, &tmp_heading_error_rate, sizeof(tmp_heading_error_rate));
  if (raw_heading_error_rate != 0) {
    _internal_set_heading_error_rate(from._internal_heading_error_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_error_rate = from._internal_lateral_error_rate();
  uint64_t raw_lateral_error_rate;
  memcpy(&raw_lateral_error_rate, &tmp_lateral_error_rate, sizeof(tmp_lateral_error_rate));
  if (raw_lateral_error_rate != 0) {
    _internal_set_lateral_error_rate(from._internal_lateral_error_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature = from._internal_curvature();
  uint64_t raw_curvature;
  memcpy(&raw_curvature, &tmp_curvature, sizeof(tmp_curvature));
  if (raw_curvature != 0) {
    _internal_set_curvature(from._internal_curvature());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle = from._internal_steer_angle();
  uint64_t raw_steer_angle;
  memcpy(&raw_steer_angle, &tmp_steer_angle, sizeof(tmp_steer_angle));
  if (raw_steer_angle != 0) {
    _internal_set_steer_angle(from._internal_steer_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward = from._internal_steer_angle_feedforward();
  uint64_t raw_steer_angle_feedforward;
  memcpy(&raw_steer_angle_feedforward, &tmp_steer_angle_feedforward, sizeof(tmp_steer_angle_feedforward));
  if (raw_steer_angle_feedforward != 0) {
    _internal_set_steer_angle_feedforward(from._internal_steer_angle_feedforward());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_contribution = from._internal_steer_angle_lateral_contribution();
  uint64_t raw_steer_angle_lateral_contribution;
  memcpy(&raw_steer_angle_lateral_contribution, &tmp_steer_angle_lateral_contribution, sizeof(tmp_steer_angle_lateral_contribution));
  if (raw_steer_angle_lateral_contribution != 0) {
    _internal_set_steer_angle_lateral_contribution(from._internal_steer_angle_lateral_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_lateral_rate_contribution = from._internal_steer_angle_lateral_rate_contribution();
  uint64_t raw_steer_angle_lateral_rate_contribution;
  memcpy(&raw_steer_angle_lateral_rate_contribution, &tmp_steer_angle_lateral_rate_contribution, sizeof(tmp_steer_angle_lateral_rate_contribution));
  if (raw_steer_angle_lateral_rate_contribution != 0) {
    _internal_set_steer_angle_lateral_rate_contribution(from._internal_steer_angle_lateral_rate_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_contribution = from._internal_steer_angle_heading_contribution();
  uint64_t raw_steer_angle_heading_contribution;
  memcpy(&raw_steer_angle_heading_contribution, &tmp_steer_angle_heading_contribution, sizeof(tmp_steer_angle_heading_contribution));
  if (raw_steer_angle_heading_contribution != 0) {
    _internal_set_steer_angle_heading_contribution(from._internal_steer_angle_heading_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_heading_rate_contribution = from._internal_steer_angle_heading_rate_contribution();
  uint64_t raw_steer_angle_heading_rate_contribution;
  memcpy(&raw_steer_angle_heading_rate_contribution, &tmp_steer_angle_heading_rate_contribution, sizeof(tmp_steer_angle_heading_rate_contribution));
  if (raw_steer_angle_heading_rate_contribution != 0) {
    _internal_set_steer_angle_heading_rate_contribution(from._internal_steer_angle_heading_rate_contribution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedback = from._internal_steer_angle_feedback();
  uint64_t raw_steer_angle_feedback;
  memcpy(&raw_steer_angle_feedback, &tmp_steer_angle_feedback, sizeof(tmp_steer_angle_feedback));
  if (raw_steer_angle_feedback != 0) {
    _internal_set_steer_angle_feedback(from._internal_steer_angle_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steering_position = from._internal_steering_position();
  uint64_t raw_steering_position;
  memcpy(&raw_steering_position, &tmp_steering_position, sizeof(tmp_steering_position));
  if (raw_steering_position != 0) {
    _internal_set_steering_position(from._internal_steering_position());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_speed = from._internal_ref_speed();
  uint64_t raw_ref_speed;
  memcpy(&raw_ref_speed, &tmp_ref_speed, sizeof(tmp_ref_speed));
  if (raw_ref_speed != 0) {
    _internal_set_ref_speed(from._internal_ref_speed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_limited = from._internal_steer_angle_limited();
  uint64_t raw_steer_angle_limited;
  memcpy(&raw_steer_angle_limited, &tmp_steer_angle_limited, sizeof(tmp_steer_angle_limited));
  if (raw_steer_angle_limited != 0) {
    _internal_set_steer_angle_limited(from._internal_steer_angle_limited());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_reference = from._internal_station_reference();
  uint64_t raw_station_reference;
  memcpy(&raw_station_reference, &tmp_station_reference, sizeof(tmp_station_reference));
  if (raw_station_reference != 0) {
    _internal_set_station_reference(from._internal_station_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_error = from._internal_station_error();
  uint64_t raw_station_error;
  memcpy(&raw_station_error, &tmp_station_error, sizeof(tmp_station_error));
  if (raw_station_error != 0) {
    _internal_set_station_error(from._internal_station_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_reference = from._internal_speed_reference();
  uint64_t raw_speed_reference;
  memcpy(&raw_speed_reference, &tmp_speed_reference, sizeof(tmp_speed_reference));
  if (raw_speed_reference != 0) {
    _internal_set_speed_reference(from._internal_speed_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_error = from._internal_speed_error();
  uint64_t raw_speed_error;
  memcpy(&raw_speed_error, &tmp_speed_error, sizeof(tmp_speed_error));
  if (raw_speed_error != 0) {
    _internal_set_speed_error(from._internal_speed_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_reference = from._internal_acceleration_reference();
  uint64_t raw_acceleration_reference;
  memcpy(&raw_acceleration_reference, &tmp_acceleration_reference, sizeof(tmp_acceleration_reference));
  if (raw_acceleration_reference != 0) {
    _internal_set_acceleration_reference(from._internal_acceleration_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_station_feedback = from._internal_station_feedback();
  uint64_t raw_station_feedback;
  memcpy(&raw_station_feedback, &tmp_station_feedback, sizeof(tmp_station_feedback));
  if (raw_station_feedback != 0) {
    _internal_set_station_feedback(from._internal_station_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_feedback = from._internal_speed_feedback();
  uint64_t raw_speed_feedback;
  memcpy(&raw_speed_feedback, &tmp_speed_feedback, sizeof(tmp_speed_feedback));
  if (raw_speed_feedback != 0) {
    _internal_set_speed_feedback(from._internal_speed_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd_closeloop = from._internal_acceleration_cmd_closeloop();
  uint64_t raw_acceleration_cmd_closeloop;
  memcpy(&raw_acceleration_cmd_closeloop, &tmp_acceleration_cmd_closeloop, sizeof(tmp_acceleration_cmd_closeloop));
  if (raw_acceleration_cmd_closeloop != 0) {
    _internal_set_acceleration_cmd_closeloop(from._internal_acceleration_cmd_closeloop());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_cmd = from._internal_acceleration_cmd();
  uint64_t raw_acceleration_cmd;
  memcpy(&raw_acceleration_cmd, &tmp_acceleration_cmd, sizeof(tmp_acceleration_cmd));
  if (raw_acceleration_cmd != 0) {
    _internal_set_acceleration_cmd(from._internal_acceleration_cmd());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_lookup = from._internal_acceleration_lookup();
  uint64_t raw_acceleration_lookup;
  memcpy(&raw_acceleration_lookup, &tmp_acceleration_lookup, sizeof(tmp_acceleration_lookup));
  if (raw_acceleration_lookup != 0) {
    _internal_set_acceleration_lookup(from._internal_acceleration_lookup());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_speed_lookup = from._internal_speed_lookup();
  uint64_t raw_speed_lookup;
  memcpy(&raw_speed_lookup, &tmp_speed_lookup, sizeof(tmp_speed_lookup));
  if (raw_speed_lookup != 0) {
    _internal_set_speed_lookup(from._internal_speed_lookup());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_calibration_value = from._internal_calibration_value();
  uint64_t raw_calibration_value;
  memcpy(&raw_calibration_value, &tmp_calibration_value, sizeof(tmp_calibration_value));
  if (raw_calibration_value != 0) {
    _internal_set_calibration_value(from._internal_calibration_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_unconstrained_control_diff = from._internal_steer_unconstrained_control_diff();
  uint64_t raw_steer_unconstrained_control_diff;
  memcpy(&raw_steer_unconstrained_control_diff, &tmp_steer_unconstrained_control_diff, sizeof(tmp_steer_unconstrained_control_diff));
  if (raw_steer_unconstrained_control_diff != 0) {
    _internal_set_steer_unconstrained_control_diff(from._internal_steer_unconstrained_control_diff());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_angle_feedforward_compensation = from._internal_steer_angle_feedforward_compensation();
  uint64_t raw_steer_angle_feedforward_compensation;
  memcpy(&raw_steer_angle_feedforward_compensation, &tmp_steer_angle_feedforward_compensation, sizeof(tmp_steer_angle_feedforward_compensation));
  if (raw_steer_angle_feedforward_compensation != 0) {
    _internal_set_steer_angle_feedforward_compensation(from._internal_steer_angle_feedforward_compensation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_acceleration = from._internal_lateral_acceleration();
  uint64_t raw_lateral_acceleration;
  memcpy(&raw_lateral_acceleration, &tmp_lateral_acceleration, sizeof(tmp_lateral_acceleration));
  if (raw_lateral_acceleration != 0) {
    _internal_set_lateral_acceleration(from._internal_lateral_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_jerk = from._internal_lateral_jerk();
  uint64_t raw_lateral_jerk;
  memcpy(&raw_lateral_jerk, &tmp_lateral_jerk, sizeof(tmp_lateral_jerk));
  if (raw_lateral_jerk != 0) {
    _internal_set_lateral_jerk(from._internal_lateral_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_rate = from._internal_ref_heading_rate();
  uint64_t raw_ref_heading_rate;
  memcpy(&raw_ref_heading_rate, &tmp_ref_heading_rate, sizeof(tmp_ref_heading_rate));
  if (raw_ref_heading_rate != 0) {
    _internal_set_ref_heading_rate(from._internal_ref_heading_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_rate = from._internal_heading_rate();
  uint64_t raw_heading_rate;
  memcpy(&raw_heading_rate, &tmp_heading_rate, sizeof(tmp_heading_rate));
  if (raw_heading_rate != 0) {
    _internal_set_heading_rate(from._internal_heading_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_acceleration = from._internal_ref_heading_acceleration();
  uint64_t raw_ref_heading_acceleration;
  memcpy(&raw_ref_heading_acceleration, &tmp_ref_heading_acceleration, sizeof(tmp_ref_heading_acceleration));
  if (raw_ref_heading_acceleration != 0) {
    _internal_set_ref_heading_acceleration(from._internal_ref_heading_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_acceleration = from._internal_heading_acceleration();
  uint64_t raw_heading_acceleration;
  memcpy(&raw_heading_acceleration, &tmp_heading_acceleration, sizeof(tmp_heading_acceleration));
  if (raw_heading_acceleration != 0) {
    _internal_set_heading_acceleration(from._internal_heading_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_acceleration = from._internal_heading_error_acceleration();
  uint64_t raw_heading_error_acceleration;
  memcpy(&raw_heading_error_acceleration, &tmp_heading_error_acceleration, sizeof(tmp_heading_error_acceleration));
  if (raw_heading_error_acceleration != 0) {
    _internal_set_heading_error_acceleration(from._internal_heading_error_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ref_heading_jerk = from._internal_ref_heading_jerk();
  uint64_t raw_ref_heading_jerk;
  memcpy(&raw_ref_heading_jerk, &tmp_ref_heading_jerk, sizeof(tmp_ref_heading_jerk));
  if (raw_ref_heading_jerk != 0) {
    _internal_set_ref_heading_jerk(from._internal_ref_heading_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_jerk = from._internal_heading_jerk();
  uint64_t raw_heading_jerk;
  memcpy(&raw_heading_jerk, &tmp_heading_jerk, sizeof(tmp_heading_jerk));
  if (raw_heading_jerk != 0) {
    _internal_set_heading_jerk(from._internal_heading_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_heading_error_jerk = from._internal_heading_error_jerk();
  uint64_t raw_heading_error_jerk;
  memcpy(&raw_heading_error_jerk, &tmp_heading_error_jerk, sizeof(tmp_heading_error_jerk));
  if (raw_heading_error_jerk != 0) {
    _internal_set_heading_error_jerk(from._internal_heading_error_jerk());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_feedback = from._internal_acceleration_feedback();
  uint64_t raw_acceleration_feedback;
  memcpy(&raw_acceleration_feedback, &tmp_acceleration_feedback, sizeof(tmp_acceleration_feedback));
  if (raw_acceleration_feedback != 0) {
    _internal_set_acceleration_feedback(from._internal_acceleration_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_error = from._internal_acceleration_error();
  uint64_t raw_acceleration_error;
  memcpy(&raw_acceleration_error, &tmp_acceleration_error, sizeof(tmp_acceleration_error));
  if (raw_acceleration_error != 0) {
    _internal_set_acceleration_error(from._internal_acceleration_error());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_reference = from._internal_jerk_reference();
  uint64_t raw_jerk_reference;
  memcpy(&raw_jerk_reference, &tmp_jerk_reference, sizeof(tmp_jerk_reference));
  if (raw_jerk_reference != 0) {
    _internal_set_jerk_reference(from._internal_jerk_reference());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_feedback = from._internal_jerk_feedback();
  uint64_t raw_jerk_feedback;
  memcpy(&raw_jerk_feedback, &tmp_jerk_feedback, sizeof(tmp_jerk_feedback));
  if (raw_jerk_feedback != 0) {
    _internal_set_jerk_feedback(from._internal_jerk_feedback());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_jerk_error = from._internal_jerk_error();
  uint64_t raw_jerk_error;
  memcpy(&raw_jerk_error, &tmp_jerk_error, sizeof(tmp_jerk_error));
  if (raw_jerk_error != 0) {
    _internal_set_jerk_error(from._internal_jerk_error());
  }
  if (from._internal_is_full_stop() != 0) {
    _internal_set_is_full_stop(from._internal_is_full_stop());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleMPCDebug::CopyFrom(const SimpleMPCDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.SimpleMPCDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMPCDebug::IsInitialized() const {
  return true;
}

void SimpleMPCDebug::InternalSwap(SimpleMPCDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_q_updated_.InternalSwap(&other->matrix_q_updated_);
  matrix_r_updated_.InternalSwap(&other->matrix_r_updated_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleMPCDebug, is_full_stop_)
      + sizeof(SimpleMPCDebug::is_full_stop_)
      - PROTOBUF_FIELD_OFFSET(SimpleMPCDebug, lateral_error_)>(
          reinterpret_cast<char*>(&lateral_error_),
          reinterpret_cast<char*>(&other->lateral_error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleMPCDebug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[4]);
}

// ===================================================================

class MracDebug::_Internal {
 public:
  static const ::autoagric::control::MracAdaptiveGain& mrac_adaptive_gain(const MracDebug* msg);
};

const ::autoagric::control::MracAdaptiveGain&
MracDebug::_Internal::mrac_adaptive_gain(const MracDebug* msg) {
  return *msg->mrac_adaptive_gain_;
}
MracDebug::MracDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mrac_reference_state_(arena),
  mrac_state_error_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.MracDebug)
}
MracDebug::MracDebug(const MracDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mrac_reference_state_(from.mrac_reference_state_),
      mrac_state_error_(from.mrac_state_error_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mrac_adaptive_gain()) {
    mrac_adaptive_gain_ = new ::autoagric::control::MracAdaptiveGain(*from.mrac_adaptive_gain_);
  } else {
    mrac_adaptive_gain_ = nullptr;
  }
  ::memcpy(&mrac_model_order_, &from.mrac_model_order_,
    static_cast<size_t>(reinterpret_cast<char*>(&mrac_control_saturation_status_) -
    reinterpret_cast<char*>(&mrac_model_order_)) + sizeof(mrac_control_saturation_status_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.MracDebug)
}

inline void MracDebug::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mrac_adaptive_gain_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mrac_control_saturation_status_) -
    reinterpret_cast<char*>(&mrac_adaptive_gain_)) + sizeof(mrac_control_saturation_status_));
}

MracDebug::~MracDebug() {
  // @@protoc_insertion_point(destructor:autoagric.control.MracDebug)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MracDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete mrac_adaptive_gain_;
}

void MracDebug::ArenaDtor(void* object) {
  MracDebug* _this = reinterpret_cast< MracDebug* >(object);
  (void)_this;
}
void MracDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MracDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MracDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.MracDebug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mrac_reference_state_.Clear();
  mrac_state_error_.Clear();
  if (GetArenaForAllocation() == nullptr && mrac_adaptive_gain_ != nullptr) {
    delete mrac_adaptive_gain_;
  }
  mrac_adaptive_gain_ = nullptr;
  ::memset(&mrac_model_order_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mrac_control_saturation_status_) -
      reinterpret_cast<char*>(&mrac_model_order_)) + sizeof(mrac_control_saturation_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MracDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mrac_model_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mrac_model_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double mrac_reference_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_mrac_reference_state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_mrac_reference_state(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double mrac_state_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_mrac_state_error(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_mrac_state_error(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.MracAdaptiveGain mrac_adaptive_gain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mrac_adaptive_gain(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mrac_reference_saturation_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          mrac_reference_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mrac_control_saturation_status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          mrac_control_saturation_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MracDebug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.MracDebug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mrac_model_order = 1;
  if (this->_internal_mrac_model_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrac_model_order(), target);
  }

  // repeated double mrac_reference_state = 2;
  if (this->_internal_mrac_reference_state_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_mrac_reference_state(), target);
  }

  // repeated double mrac_state_error = 3;
  if (this->_internal_mrac_state_error_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_mrac_state_error(), target);
  }

  // .autoagric.control.MracAdaptiveGain mrac_adaptive_gain = 4;
  if (this->_internal_has_mrac_adaptive_gain()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::mrac_adaptive_gain(this), target, stream);
  }

  // int32 mrac_reference_saturation_status = 5;
  if (this->_internal_mrac_reference_saturation_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mrac_reference_saturation_status(), target);
  }

  // int32 mrac_control_saturation_status = 6;
  if (this->_internal_mrac_control_saturation_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mrac_control_saturation_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.MracDebug)
  return target;
}

size_t MracDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.MracDebug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double mrac_reference_state = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mrac_reference_state_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double mrac_state_error = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mrac_state_error_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .autoagric.control.MracAdaptiveGain mrac_adaptive_gain = 4;
  if (this->_internal_has_mrac_adaptive_gain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mrac_adaptive_gain_);
  }

  // int32 mrac_model_order = 1;
  if (this->_internal_mrac_model_order() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mrac_model_order());
  }

  // int32 mrac_reference_saturation_status = 5;
  if (this->_internal_mrac_reference_saturation_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mrac_reference_saturation_status());
  }

  // int32 mrac_control_saturation_status = 6;
  if (this->_internal_mrac_control_saturation_status() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mrac_control_saturation_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MracDebug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MracDebug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MracDebug::GetClassData() const { return &_class_data_; }

void MracDebug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MracDebug *>(to)->MergeFrom(
      static_cast<const MracDebug &>(from));
}


void MracDebug::MergeFrom(const MracDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.MracDebug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mrac_reference_state_.MergeFrom(from.mrac_reference_state_);
  mrac_state_error_.MergeFrom(from.mrac_state_error_);
  if (from._internal_has_mrac_adaptive_gain()) {
    _internal_mutable_mrac_adaptive_gain()->::autoagric::control::MracAdaptiveGain::MergeFrom(from._internal_mrac_adaptive_gain());
  }
  if (from._internal_mrac_model_order() != 0) {
    _internal_set_mrac_model_order(from._internal_mrac_model_order());
  }
  if (from._internal_mrac_reference_saturation_status() != 0) {
    _internal_set_mrac_reference_saturation_status(from._internal_mrac_reference_saturation_status());
  }
  if (from._internal_mrac_control_saturation_status() != 0) {
    _internal_set_mrac_control_saturation_status(from._internal_mrac_control_saturation_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MracDebug::CopyFrom(const MracDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.MracDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MracDebug::IsInitialized() const {
  return true;
}

void MracDebug::InternalSwap(MracDebug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mrac_reference_state_.InternalSwap(&other->mrac_reference_state_);
  mrac_state_error_.InternalSwap(&other->mrac_state_error_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MracDebug, mrac_control_saturation_status_)
      + sizeof(MracDebug::mrac_control_saturation_status_)
      - PROTOBUF_FIELD_OFFSET(MracDebug, mrac_adaptive_gain_)>(
          reinterpret_cast<char*>(&mrac_adaptive_gain_),
          reinterpret_cast<char*>(&other->mrac_adaptive_gain_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MracDebug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[5]);
}

// ===================================================================

class MracAdaptiveGain::_Internal {
 public:
};

MracAdaptiveGain::MracAdaptiveGain(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  state_adaptive_gain_(arena),
  input_adaptive_gain_(arena),
  nonlinear_adaptive_gain_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.MracAdaptiveGain)
}
MracAdaptiveGain::MracAdaptiveGain(const MracAdaptiveGain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_adaptive_gain_(from.state_adaptive_gain_),
      input_adaptive_gain_(from.input_adaptive_gain_),
      nonlinear_adaptive_gain_(from.nonlinear_adaptive_gain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autoagric.control.MracAdaptiveGain)
}

inline void MracAdaptiveGain::SharedCtor() {
}

MracAdaptiveGain::~MracAdaptiveGain() {
  // @@protoc_insertion_point(destructor:autoagric.control.MracAdaptiveGain)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MracAdaptiveGain::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MracAdaptiveGain::ArenaDtor(void* object) {
  MracAdaptiveGain* _this = reinterpret_cast< MracAdaptiveGain* >(object);
  (void)_this;
}
void MracAdaptiveGain::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MracAdaptiveGain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MracAdaptiveGain::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.MracAdaptiveGain)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_adaptive_gain_.Clear();
  input_adaptive_gain_.Clear();
  nonlinear_adaptive_gain_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MracAdaptiveGain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double state_adaptive_gain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_state_adaptive_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_state_adaptive_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double input_adaptive_gain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_input_adaptive_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_input_adaptive_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double nonlinear_adaptive_gain = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_nonlinear_adaptive_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_nonlinear_adaptive_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MracAdaptiveGain::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.MracAdaptiveGain)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double state_adaptive_gain = 1;
  if (this->_internal_state_adaptive_gain_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_state_adaptive_gain(), target);
  }

  // repeated double input_adaptive_gain = 2;
  if (this->_internal_input_adaptive_gain_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_input_adaptive_gain(), target);
  }

  // repeated double nonlinear_adaptive_gain = 3;
  if (this->_internal_nonlinear_adaptive_gain_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_nonlinear_adaptive_gain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.MracAdaptiveGain)
  return target;
}

size_t MracAdaptiveGain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.MracAdaptiveGain)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double state_adaptive_gain = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_state_adaptive_gain_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double input_adaptive_gain = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_input_adaptive_gain_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double nonlinear_adaptive_gain = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_nonlinear_adaptive_gain_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MracAdaptiveGain::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MracAdaptiveGain::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MracAdaptiveGain::GetClassData() const { return &_class_data_; }

void MracAdaptiveGain::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MracAdaptiveGain *>(to)->MergeFrom(
      static_cast<const MracAdaptiveGain &>(from));
}


void MracAdaptiveGain::MergeFrom(const MracAdaptiveGain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.MracAdaptiveGain)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  state_adaptive_gain_.MergeFrom(from.state_adaptive_gain_);
  input_adaptive_gain_.MergeFrom(from.input_adaptive_gain_);
  nonlinear_adaptive_gain_.MergeFrom(from.nonlinear_adaptive_gain_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MracAdaptiveGain::CopyFrom(const MracAdaptiveGain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.MracAdaptiveGain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MracAdaptiveGain::IsInitialized() const {
  return true;
}

void MracAdaptiveGain::InternalSwap(MracAdaptiveGain* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  state_adaptive_gain_.InternalSwap(&other->state_adaptive_gain_);
  input_adaptive_gain_.InternalSwap(&other->input_adaptive_gain_);
  nonlinear_adaptive_gain_.InternalSwap(&other->nonlinear_adaptive_gain_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MracAdaptiveGain::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[6]);
}

// ===================================================================

class Debug::_Internal {
 public:
  static const ::autoagric::control::SimpleLongitudinalDebug& simple_lon_debug(const Debug* msg);
  static const ::autoagric::control::SimpleLateralDebug& simple_lat_debug(const Debug* msg);
  static const ::autoagric::control::SimpleMPCDebug& simple_mpc_debug(const Debug* msg);
};

const ::autoagric::control::SimpleLongitudinalDebug&
Debug::_Internal::simple_lon_debug(const Debug* msg) {
  return *msg->simple_lon_debug_;
}
const ::autoagric::control::SimpleLateralDebug&
Debug::_Internal::simple_lat_debug(const Debug* msg) {
  return *msg->simple_lat_debug_;
}
const ::autoagric::control::SimpleMPCDebug&
Debug::_Internal::simple_mpc_debug(const Debug* msg) {
  return *msg->simple_mpc_debug_;
}
Debug::Debug(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.Debug)
}
Debug::Debug(const Debug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_simple_lon_debug()) {
    simple_lon_debug_ = new ::autoagric::control::SimpleLongitudinalDebug(*from.simple_lon_debug_);
  } else {
    simple_lon_debug_ = nullptr;
  }
  if (from._internal_has_simple_lat_debug()) {
    simple_lat_debug_ = new ::autoagric::control::SimpleLateralDebug(*from.simple_lat_debug_);
  } else {
    simple_lat_debug_ = nullptr;
  }
  if (from._internal_has_simple_mpc_debug()) {
    simple_mpc_debug_ = new ::autoagric::control::SimpleMPCDebug(*from.simple_mpc_debug_);
  } else {
    simple_mpc_debug_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.control.Debug)
}

inline void Debug::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&simple_lon_debug_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&simple_mpc_debug_) -
    reinterpret_cast<char*>(&simple_lon_debug_)) + sizeof(simple_mpc_debug_));
}

Debug::~Debug() {
  // @@protoc_insertion_point(destructor:autoagric.control.Debug)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Debug::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete simple_lon_debug_;
  if (this != internal_default_instance()) delete simple_lat_debug_;
  if (this != internal_default_instance()) delete simple_mpc_debug_;
}

void Debug::ArenaDtor(void* object) {
  Debug* _this = reinterpret_cast< Debug* >(object);
  (void)_this;
}
void Debug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Debug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Debug::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.Debug)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && simple_lon_debug_ != nullptr) {
    delete simple_lon_debug_;
  }
  simple_lon_debug_ = nullptr;
  if (GetArenaForAllocation() == nullptr && simple_lat_debug_ != nullptr) {
    delete simple_lat_debug_;
  }
  simple_lat_debug_ = nullptr;
  if (GetArenaForAllocation() == nullptr && simple_mpc_debug_ != nullptr) {
    delete simple_mpc_debug_;
  }
  simple_mpc_debug_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Debug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.control.SimpleLongitudinalDebug simple_lon_debug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lon_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.SimpleLateralDebug simple_lat_debug = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_lat_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.SimpleMPCDebug simple_mpc_debug = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_simple_mpc_debug(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Debug::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.Debug)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (this->_internal_has_simple_lon_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::simple_lon_debug(this), target, stream);
  }

  // .autoagric.control.SimpleLateralDebug simple_lat_debug = 2;
  if (this->_internal_has_simple_lat_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::simple_lat_debug(this), target, stream);
  }

  // .autoagric.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (this->_internal_has_simple_mpc_debug()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::simple_mpc_debug(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.Debug)
  return target;
}

size_t Debug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.Debug)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.control.SimpleLongitudinalDebug simple_lon_debug = 1;
  if (this->_internal_has_simple_lon_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *simple_lon_debug_);
  }

  // .autoagric.control.SimpleLateralDebug simple_lat_debug = 2;
  if (this->_internal_has_simple_lat_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *simple_lat_debug_);
  }

  // .autoagric.control.SimpleMPCDebug simple_mpc_debug = 4;
  if (this->_internal_has_simple_mpc_debug()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *simple_mpc_debug_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Debug::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Debug::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Debug::GetClassData() const { return &_class_data_; }

void Debug::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Debug *>(to)->MergeFrom(
      static_cast<const Debug &>(from));
}


void Debug::MergeFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.Debug)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_simple_lon_debug()) {
    _internal_mutable_simple_lon_debug()->::autoagric::control::SimpleLongitudinalDebug::MergeFrom(from._internal_simple_lon_debug());
  }
  if (from._internal_has_simple_lat_debug()) {
    _internal_mutable_simple_lat_debug()->::autoagric::control::SimpleLateralDebug::MergeFrom(from._internal_simple_lat_debug());
  }
  if (from._internal_has_simple_mpc_debug()) {
    _internal_mutable_simple_mpc_debug()->::autoagric::control::SimpleMPCDebug::MergeFrom(from._internal_simple_mpc_debug());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Debug::CopyFrom(const Debug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.Debug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug::IsInitialized() const {
  return true;
}

void Debug::InternalSwap(Debug* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Debug, simple_mpc_debug_)
      + sizeof(Debug::simple_mpc_debug_)
      - PROTOBUF_FIELD_OFFSET(Debug, simple_lon_debug_)>(
          reinterpret_cast<char*>(&simple_lon_debug_),
          reinterpret_cast<char*>(&other->simple_lon_debug_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Debug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fcontrol_5fcmd_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::control::LatencyStats* Arena::CreateMaybeMessage< ::autoagric::control::LatencyStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::LatencyStats >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::control::ControlCommand* Arena::CreateMaybeMessage< ::autoagric::control::ControlCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::ControlCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::control::SimpleLongitudinalDebug* Arena::CreateMaybeMessage< ::autoagric::control::SimpleLongitudinalDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::SimpleLongitudinalDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::control::SimpleLateralDebug* Arena::CreateMaybeMessage< ::autoagric::control::SimpleLateralDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::SimpleLateralDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::control::SimpleMPCDebug* Arena::CreateMaybeMessage< ::autoagric::control::SimpleMPCDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::SimpleMPCDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::control::MracDebug* Arena::CreateMaybeMessage< ::autoagric::control::MracDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::MracDebug >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::control::MracAdaptiveGain* Arena::CreateMaybeMessage< ::autoagric::control::MracAdaptiveGain >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::MracAdaptiveGain >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::control::Debug* Arena::CreateMaybeMessage< ::autoagric::control::Debug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::Debug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
