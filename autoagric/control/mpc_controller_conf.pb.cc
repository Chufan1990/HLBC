// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/mpc_controller_conf.proto

#include "autoagric/control/mpc_controller_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace control {
constexpr MPCControllerConf::MPCControllerConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matrix_q_()
  , matrix_r_()
  , matrix_endstate_()
  , ipopt_warm_start_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ipopt_same_structure_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lat_err_gain_scheduler_(nullptr)
  , lon_err_gain_scheduler_(nullptr)
  , heading_err_gain_scheduler_(nullptr)
  , speed_err_gain_scheduler_(nullptr)
  , steer_weight_gain_scheduler_(nullptr)
  , accel_weight_gain_scheduler_(nullptr)
  , steer_rate_weight_gain_scheduler_(nullptr)
  , jerk_weight_gain_scheduler_(nullptr)
  , feedforwardterm_gain_scheduler_(nullptr)
  , calibration_table_(nullptr)
  , brake_pid_conf_(nullptr)
  , ts_(0)
  , cf_(0)
  , cr_(0)
  , mass_fl_(0)
  , mass_fr_(0)
  , mass_rl_(0)
  , mass_rr_(0)
  , eps_(0)
  , cutoff_freq_(0)
  , mean_filter_window_size_(0)
  , max_lateral_acceleration_(0)
  , standstill_acceleration_(0)
  , brake_minimum_action_(0)
  , throttle_minimum_action_(0)
  , max_iteration_(0)
  , enable_mpc_feedforward_compensation_(false)
  , unconstrained_control_diff_limit_(0)
  , latency_time_(0)
  , max_longitudinal_jerk_(0)
  , ipopt_print_level_(0){}
struct MPCControllerConfDefaultTypeInternal {
  constexpr MPCControllerConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MPCControllerConfDefaultTypeInternal() {}
  union {
    MPCControllerConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MPCControllerConfDefaultTypeInternal _MPCControllerConf_default_instance_;
}  // namespace control
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, ts_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, cf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, cr_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, mass_fl_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, mass_fr_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, mass_rl_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, mass_rr_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, eps_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, matrix_q_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, matrix_r_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, cutoff_freq_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, mean_filter_window_size_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, max_lateral_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, standstill_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, brake_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, throttle_minimum_action_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, lat_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, lon_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, heading_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, speed_err_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, steer_weight_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, accel_weight_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, steer_rate_weight_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, jerk_weight_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, feedforwardterm_gain_scheduler_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, calibration_table_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, enable_mpc_feedforward_compensation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, unconstrained_control_diff_limit_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, ipopt_print_level_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, latency_time_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, brake_pid_conf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, ipopt_warm_start_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, ipopt_same_structure_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, max_longitudinal_jerk_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MPCControllerConf, matrix_endstate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::control::MPCControllerConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_MPCControllerConf_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+autoagric/control/mpc_controller_conf."
  "proto\022\021autoagric.control\032)autoagric/cont"
  "rol/calibration_table.proto\032+autoagric/c"
  "ontrol/gain_scheduler_conf.proto\032 autoag"
  "ric/control/pid_conf.proto\"\367\n\n\021MPCContro"
  "llerConf\022\n\n\002ts\030\001 \001(\001\022\n\n\002cf\030\002 \001(\001\022\n\n\002cr\030\003"
  " \001(\001\022\017\n\007mass_fl\030\004 \001(\005\022\017\n\007mass_fr\030\005 \001(\005\022\017"
  "\n\007mass_rl\030\006 \001(\005\022\017\n\007mass_rr\030\007 \001(\005\022\013\n\003eps\030"
  "\010 \001(\001\022\020\n\010matrix_q\030\t \003(\001\022\020\n\010matrix_r\030\n \003("
  "\001\022\023\n\013cutoff_freq\030\013 \001(\005\022\037\n\027mean_filter_wi"
  "ndow_size\030\014 \001(\005\022\025\n\rmax_iteration\030\r \001(\005\022 "
  "\n\030max_lateral_acceleration\030\016 \001(\001\022\037\n\027stan"
  "dstill_acceleration\030\017 \001(\001\022\034\n\024brake_minim"
  "um_action\030\020 \001(\001\022\037\n\027throttle_minimum_acti"
  "on\030\021 \001(\001\022@\n\026lat_err_gain_scheduler\030\022 \001(\013"
  "2 .autoagric.control.GainScheduler\022@\n\026lo"
  "n_err_gain_scheduler\030\023 \001(\0132 .autoagric.c"
  "ontrol.GainScheduler\022D\n\032heading_err_gain"
  "_scheduler\030\024 \001(\0132 .autoagric.control.Gai"
  "nScheduler\022B\n\030speed_err_gain_scheduler\030\025"
  " \001(\0132 .autoagric.control.GainScheduler\022E"
  "\n\033steer_weight_gain_scheduler\030\026 \001(\0132 .au"
  "toagric.control.GainScheduler\022E\n\033accel_w"
  "eight_gain_scheduler\030\027 \001(\0132 .autoagric.c"
  "ontrol.GainScheduler\022J\n steer_rate_weigh"
  "t_gain_scheduler\030\030 \001(\0132 .autoagric.contr"
  "ol.GainScheduler\022D\n\032jerk_weight_gain_sch"
  "eduler\030\031 \001(\0132 .autoagric.control.GainSch"
  "eduler\022H\n\036feedforwardterm_gain_scheduler"
  "\030\032 \001(\0132 .autoagric.control.GainScheduler"
  "\022V\n\021calibration_table\030\033 \001(\0132;.autoagric."
  "control.calibrationtable.ControlCalibrat"
  "ionTable\022+\n#enable_mpc_feedforward_compe"
  "nsation\030\034 \001(\010\022(\n unconstrained_control_d"
  "iff_limit\030\035 \001(\001\022\031\n\021ipopt_print_level\030\036 \001"
  "(\005\022\024\n\014latency_time\030\037 \001(\001\0222\n\016brake_pid_co"
  "nf\030  \001(\0132\032.autoagric.control.PidConf\022\030\n\020"
  "ipopt_warm_start\030! \001(\t\022\034\n\024ipopt_same_str"
  "ucture\030\" \001(\t\022\035\n\025max_longitudinal_jerk\030# "
  "\001(\001\022\027\n\017matrix_endstate\030$ \003(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto_deps[3] = {
  &::descriptor_table_autoagric_2fcontrol_2fcalibration_5ftable_2eproto,
  &::descriptor_table_autoagric_2fcontrol_2fgain_5fscheduler_5fconf_2eproto,
  &::descriptor_table_autoagric_2fcontrol_2fpid_5fconf_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto = {
  false, false, 1596, descriptor_table_protodef_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto, "autoagric/control/mpc_controller_conf.proto", 
  &descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto_once, descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto::offsets,
  file_level_metadata_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto, file_level_enum_descriptors_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto, file_level_service_descriptors_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto_getter() {
  return &descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto(&descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto);
namespace autoagric {
namespace control {

// ===================================================================

class MPCControllerConf::_Internal {
 public:
  static const ::autoagric::control::GainScheduler& lat_err_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& lon_err_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& heading_err_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& speed_err_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& steer_weight_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& accel_weight_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& steer_rate_weight_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& jerk_weight_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::GainScheduler& feedforwardterm_gain_scheduler(const MPCControllerConf* msg);
  static const ::autoagric::control::calibrationtable::ControlCalibrationTable& calibration_table(const MPCControllerConf* msg);
  static const ::autoagric::control::PidConf& brake_pid_conf(const MPCControllerConf* msg);
};

const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::lat_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->lat_err_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::lon_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->lon_err_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::heading_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->heading_err_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::speed_err_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->speed_err_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::steer_weight_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->steer_weight_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::accel_weight_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->accel_weight_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::steer_rate_weight_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->steer_rate_weight_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::jerk_weight_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->jerk_weight_gain_scheduler_;
}
const ::autoagric::control::GainScheduler&
MPCControllerConf::_Internal::feedforwardterm_gain_scheduler(const MPCControllerConf* msg) {
  return *msg->feedforwardterm_gain_scheduler_;
}
const ::autoagric::control::calibrationtable::ControlCalibrationTable&
MPCControllerConf::_Internal::calibration_table(const MPCControllerConf* msg) {
  return *msg->calibration_table_;
}
const ::autoagric::control::PidConf&
MPCControllerConf::_Internal::brake_pid_conf(const MPCControllerConf* msg) {
  return *msg->brake_pid_conf_;
}
void MPCControllerConf::clear_lat_err_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && lat_err_gain_scheduler_ != nullptr) {
    delete lat_err_gain_scheduler_;
  }
  lat_err_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_lon_err_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && lon_err_gain_scheduler_ != nullptr) {
    delete lon_err_gain_scheduler_;
  }
  lon_err_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_heading_err_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && heading_err_gain_scheduler_ != nullptr) {
    delete heading_err_gain_scheduler_;
  }
  heading_err_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_speed_err_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && speed_err_gain_scheduler_ != nullptr) {
    delete speed_err_gain_scheduler_;
  }
  speed_err_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_steer_weight_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && steer_weight_gain_scheduler_ != nullptr) {
    delete steer_weight_gain_scheduler_;
  }
  steer_weight_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_accel_weight_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && accel_weight_gain_scheduler_ != nullptr) {
    delete accel_weight_gain_scheduler_;
  }
  accel_weight_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_steer_rate_weight_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && steer_rate_weight_gain_scheduler_ != nullptr) {
    delete steer_rate_weight_gain_scheduler_;
  }
  steer_rate_weight_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_jerk_weight_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && jerk_weight_gain_scheduler_ != nullptr) {
    delete jerk_weight_gain_scheduler_;
  }
  jerk_weight_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_feedforwardterm_gain_scheduler() {
  if (GetArenaForAllocation() == nullptr && feedforwardterm_gain_scheduler_ != nullptr) {
    delete feedforwardterm_gain_scheduler_;
  }
  feedforwardterm_gain_scheduler_ = nullptr;
}
void MPCControllerConf::clear_calibration_table() {
  if (GetArenaForAllocation() == nullptr && calibration_table_ != nullptr) {
    delete calibration_table_;
  }
  calibration_table_ = nullptr;
}
void MPCControllerConf::clear_brake_pid_conf() {
  if (GetArenaForAllocation() == nullptr && brake_pid_conf_ != nullptr) {
    delete brake_pid_conf_;
  }
  brake_pid_conf_ = nullptr;
}
MPCControllerConf::MPCControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  matrix_q_(arena),
  matrix_r_(arena),
  matrix_endstate_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.MPCControllerConf)
}
MPCControllerConf::MPCControllerConf(const MPCControllerConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matrix_q_(from.matrix_q_),
      matrix_r_(from.matrix_r_),
      matrix_endstate_(from.matrix_endstate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ipopt_warm_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipopt_warm_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipopt_warm_start().empty()) {
    ipopt_warm_start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipopt_warm_start(), 
      GetArenaForAllocation());
  }
  ipopt_same_structure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ipopt_same_structure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ipopt_same_structure().empty()) {
    ipopt_same_structure_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ipopt_same_structure(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_lat_err_gain_scheduler()) {
    lat_err_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.lat_err_gain_scheduler_);
  } else {
    lat_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_lon_err_gain_scheduler()) {
    lon_err_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.lon_err_gain_scheduler_);
  } else {
    lon_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_heading_err_gain_scheduler()) {
    heading_err_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.heading_err_gain_scheduler_);
  } else {
    heading_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_speed_err_gain_scheduler()) {
    speed_err_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.speed_err_gain_scheduler_);
  } else {
    speed_err_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_steer_weight_gain_scheduler()) {
    steer_weight_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.steer_weight_gain_scheduler_);
  } else {
    steer_weight_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_accel_weight_gain_scheduler()) {
    accel_weight_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.accel_weight_gain_scheduler_);
  } else {
    accel_weight_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_steer_rate_weight_gain_scheduler()) {
    steer_rate_weight_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.steer_rate_weight_gain_scheduler_);
  } else {
    steer_rate_weight_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_jerk_weight_gain_scheduler()) {
    jerk_weight_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.jerk_weight_gain_scheduler_);
  } else {
    jerk_weight_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_feedforwardterm_gain_scheduler()) {
    feedforwardterm_gain_scheduler_ = new ::autoagric::control::GainScheduler(*from.feedforwardterm_gain_scheduler_);
  } else {
    feedforwardterm_gain_scheduler_ = nullptr;
  }
  if (from._internal_has_calibration_table()) {
    calibration_table_ = new ::autoagric::control::calibrationtable::ControlCalibrationTable(*from.calibration_table_);
  } else {
    calibration_table_ = nullptr;
  }
  if (from._internal_has_brake_pid_conf()) {
    brake_pid_conf_ = new ::autoagric::control::PidConf(*from.brake_pid_conf_);
  } else {
    brake_pid_conf_ = nullptr;
  }
  ::memcpy(&ts_, &from.ts_,
    static_cast<size_t>(reinterpret_cast<char*>(&ipopt_print_level_) -
    reinterpret_cast<char*>(&ts_)) + sizeof(ipopt_print_level_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.MPCControllerConf)
}

inline void MPCControllerConf::SharedCtor() {
ipopt_warm_start_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipopt_warm_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ipopt_same_structure_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ipopt_same_structure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_err_gain_scheduler_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ipopt_print_level_) -
    reinterpret_cast<char*>(&lat_err_gain_scheduler_)) + sizeof(ipopt_print_level_));
}

MPCControllerConf::~MPCControllerConf() {
  // @@protoc_insertion_point(destructor:autoagric.control.MPCControllerConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MPCControllerConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ipopt_warm_start_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipopt_same_structure_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lat_err_gain_scheduler_;
  if (this != internal_default_instance()) delete lon_err_gain_scheduler_;
  if (this != internal_default_instance()) delete heading_err_gain_scheduler_;
  if (this != internal_default_instance()) delete speed_err_gain_scheduler_;
  if (this != internal_default_instance()) delete steer_weight_gain_scheduler_;
  if (this != internal_default_instance()) delete accel_weight_gain_scheduler_;
  if (this != internal_default_instance()) delete steer_rate_weight_gain_scheduler_;
  if (this != internal_default_instance()) delete jerk_weight_gain_scheduler_;
  if (this != internal_default_instance()) delete feedforwardterm_gain_scheduler_;
  if (this != internal_default_instance()) delete calibration_table_;
  if (this != internal_default_instance()) delete brake_pid_conf_;
}

void MPCControllerConf::ArenaDtor(void* object) {
  MPCControllerConf* _this = reinterpret_cast< MPCControllerConf* >(object);
  (void)_this;
}
void MPCControllerConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MPCControllerConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MPCControllerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.MPCControllerConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matrix_q_.Clear();
  matrix_r_.Clear();
  matrix_endstate_.Clear();
  ipopt_warm_start_.ClearToEmpty();
  ipopt_same_structure_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && lat_err_gain_scheduler_ != nullptr) {
    delete lat_err_gain_scheduler_;
  }
  lat_err_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && lon_err_gain_scheduler_ != nullptr) {
    delete lon_err_gain_scheduler_;
  }
  lon_err_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && heading_err_gain_scheduler_ != nullptr) {
    delete heading_err_gain_scheduler_;
  }
  heading_err_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && speed_err_gain_scheduler_ != nullptr) {
    delete speed_err_gain_scheduler_;
  }
  speed_err_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && steer_weight_gain_scheduler_ != nullptr) {
    delete steer_weight_gain_scheduler_;
  }
  steer_weight_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && accel_weight_gain_scheduler_ != nullptr) {
    delete accel_weight_gain_scheduler_;
  }
  accel_weight_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && steer_rate_weight_gain_scheduler_ != nullptr) {
    delete steer_rate_weight_gain_scheduler_;
  }
  steer_rate_weight_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && jerk_weight_gain_scheduler_ != nullptr) {
    delete jerk_weight_gain_scheduler_;
  }
  jerk_weight_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && feedforwardterm_gain_scheduler_ != nullptr) {
    delete feedforwardterm_gain_scheduler_;
  }
  feedforwardterm_gain_scheduler_ = nullptr;
  if (GetArenaForAllocation() == nullptr && calibration_table_ != nullptr) {
    delete calibration_table_;
  }
  calibration_table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && brake_pid_conf_ != nullptr) {
    delete brake_pid_conf_;
  }
  brake_pid_conf_ = nullptr;
  ::memset(&ts_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ipopt_print_level_) -
      reinterpret_cast<char*>(&ts_)) + sizeof(ipopt_print_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MPCControllerConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double ts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          cf_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          cr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_fl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          mass_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_fr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          mass_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_rl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          mass_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mass_rr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          mass_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double eps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          eps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_q = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_q(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 73) {
          _internal_add_matrix_q(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_r = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_r(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 81) {
          _internal_add_matrix_r(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 cutoff_freq = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          cutoff_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mean_filter_window_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          mean_filter_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_iteration = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_lateral_acceleration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          max_lateral_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double standstill_acceleration = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          standstill_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double brake_minimum_action = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          brake_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double throttle_minimum_action = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          throttle_minimum_action_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler lat_err_gain_scheduler = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_lat_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler lon_err_gain_scheduler = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_lon_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler heading_err_gain_scheduler = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_heading_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler speed_err_gain_scheduler = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_speed_err_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler steer_weight_gain_scheduler = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_weight_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler accel_weight_gain_scheduler = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_accel_weight_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler steer_rate_weight_gain_scheduler = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_steer_rate_weight_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler jerk_weight_gain_scheduler = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_jerk_weight_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.GainScheduler feedforwardterm_gain_scheduler = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_feedforwardterm_gain_scheduler(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.calibrationtable.ControlCalibrationTable calibration_table = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_calibration_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_mpc_feedforward_compensation = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          enable_mpc_feedforward_compensation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double unconstrained_control_diff_limit = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          unconstrained_control_diff_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 ipopt_print_level = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          ipopt_print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double latency_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          latency_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.control.PidConf brake_pid_conf = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_pid_conf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ipopt_warm_start = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ipopt_warm_start();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.control.MPCControllerConf.ipopt_warm_start"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ipopt_same_structure = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ipopt_same_structure();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.control.MPCControllerConf.ipopt_same_structure"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_longitudinal_jerk = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          max_longitudinal_jerk_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double matrix_endstate = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_matrix_endstate(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_matrix_endstate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MPCControllerConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.MPCControllerConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double ts = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ts = this->_internal_ts();
  uint64_t raw_ts;
  memcpy(&raw_ts, &tmp_ts, sizeof(tmp_ts));
  if (raw_ts != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ts(), target);
  }

  // double cf = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cf = this->_internal_cf();
  uint64_t raw_cf;
  memcpy(&raw_cf, &tmp_cf, sizeof(tmp_cf));
  if (raw_cf != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_cf(), target);
  }

  // double cr = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cr = this->_internal_cr();
  uint64_t raw_cr;
  memcpy(&raw_cr, &tmp_cr, sizeof(tmp_cr));
  if (raw_cr != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_cr(), target);
  }

  // int32 mass_fl = 4;
  if (this->_internal_mass_fl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_mass_fl(), target);
  }

  // int32 mass_fr = 5;
  if (this->_internal_mass_fr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mass_fr(), target);
  }

  // int32 mass_rl = 6;
  if (this->_internal_mass_rl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_mass_rl(), target);
  }

  // int32 mass_rr = 7;
  if (this->_internal_mass_rr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_mass_rr(), target);
  }

  // double eps = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps = this->_internal_eps();
  uint64_t raw_eps;
  memcpy(&raw_eps, &tmp_eps, sizeof(tmp_eps));
  if (raw_eps != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_eps(), target);
  }

  // repeated double matrix_q = 9;
  if (this->_internal_matrix_q_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_matrix_q(), target);
  }

  // repeated double matrix_r = 10;
  if (this->_internal_matrix_r_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_matrix_r(), target);
  }

  // int32 cutoff_freq = 11;
  if (this->_internal_cutoff_freq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_cutoff_freq(), target);
  }

  // int32 mean_filter_window_size = 12;
  if (this->_internal_mean_filter_window_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_mean_filter_window_size(), target);
  }

  // int32 max_iteration = 13;
  if (this->_internal_max_iteration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_iteration(), target);
  }

  // double max_lateral_acceleration = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_acceleration = this->_internal_max_lateral_acceleration();
  uint64_t raw_max_lateral_acceleration;
  memcpy(&raw_max_lateral_acceleration, &tmp_max_lateral_acceleration, sizeof(tmp_max_lateral_acceleration));
  if (raw_max_lateral_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_lateral_acceleration(), target);
  }

  // double standstill_acceleration = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standstill_acceleration = this->_internal_standstill_acceleration();
  uint64_t raw_standstill_acceleration;
  memcpy(&raw_standstill_acceleration, &tmp_standstill_acceleration, sizeof(tmp_standstill_acceleration));
  if (raw_standstill_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_standstill_acceleration(), target);
  }

  // double brake_minimum_action = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_minimum_action = this->_internal_brake_minimum_action();
  uint64_t raw_brake_minimum_action;
  memcpy(&raw_brake_minimum_action, &tmp_brake_minimum_action, sizeof(tmp_brake_minimum_action));
  if (raw_brake_minimum_action != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_brake_minimum_action(), target);
  }

  // double throttle_minimum_action = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_minimum_action = this->_internal_throttle_minimum_action();
  uint64_t raw_throttle_minimum_action;
  memcpy(&raw_throttle_minimum_action, &tmp_throttle_minimum_action, sizeof(tmp_throttle_minimum_action));
  if (raw_throttle_minimum_action != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_throttle_minimum_action(), target);
  }

  // .autoagric.control.GainScheduler lat_err_gain_scheduler = 18;
  if (this->_internal_has_lat_err_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::lat_err_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler lon_err_gain_scheduler = 19;
  if (this->_internal_has_lon_err_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::lon_err_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler heading_err_gain_scheduler = 20;
  if (this->_internal_has_heading_err_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::heading_err_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler speed_err_gain_scheduler = 21;
  if (this->_internal_has_speed_err_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::speed_err_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler steer_weight_gain_scheduler = 22;
  if (this->_internal_has_steer_weight_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::steer_weight_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler accel_weight_gain_scheduler = 23;
  if (this->_internal_has_accel_weight_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::accel_weight_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler steer_rate_weight_gain_scheduler = 24;
  if (this->_internal_has_steer_rate_weight_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::steer_rate_weight_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler jerk_weight_gain_scheduler = 25;
  if (this->_internal_has_jerk_weight_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::jerk_weight_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.GainScheduler feedforwardterm_gain_scheduler = 26;
  if (this->_internal_has_feedforwardterm_gain_scheduler()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::feedforwardterm_gain_scheduler(this), target, stream);
  }

  // .autoagric.control.calibrationtable.ControlCalibrationTable calibration_table = 27;
  if (this->_internal_has_calibration_table()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::calibration_table(this), target, stream);
  }

  // bool enable_mpc_feedforward_compensation = 28;
  if (this->_internal_enable_mpc_feedforward_compensation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_enable_mpc_feedforward_compensation(), target);
  }

  // double unconstrained_control_diff_limit = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_unconstrained_control_diff_limit = this->_internal_unconstrained_control_diff_limit();
  uint64_t raw_unconstrained_control_diff_limit;
  memcpy(&raw_unconstrained_control_diff_limit, &tmp_unconstrained_control_diff_limit, sizeof(tmp_unconstrained_control_diff_limit));
  if (raw_unconstrained_control_diff_limit != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_unconstrained_control_diff_limit(), target);
  }

  // int32 ipopt_print_level = 30;
  if (this->_internal_ipopt_print_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_ipopt_print_level(), target);
  }

  // double latency_time = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_time = this->_internal_latency_time();
  uint64_t raw_latency_time;
  memcpy(&raw_latency_time, &tmp_latency_time, sizeof(tmp_latency_time));
  if (raw_latency_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(31, this->_internal_latency_time(), target);
  }

  // .autoagric.control.PidConf brake_pid_conf = 32;
  if (this->_internal_has_brake_pid_conf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::brake_pid_conf(this), target, stream);
  }

  // string ipopt_warm_start = 33;
  if (!this->_internal_ipopt_warm_start().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipopt_warm_start().data(), static_cast<int>(this->_internal_ipopt_warm_start().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.control.MPCControllerConf.ipopt_warm_start");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_ipopt_warm_start(), target);
  }

  // string ipopt_same_structure = 34;
  if (!this->_internal_ipopt_same_structure().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ipopt_same_structure().data(), static_cast<int>(this->_internal_ipopt_same_structure().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.control.MPCControllerConf.ipopt_same_structure");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_ipopt_same_structure(), target);
  }

  // double max_longitudinal_jerk = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_longitudinal_jerk = this->_internal_max_longitudinal_jerk();
  uint64_t raw_max_longitudinal_jerk;
  memcpy(&raw_max_longitudinal_jerk, &tmp_max_longitudinal_jerk, sizeof(tmp_max_longitudinal_jerk));
  if (raw_max_longitudinal_jerk != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_max_longitudinal_jerk(), target);
  }

  // repeated double matrix_endstate = 36;
  if (this->_internal_matrix_endstate_size() > 0) {
    target = stream->WriteFixedPacked(36, _internal_matrix_endstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.MPCControllerConf)
  return target;
}

size_t MPCControllerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.MPCControllerConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double matrix_q = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_q_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double matrix_r = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_r_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double matrix_endstate = 36;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_matrix_endstate_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string ipopt_warm_start = 33;
  if (!this->_internal_ipopt_warm_start().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipopt_warm_start());
  }

  // string ipopt_same_structure = 34;
  if (!this->_internal_ipopt_same_structure().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ipopt_same_structure());
  }

  // .autoagric.control.GainScheduler lat_err_gain_scheduler = 18;
  if (this->_internal_has_lat_err_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lat_err_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler lon_err_gain_scheduler = 19;
  if (this->_internal_has_lon_err_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lon_err_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler heading_err_gain_scheduler = 20;
  if (this->_internal_has_heading_err_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heading_err_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler speed_err_gain_scheduler = 21;
  if (this->_internal_has_speed_err_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_err_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler steer_weight_gain_scheduler = 22;
  if (this->_internal_has_steer_weight_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steer_weight_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler accel_weight_gain_scheduler = 23;
  if (this->_internal_has_accel_weight_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_weight_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler steer_rate_weight_gain_scheduler = 24;
  if (this->_internal_has_steer_rate_weight_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steer_rate_weight_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler jerk_weight_gain_scheduler = 25;
  if (this->_internal_has_jerk_weight_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jerk_weight_gain_scheduler_);
  }

  // .autoagric.control.GainScheduler feedforwardterm_gain_scheduler = 26;
  if (this->_internal_has_feedforwardterm_gain_scheduler()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feedforwardterm_gain_scheduler_);
  }

  // .autoagric.control.calibrationtable.ControlCalibrationTable calibration_table = 27;
  if (this->_internal_has_calibration_table()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *calibration_table_);
  }

  // .autoagric.control.PidConf brake_pid_conf = 32;
  if (this->_internal_has_brake_pid_conf()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brake_pid_conf_);
  }

  // double ts = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ts = this->_internal_ts();
  uint64_t raw_ts;
  memcpy(&raw_ts, &tmp_ts, sizeof(tmp_ts));
  if (raw_ts != 0) {
    total_size += 1 + 8;
  }

  // double cf = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cf = this->_internal_cf();
  uint64_t raw_cf;
  memcpy(&raw_cf, &tmp_cf, sizeof(tmp_cf));
  if (raw_cf != 0) {
    total_size += 1 + 8;
  }

  // double cr = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cr = this->_internal_cr();
  uint64_t raw_cr;
  memcpy(&raw_cr, &tmp_cr, sizeof(tmp_cr));
  if (raw_cr != 0) {
    total_size += 1 + 8;
  }

  // int32 mass_fl = 4;
  if (this->_internal_mass_fl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_fl());
  }

  // int32 mass_fr = 5;
  if (this->_internal_mass_fr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_fr());
  }

  // int32 mass_rl = 6;
  if (this->_internal_mass_rl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_rl());
  }

  // int32 mass_rr = 7;
  if (this->_internal_mass_rr() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mass_rr());
  }

  // double eps = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps = this->_internal_eps();
  uint64_t raw_eps;
  memcpy(&raw_eps, &tmp_eps, sizeof(tmp_eps));
  if (raw_eps != 0) {
    total_size += 1 + 8;
  }

  // int32 cutoff_freq = 11;
  if (this->_internal_cutoff_freq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cutoff_freq());
  }

  // int32 mean_filter_window_size = 12;
  if (this->_internal_mean_filter_window_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mean_filter_window_size());
  }

  // double max_lateral_acceleration = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_acceleration = this->_internal_max_lateral_acceleration();
  uint64_t raw_max_lateral_acceleration;
  memcpy(&raw_max_lateral_acceleration, &tmp_max_lateral_acceleration, sizeof(tmp_max_lateral_acceleration));
  if (raw_max_lateral_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double standstill_acceleration = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standstill_acceleration = this->_internal_standstill_acceleration();
  uint64_t raw_standstill_acceleration;
  memcpy(&raw_standstill_acceleration, &tmp_standstill_acceleration, sizeof(tmp_standstill_acceleration));
  if (raw_standstill_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double brake_minimum_action = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_minimum_action = this->_internal_brake_minimum_action();
  uint64_t raw_brake_minimum_action;
  memcpy(&raw_brake_minimum_action, &tmp_brake_minimum_action, sizeof(tmp_brake_minimum_action));
  if (raw_brake_minimum_action != 0) {
    total_size += 2 + 8;
  }

  // double throttle_minimum_action = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_minimum_action = this->_internal_throttle_minimum_action();
  uint64_t raw_throttle_minimum_action;
  memcpy(&raw_throttle_minimum_action, &tmp_throttle_minimum_action, sizeof(tmp_throttle_minimum_action));
  if (raw_throttle_minimum_action != 0) {
    total_size += 2 + 8;
  }

  // int32 max_iteration = 13;
  if (this->_internal_max_iteration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_iteration());
  }

  // bool enable_mpc_feedforward_compensation = 28;
  if (this->_internal_enable_mpc_feedforward_compensation() != 0) {
    total_size += 2 + 1;
  }

  // double unconstrained_control_diff_limit = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_unconstrained_control_diff_limit = this->_internal_unconstrained_control_diff_limit();
  uint64_t raw_unconstrained_control_diff_limit;
  memcpy(&raw_unconstrained_control_diff_limit, &tmp_unconstrained_control_diff_limit, sizeof(tmp_unconstrained_control_diff_limit));
  if (raw_unconstrained_control_diff_limit != 0) {
    total_size += 2 + 8;
  }

  // double latency_time = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_time = this->_internal_latency_time();
  uint64_t raw_latency_time;
  memcpy(&raw_latency_time, &tmp_latency_time, sizeof(tmp_latency_time));
  if (raw_latency_time != 0) {
    total_size += 2 + 8;
  }

  // double max_longitudinal_jerk = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_longitudinal_jerk = this->_internal_max_longitudinal_jerk();
  uint64_t raw_max_longitudinal_jerk;
  memcpy(&raw_max_longitudinal_jerk, &tmp_max_longitudinal_jerk, sizeof(tmp_max_longitudinal_jerk));
  if (raw_max_longitudinal_jerk != 0) {
    total_size += 2 + 8;
  }

  // int32 ipopt_print_level = 30;
  if (this->_internal_ipopt_print_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ipopt_print_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MPCControllerConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MPCControllerConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MPCControllerConf::GetClassData() const { return &_class_data_; }

void MPCControllerConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MPCControllerConf *>(to)->MergeFrom(
      static_cast<const MPCControllerConf &>(from));
}


void MPCControllerConf::MergeFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.MPCControllerConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  matrix_q_.MergeFrom(from.matrix_q_);
  matrix_r_.MergeFrom(from.matrix_r_);
  matrix_endstate_.MergeFrom(from.matrix_endstate_);
  if (!from._internal_ipopt_warm_start().empty()) {
    _internal_set_ipopt_warm_start(from._internal_ipopt_warm_start());
  }
  if (!from._internal_ipopt_same_structure().empty()) {
    _internal_set_ipopt_same_structure(from._internal_ipopt_same_structure());
  }
  if (from._internal_has_lat_err_gain_scheduler()) {
    _internal_mutable_lat_err_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_lat_err_gain_scheduler());
  }
  if (from._internal_has_lon_err_gain_scheduler()) {
    _internal_mutable_lon_err_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_lon_err_gain_scheduler());
  }
  if (from._internal_has_heading_err_gain_scheduler()) {
    _internal_mutable_heading_err_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_heading_err_gain_scheduler());
  }
  if (from._internal_has_speed_err_gain_scheduler()) {
    _internal_mutable_speed_err_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_speed_err_gain_scheduler());
  }
  if (from._internal_has_steer_weight_gain_scheduler()) {
    _internal_mutable_steer_weight_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_steer_weight_gain_scheduler());
  }
  if (from._internal_has_accel_weight_gain_scheduler()) {
    _internal_mutable_accel_weight_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_accel_weight_gain_scheduler());
  }
  if (from._internal_has_steer_rate_weight_gain_scheduler()) {
    _internal_mutable_steer_rate_weight_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_steer_rate_weight_gain_scheduler());
  }
  if (from._internal_has_jerk_weight_gain_scheduler()) {
    _internal_mutable_jerk_weight_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_jerk_weight_gain_scheduler());
  }
  if (from._internal_has_feedforwardterm_gain_scheduler()) {
    _internal_mutable_feedforwardterm_gain_scheduler()->::autoagric::control::GainScheduler::MergeFrom(from._internal_feedforwardterm_gain_scheduler());
  }
  if (from._internal_has_calibration_table()) {
    _internal_mutable_calibration_table()->::autoagric::control::calibrationtable::ControlCalibrationTable::MergeFrom(from._internal_calibration_table());
  }
  if (from._internal_has_brake_pid_conf()) {
    _internal_mutable_brake_pid_conf()->::autoagric::control::PidConf::MergeFrom(from._internal_brake_pid_conf());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_ts = from._internal_ts();
  uint64_t raw_ts;
  memcpy(&raw_ts, &tmp_ts, sizeof(tmp_ts));
  if (raw_ts != 0) {
    _internal_set_ts(from._internal_ts());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cf = from._internal_cf();
  uint64_t raw_cf;
  memcpy(&raw_cf, &tmp_cf, sizeof(tmp_cf));
  if (raw_cf != 0) {
    _internal_set_cf(from._internal_cf());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cr = from._internal_cr();
  uint64_t raw_cr;
  memcpy(&raw_cr, &tmp_cr, sizeof(tmp_cr));
  if (raw_cr != 0) {
    _internal_set_cr(from._internal_cr());
  }
  if (from._internal_mass_fl() != 0) {
    _internal_set_mass_fl(from._internal_mass_fl());
  }
  if (from._internal_mass_fr() != 0) {
    _internal_set_mass_fr(from._internal_mass_fr());
  }
  if (from._internal_mass_rl() != 0) {
    _internal_set_mass_rl(from._internal_mass_rl());
  }
  if (from._internal_mass_rr() != 0) {
    _internal_set_mass_rr(from._internal_mass_rr());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_eps = from._internal_eps();
  uint64_t raw_eps;
  memcpy(&raw_eps, &tmp_eps, sizeof(tmp_eps));
  if (raw_eps != 0) {
    _internal_set_eps(from._internal_eps());
  }
  if (from._internal_cutoff_freq() != 0) {
    _internal_set_cutoff_freq(from._internal_cutoff_freq());
  }
  if (from._internal_mean_filter_window_size() != 0) {
    _internal_set_mean_filter_window_size(from._internal_mean_filter_window_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_acceleration = from._internal_max_lateral_acceleration();
  uint64_t raw_max_lateral_acceleration;
  memcpy(&raw_max_lateral_acceleration, &tmp_max_lateral_acceleration, sizeof(tmp_max_lateral_acceleration));
  if (raw_max_lateral_acceleration != 0) {
    _internal_set_max_lateral_acceleration(from._internal_max_lateral_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_standstill_acceleration = from._internal_standstill_acceleration();
  uint64_t raw_standstill_acceleration;
  memcpy(&raw_standstill_acceleration, &tmp_standstill_acceleration, sizeof(tmp_standstill_acceleration));
  if (raw_standstill_acceleration != 0) {
    _internal_set_standstill_acceleration(from._internal_standstill_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_minimum_action = from._internal_brake_minimum_action();
  uint64_t raw_brake_minimum_action;
  memcpy(&raw_brake_minimum_action, &tmp_brake_minimum_action, sizeof(tmp_brake_minimum_action));
  if (raw_brake_minimum_action != 0) {
    _internal_set_brake_minimum_action(from._internal_brake_minimum_action());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_minimum_action = from._internal_throttle_minimum_action();
  uint64_t raw_throttle_minimum_action;
  memcpy(&raw_throttle_minimum_action, &tmp_throttle_minimum_action, sizeof(tmp_throttle_minimum_action));
  if (raw_throttle_minimum_action != 0) {
    _internal_set_throttle_minimum_action(from._internal_throttle_minimum_action());
  }
  if (from._internal_max_iteration() != 0) {
    _internal_set_max_iteration(from._internal_max_iteration());
  }
  if (from._internal_enable_mpc_feedforward_compensation() != 0) {
    _internal_set_enable_mpc_feedforward_compensation(from._internal_enable_mpc_feedforward_compensation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_unconstrained_control_diff_limit = from._internal_unconstrained_control_diff_limit();
  uint64_t raw_unconstrained_control_diff_limit;
  memcpy(&raw_unconstrained_control_diff_limit, &tmp_unconstrained_control_diff_limit, sizeof(tmp_unconstrained_control_diff_limit));
  if (raw_unconstrained_control_diff_limit != 0) {
    _internal_set_unconstrained_control_diff_limit(from._internal_unconstrained_control_diff_limit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latency_time = from._internal_latency_time();
  uint64_t raw_latency_time;
  memcpy(&raw_latency_time, &tmp_latency_time, sizeof(tmp_latency_time));
  if (raw_latency_time != 0) {
    _internal_set_latency_time(from._internal_latency_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_longitudinal_jerk = from._internal_max_longitudinal_jerk();
  uint64_t raw_max_longitudinal_jerk;
  memcpy(&raw_max_longitudinal_jerk, &tmp_max_longitudinal_jerk, sizeof(tmp_max_longitudinal_jerk));
  if (raw_max_longitudinal_jerk != 0) {
    _internal_set_max_longitudinal_jerk(from._internal_max_longitudinal_jerk());
  }
  if (from._internal_ipopt_print_level() != 0) {
    _internal_set_ipopt_print_level(from._internal_ipopt_print_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MPCControllerConf::CopyFrom(const MPCControllerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.MPCControllerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPCControllerConf::IsInitialized() const {
  return true;
}

void MPCControllerConf::InternalSwap(MPCControllerConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  matrix_q_.InternalSwap(&other->matrix_q_);
  matrix_r_.InternalSwap(&other->matrix_r_);
  matrix_endstate_.InternalSwap(&other->matrix_endstate_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipopt_warm_start_, lhs_arena,
      &other->ipopt_warm_start_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ipopt_same_structure_, lhs_arena,
      &other->ipopt_same_structure_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MPCControllerConf, ipopt_print_level_)
      + sizeof(MPCControllerConf::ipopt_print_level_)
      - PROTOBUF_FIELD_OFFSET(MPCControllerConf, lat_err_gain_scheduler_)>(
          reinterpret_cast<char*>(&lat_err_gain_scheduler_),
          reinterpret_cast<char*>(&other->lat_err_gain_scheduler_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MPCControllerConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::control::MPCControllerConf* Arena::CreateMaybeMessage< ::autoagric::control::MPCControllerConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::MPCControllerConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
