// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/mpc_controller_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/control/calibration_table.pb.h"
#include "autoagric/control/gain_scheduler_conf.pb.h"
#include "autoagric/control/pid_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto;
namespace autoagric {
namespace control {
class MPCControllerConf;
struct MPCControllerConfDefaultTypeInternal;
extern MPCControllerConfDefaultTypeInternal _MPCControllerConf_default_instance_;
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::control::MPCControllerConf* Arena::CreateMaybeMessage<::autoagric::control::MPCControllerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace control {

// ===================================================================

class MPCControllerConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.control.MPCControllerConf) */ {
 public:
  inline MPCControllerConf() : MPCControllerConf(nullptr) {}
  ~MPCControllerConf() override;
  explicit constexpr MPCControllerConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MPCControllerConf(const MPCControllerConf& from);
  MPCControllerConf(MPCControllerConf&& from) noexcept
    : MPCControllerConf() {
    *this = ::std::move(from);
  }

  inline MPCControllerConf& operator=(const MPCControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPCControllerConf& operator=(MPCControllerConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MPCControllerConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MPCControllerConf* internal_default_instance() {
    return reinterpret_cast<const MPCControllerConf*>(
               &_MPCControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MPCControllerConf& a, MPCControllerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MPCControllerConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MPCControllerConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MPCControllerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MPCControllerConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MPCControllerConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MPCControllerConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPCControllerConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.control.MPCControllerConf";
  }
  protected:
  explicit MPCControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixQFieldNumber = 9,
    kMatrixRFieldNumber = 10,
    kMatrixEndstateFieldNumber = 36,
    kIpoptWarmStartFieldNumber = 33,
    kIpoptSameStructureFieldNumber = 34,
    kLatErrGainSchedulerFieldNumber = 18,
    kLonErrGainSchedulerFieldNumber = 19,
    kHeadingErrGainSchedulerFieldNumber = 20,
    kSpeedErrGainSchedulerFieldNumber = 21,
    kSteerWeightGainSchedulerFieldNumber = 22,
    kAccelWeightGainSchedulerFieldNumber = 23,
    kSteerRateWeightGainSchedulerFieldNumber = 24,
    kJerkWeightGainSchedulerFieldNumber = 25,
    kFeedforwardtermGainSchedulerFieldNumber = 26,
    kCalibrationTableFieldNumber = 27,
    kBrakePidConfFieldNumber = 32,
    kTsFieldNumber = 1,
    kCfFieldNumber = 2,
    kCrFieldNumber = 3,
    kMassFlFieldNumber = 4,
    kMassFrFieldNumber = 5,
    kMassRlFieldNumber = 6,
    kMassRrFieldNumber = 7,
    kEpsFieldNumber = 8,
    kCutoffFreqFieldNumber = 11,
    kMeanFilterWindowSizeFieldNumber = 12,
    kMaxLateralAccelerationFieldNumber = 14,
    kStandstillAccelerationFieldNumber = 15,
    kBrakeMinimumActionFieldNumber = 16,
    kThrottleMinimumActionFieldNumber = 17,
    kMaxIterationFieldNumber = 13,
    kEnableMpcFeedforwardCompensationFieldNumber = 28,
    kUnconstrainedControlDiffLimitFieldNumber = 29,
    kLatencyTimeFieldNumber = 31,
    kMaxLongitudinalJerkFieldNumber = 35,
    kIpoptPrintLevelFieldNumber = 30,
  };
  // repeated double matrix_q = 9;
  int matrix_q_size() const;
  private:
  int _internal_matrix_q_size() const;
  public:
  void clear_matrix_q();
  private:
  double _internal_matrix_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_q() const;
  void _internal_add_matrix_q(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_q();
  public:
  double matrix_q(int index) const;
  void set_matrix_q(int index, double value);
  void add_matrix_q(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_q();

  // repeated double matrix_r = 10;
  int matrix_r_size() const;
  private:
  int _internal_matrix_r_size() const;
  public:
  void clear_matrix_r();
  private:
  double _internal_matrix_r(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_r() const;
  void _internal_add_matrix_r(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_r();
  public:
  double matrix_r(int index) const;
  void set_matrix_r(int index, double value);
  void add_matrix_r(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_r() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_r();

  // repeated double matrix_endstate = 36;
  int matrix_endstate_size() const;
  private:
  int _internal_matrix_endstate_size() const;
  public:
  void clear_matrix_endstate();
  private:
  double _internal_matrix_endstate(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_endstate() const;
  void _internal_add_matrix_endstate(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_endstate();
  public:
  double matrix_endstate(int index) const;
  void set_matrix_endstate(int index, double value);
  void add_matrix_endstate(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_endstate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_endstate();

  // string ipopt_warm_start = 33;
  void clear_ipopt_warm_start();
  const std::string& ipopt_warm_start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipopt_warm_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipopt_warm_start();
  PROTOBUF_NODISCARD std::string* release_ipopt_warm_start();
  void set_allocated_ipopt_warm_start(std::string* ipopt_warm_start);
  private:
  const std::string& _internal_ipopt_warm_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipopt_warm_start(const std::string& value);
  std::string* _internal_mutable_ipopt_warm_start();
  public:

  // string ipopt_same_structure = 34;
  void clear_ipopt_same_structure();
  const std::string& ipopt_same_structure() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipopt_same_structure(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipopt_same_structure();
  PROTOBUF_NODISCARD std::string* release_ipopt_same_structure();
  void set_allocated_ipopt_same_structure(std::string* ipopt_same_structure);
  private:
  const std::string& _internal_ipopt_same_structure() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipopt_same_structure(const std::string& value);
  std::string* _internal_mutable_ipopt_same_structure();
  public:

  // .autoagric.control.GainScheduler lat_err_gain_scheduler = 18;
  bool has_lat_err_gain_scheduler() const;
  private:
  bool _internal_has_lat_err_gain_scheduler() const;
  public:
  void clear_lat_err_gain_scheduler();
  const ::autoagric::control::GainScheduler& lat_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_lat_err_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_lat_err_gain_scheduler();
  void set_allocated_lat_err_gain_scheduler(::autoagric::control::GainScheduler* lat_err_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_lat_err_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_lat_err_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_lat_err_gain_scheduler(
      ::autoagric::control::GainScheduler* lat_err_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_lat_err_gain_scheduler();

  // .autoagric.control.GainScheduler lon_err_gain_scheduler = 19;
  bool has_lon_err_gain_scheduler() const;
  private:
  bool _internal_has_lon_err_gain_scheduler() const;
  public:
  void clear_lon_err_gain_scheduler();
  const ::autoagric::control::GainScheduler& lon_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_lon_err_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_lon_err_gain_scheduler();
  void set_allocated_lon_err_gain_scheduler(::autoagric::control::GainScheduler* lon_err_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_lon_err_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_lon_err_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_lon_err_gain_scheduler(
      ::autoagric::control::GainScheduler* lon_err_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_lon_err_gain_scheduler();

  // .autoagric.control.GainScheduler heading_err_gain_scheduler = 20;
  bool has_heading_err_gain_scheduler() const;
  private:
  bool _internal_has_heading_err_gain_scheduler() const;
  public:
  void clear_heading_err_gain_scheduler();
  const ::autoagric::control::GainScheduler& heading_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_heading_err_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_heading_err_gain_scheduler();
  void set_allocated_heading_err_gain_scheduler(::autoagric::control::GainScheduler* heading_err_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_heading_err_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_heading_err_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_heading_err_gain_scheduler(
      ::autoagric::control::GainScheduler* heading_err_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_heading_err_gain_scheduler();

  // .autoagric.control.GainScheduler speed_err_gain_scheduler = 21;
  bool has_speed_err_gain_scheduler() const;
  private:
  bool _internal_has_speed_err_gain_scheduler() const;
  public:
  void clear_speed_err_gain_scheduler();
  const ::autoagric::control::GainScheduler& speed_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_speed_err_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_speed_err_gain_scheduler();
  void set_allocated_speed_err_gain_scheduler(::autoagric::control::GainScheduler* speed_err_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_speed_err_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_speed_err_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_speed_err_gain_scheduler(
      ::autoagric::control::GainScheduler* speed_err_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_speed_err_gain_scheduler();

  // .autoagric.control.GainScheduler steer_weight_gain_scheduler = 22;
  bool has_steer_weight_gain_scheduler() const;
  private:
  bool _internal_has_steer_weight_gain_scheduler() const;
  public:
  void clear_steer_weight_gain_scheduler();
  const ::autoagric::control::GainScheduler& steer_weight_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_steer_weight_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_steer_weight_gain_scheduler();
  void set_allocated_steer_weight_gain_scheduler(::autoagric::control::GainScheduler* steer_weight_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_steer_weight_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_steer_weight_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_steer_weight_gain_scheduler(
      ::autoagric::control::GainScheduler* steer_weight_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_steer_weight_gain_scheduler();

  // .autoagric.control.GainScheduler accel_weight_gain_scheduler = 23;
  bool has_accel_weight_gain_scheduler() const;
  private:
  bool _internal_has_accel_weight_gain_scheduler() const;
  public:
  void clear_accel_weight_gain_scheduler();
  const ::autoagric::control::GainScheduler& accel_weight_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_accel_weight_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_accel_weight_gain_scheduler();
  void set_allocated_accel_weight_gain_scheduler(::autoagric::control::GainScheduler* accel_weight_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_accel_weight_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_accel_weight_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_accel_weight_gain_scheduler(
      ::autoagric::control::GainScheduler* accel_weight_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_accel_weight_gain_scheduler();

  // .autoagric.control.GainScheduler steer_rate_weight_gain_scheduler = 24;
  bool has_steer_rate_weight_gain_scheduler() const;
  private:
  bool _internal_has_steer_rate_weight_gain_scheduler() const;
  public:
  void clear_steer_rate_weight_gain_scheduler();
  const ::autoagric::control::GainScheduler& steer_rate_weight_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_steer_rate_weight_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_steer_rate_weight_gain_scheduler();
  void set_allocated_steer_rate_weight_gain_scheduler(::autoagric::control::GainScheduler* steer_rate_weight_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_steer_rate_weight_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_steer_rate_weight_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_steer_rate_weight_gain_scheduler(
      ::autoagric::control::GainScheduler* steer_rate_weight_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_steer_rate_weight_gain_scheduler();

  // .autoagric.control.GainScheduler jerk_weight_gain_scheduler = 25;
  bool has_jerk_weight_gain_scheduler() const;
  private:
  bool _internal_has_jerk_weight_gain_scheduler() const;
  public:
  void clear_jerk_weight_gain_scheduler();
  const ::autoagric::control::GainScheduler& jerk_weight_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_jerk_weight_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_jerk_weight_gain_scheduler();
  void set_allocated_jerk_weight_gain_scheduler(::autoagric::control::GainScheduler* jerk_weight_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_jerk_weight_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_jerk_weight_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_jerk_weight_gain_scheduler(
      ::autoagric::control::GainScheduler* jerk_weight_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_jerk_weight_gain_scheduler();

  // .autoagric.control.GainScheduler feedforwardterm_gain_scheduler = 26;
  bool has_feedforwardterm_gain_scheduler() const;
  private:
  bool _internal_has_feedforwardterm_gain_scheduler() const;
  public:
  void clear_feedforwardterm_gain_scheduler();
  const ::autoagric::control::GainScheduler& feedforwardterm_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_feedforwardterm_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_feedforwardterm_gain_scheduler();
  void set_allocated_feedforwardterm_gain_scheduler(::autoagric::control::GainScheduler* feedforwardterm_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_feedforwardterm_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_feedforwardterm_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_feedforwardterm_gain_scheduler(
      ::autoagric::control::GainScheduler* feedforwardterm_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_feedforwardterm_gain_scheduler();

  // .autoagric.control.calibrationtable.ControlCalibrationTable calibration_table = 27;
  bool has_calibration_table() const;
  private:
  bool _internal_has_calibration_table() const;
  public:
  void clear_calibration_table();
  const ::autoagric::control::calibrationtable::ControlCalibrationTable& calibration_table() const;
  PROTOBUF_NODISCARD ::autoagric::control::calibrationtable::ControlCalibrationTable* release_calibration_table();
  ::autoagric::control::calibrationtable::ControlCalibrationTable* mutable_calibration_table();
  void set_allocated_calibration_table(::autoagric::control::calibrationtable::ControlCalibrationTable* calibration_table);
  private:
  const ::autoagric::control::calibrationtable::ControlCalibrationTable& _internal_calibration_table() const;
  ::autoagric::control::calibrationtable::ControlCalibrationTable* _internal_mutable_calibration_table();
  public:
  void unsafe_arena_set_allocated_calibration_table(
      ::autoagric::control::calibrationtable::ControlCalibrationTable* calibration_table);
  ::autoagric::control::calibrationtable::ControlCalibrationTable* unsafe_arena_release_calibration_table();

  // .autoagric.control.PidConf brake_pid_conf = 32;
  bool has_brake_pid_conf() const;
  private:
  bool _internal_has_brake_pid_conf() const;
  public:
  void clear_brake_pid_conf();
  const ::autoagric::control::PidConf& brake_pid_conf() const;
  PROTOBUF_NODISCARD ::autoagric::control::PidConf* release_brake_pid_conf();
  ::autoagric::control::PidConf* mutable_brake_pid_conf();
  void set_allocated_brake_pid_conf(::autoagric::control::PidConf* brake_pid_conf);
  private:
  const ::autoagric::control::PidConf& _internal_brake_pid_conf() const;
  ::autoagric::control::PidConf* _internal_mutable_brake_pid_conf();
  public:
  void unsafe_arena_set_allocated_brake_pid_conf(
      ::autoagric::control::PidConf* brake_pid_conf);
  ::autoagric::control::PidConf* unsafe_arena_release_brake_pid_conf();

  // double ts = 1;
  void clear_ts();
  double ts() const;
  void set_ts(double value);
  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);
  public:

  // double cf = 2;
  void clear_cf();
  double cf() const;
  void set_cf(double value);
  private:
  double _internal_cf() const;
  void _internal_set_cf(double value);
  public:

  // double cr = 3;
  void clear_cr();
  double cr() const;
  void set_cr(double value);
  private:
  double _internal_cr() const;
  void _internal_set_cr(double value);
  public:

  // int32 mass_fl = 4;
  void clear_mass_fl();
  int32_t mass_fl() const;
  void set_mass_fl(int32_t value);
  private:
  int32_t _internal_mass_fl() const;
  void _internal_set_mass_fl(int32_t value);
  public:

  // int32 mass_fr = 5;
  void clear_mass_fr();
  int32_t mass_fr() const;
  void set_mass_fr(int32_t value);
  private:
  int32_t _internal_mass_fr() const;
  void _internal_set_mass_fr(int32_t value);
  public:

  // int32 mass_rl = 6;
  void clear_mass_rl();
  int32_t mass_rl() const;
  void set_mass_rl(int32_t value);
  private:
  int32_t _internal_mass_rl() const;
  void _internal_set_mass_rl(int32_t value);
  public:

  // int32 mass_rr = 7;
  void clear_mass_rr();
  int32_t mass_rr() const;
  void set_mass_rr(int32_t value);
  private:
  int32_t _internal_mass_rr() const;
  void _internal_set_mass_rr(int32_t value);
  public:

  // double eps = 8;
  void clear_eps();
  double eps() const;
  void set_eps(double value);
  private:
  double _internal_eps() const;
  void _internal_set_eps(double value);
  public:

  // int32 cutoff_freq = 11;
  void clear_cutoff_freq();
  int32_t cutoff_freq() const;
  void set_cutoff_freq(int32_t value);
  private:
  int32_t _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(int32_t value);
  public:

  // int32 mean_filter_window_size = 12;
  void clear_mean_filter_window_size();
  int32_t mean_filter_window_size() const;
  void set_mean_filter_window_size(int32_t value);
  private:
  int32_t _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(int32_t value);
  public:

  // double max_lateral_acceleration = 14;
  void clear_max_lateral_acceleration();
  double max_lateral_acceleration() const;
  void set_max_lateral_acceleration(double value);
  private:
  double _internal_max_lateral_acceleration() const;
  void _internal_set_max_lateral_acceleration(double value);
  public:

  // double standstill_acceleration = 15;
  void clear_standstill_acceleration();
  double standstill_acceleration() const;
  void set_standstill_acceleration(double value);
  private:
  double _internal_standstill_acceleration() const;
  void _internal_set_standstill_acceleration(double value);
  public:

  // double brake_minimum_action = 16;
  void clear_brake_minimum_action();
  double brake_minimum_action() const;
  void set_brake_minimum_action(double value);
  private:
  double _internal_brake_minimum_action() const;
  void _internal_set_brake_minimum_action(double value);
  public:

  // double throttle_minimum_action = 17;
  void clear_throttle_minimum_action();
  double throttle_minimum_action() const;
  void set_throttle_minimum_action(double value);
  private:
  double _internal_throttle_minimum_action() const;
  void _internal_set_throttle_minimum_action(double value);
  public:

  // int32 max_iteration = 13;
  void clear_max_iteration();
  int32_t max_iteration() const;
  void set_max_iteration(int32_t value);
  private:
  int32_t _internal_max_iteration() const;
  void _internal_set_max_iteration(int32_t value);
  public:

  // bool enable_mpc_feedforward_compensation = 28;
  void clear_enable_mpc_feedforward_compensation();
  bool enable_mpc_feedforward_compensation() const;
  void set_enable_mpc_feedforward_compensation(bool value);
  private:
  bool _internal_enable_mpc_feedforward_compensation() const;
  void _internal_set_enable_mpc_feedforward_compensation(bool value);
  public:

  // double unconstrained_control_diff_limit = 29;
  void clear_unconstrained_control_diff_limit();
  double unconstrained_control_diff_limit() const;
  void set_unconstrained_control_diff_limit(double value);
  private:
  double _internal_unconstrained_control_diff_limit() const;
  void _internal_set_unconstrained_control_diff_limit(double value);
  public:

  // double latency_time = 31;
  void clear_latency_time();
  double latency_time() const;
  void set_latency_time(double value);
  private:
  double _internal_latency_time() const;
  void _internal_set_latency_time(double value);
  public:

  // double max_longitudinal_jerk = 35;
  void clear_max_longitudinal_jerk();
  double max_longitudinal_jerk() const;
  void set_max_longitudinal_jerk(double value);
  private:
  double _internal_max_longitudinal_jerk() const;
  void _internal_set_max_longitudinal_jerk(double value);
  public:

  // int32 ipopt_print_level = 30;
  void clear_ipopt_print_level();
  int32_t ipopt_print_level() const;
  void set_ipopt_print_level(int32_t value);
  private:
  int32_t _internal_ipopt_print_level() const;
  void _internal_set_ipopt_print_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.control.MPCControllerConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_q_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_r_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_endstate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_warm_start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipopt_same_structure_;
  ::autoagric::control::GainScheduler* lat_err_gain_scheduler_;
  ::autoagric::control::GainScheduler* lon_err_gain_scheduler_;
  ::autoagric::control::GainScheduler* heading_err_gain_scheduler_;
  ::autoagric::control::GainScheduler* speed_err_gain_scheduler_;
  ::autoagric::control::GainScheduler* steer_weight_gain_scheduler_;
  ::autoagric::control::GainScheduler* accel_weight_gain_scheduler_;
  ::autoagric::control::GainScheduler* steer_rate_weight_gain_scheduler_;
  ::autoagric::control::GainScheduler* jerk_weight_gain_scheduler_;
  ::autoagric::control::GainScheduler* feedforwardterm_gain_scheduler_;
  ::autoagric::control::calibrationtable::ControlCalibrationTable* calibration_table_;
  ::autoagric::control::PidConf* brake_pid_conf_;
  double ts_;
  double cf_;
  double cr_;
  int32_t mass_fl_;
  int32_t mass_fr_;
  int32_t mass_rl_;
  int32_t mass_rr_;
  double eps_;
  int32_t cutoff_freq_;
  int32_t mean_filter_window_size_;
  double max_lateral_acceleration_;
  double standstill_acceleration_;
  double brake_minimum_action_;
  double throttle_minimum_action_;
  int32_t max_iteration_;
  bool enable_mpc_feedforward_compensation_;
  double unconstrained_control_diff_limit_;
  double latency_time_;
  double max_longitudinal_jerk_;
  int32_t ipopt_print_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MPCControllerConf

// double ts = 1;
inline void MPCControllerConf::clear_ts() {
  ts_ = 0;
}
inline double MPCControllerConf::_internal_ts() const {
  return ts_;
}
inline double MPCControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.ts)
  return _internal_ts();
}
inline void MPCControllerConf::_internal_set_ts(double value) {
  
  ts_ = value;
}
inline void MPCControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.ts)
}

// double cf = 2;
inline void MPCControllerConf::clear_cf() {
  cf_ = 0;
}
inline double MPCControllerConf::_internal_cf() const {
  return cf_;
}
inline double MPCControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.cf)
  return _internal_cf();
}
inline void MPCControllerConf::_internal_set_cf(double value) {
  
  cf_ = value;
}
inline void MPCControllerConf::set_cf(double value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.cf)
}

// double cr = 3;
inline void MPCControllerConf::clear_cr() {
  cr_ = 0;
}
inline double MPCControllerConf::_internal_cr() const {
  return cr_;
}
inline double MPCControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.cr)
  return _internal_cr();
}
inline void MPCControllerConf::_internal_set_cr(double value) {
  
  cr_ = value;
}
inline void MPCControllerConf::set_cr(double value) {
  _internal_set_cr(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.cr)
}

// int32 mass_fl = 4;
inline void MPCControllerConf::clear_mass_fl() {
  mass_fl_ = 0;
}
inline int32_t MPCControllerConf::_internal_mass_fl() const {
  return mass_fl_;
}
inline int32_t MPCControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.mass_fl)
  return _internal_mass_fl();
}
inline void MPCControllerConf::_internal_set_mass_fl(int32_t value) {
  
  mass_fl_ = value;
}
inline void MPCControllerConf::set_mass_fl(int32_t value) {
  _internal_set_mass_fl(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.mass_fl)
}

// int32 mass_fr = 5;
inline void MPCControllerConf::clear_mass_fr() {
  mass_fr_ = 0;
}
inline int32_t MPCControllerConf::_internal_mass_fr() const {
  return mass_fr_;
}
inline int32_t MPCControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.mass_fr)
  return _internal_mass_fr();
}
inline void MPCControllerConf::_internal_set_mass_fr(int32_t value) {
  
  mass_fr_ = value;
}
inline void MPCControllerConf::set_mass_fr(int32_t value) {
  _internal_set_mass_fr(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.mass_fr)
}

// int32 mass_rl = 6;
inline void MPCControllerConf::clear_mass_rl() {
  mass_rl_ = 0;
}
inline int32_t MPCControllerConf::_internal_mass_rl() const {
  return mass_rl_;
}
inline int32_t MPCControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.mass_rl)
  return _internal_mass_rl();
}
inline void MPCControllerConf::_internal_set_mass_rl(int32_t value) {
  
  mass_rl_ = value;
}
inline void MPCControllerConf::set_mass_rl(int32_t value) {
  _internal_set_mass_rl(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.mass_rl)
}

// int32 mass_rr = 7;
inline void MPCControllerConf::clear_mass_rr() {
  mass_rr_ = 0;
}
inline int32_t MPCControllerConf::_internal_mass_rr() const {
  return mass_rr_;
}
inline int32_t MPCControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.mass_rr)
  return _internal_mass_rr();
}
inline void MPCControllerConf::_internal_set_mass_rr(int32_t value) {
  
  mass_rr_ = value;
}
inline void MPCControllerConf::set_mass_rr(int32_t value) {
  _internal_set_mass_rr(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.mass_rr)
}

// double eps = 8;
inline void MPCControllerConf::clear_eps() {
  eps_ = 0;
}
inline double MPCControllerConf::_internal_eps() const {
  return eps_;
}
inline double MPCControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.eps)
  return _internal_eps();
}
inline void MPCControllerConf::_internal_set_eps(double value) {
  
  eps_ = value;
}
inline void MPCControllerConf::set_eps(double value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.eps)
}

// repeated double matrix_q = 9;
inline int MPCControllerConf::_internal_matrix_q_size() const {
  return matrix_q_.size();
}
inline int MPCControllerConf::matrix_q_size() const {
  return _internal_matrix_q_size();
}
inline void MPCControllerConf::clear_matrix_q() {
  matrix_q_.Clear();
}
inline double MPCControllerConf::_internal_matrix_q(int index) const {
  return matrix_q_.Get(index);
}
inline double MPCControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.matrix_q)
  return _internal_matrix_q(index);
}
inline void MPCControllerConf::set_matrix_q(int index, double value) {
  matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.matrix_q)
}
inline void MPCControllerConf::_internal_add_matrix_q(double value) {
  matrix_q_.Add(value);
}
inline void MPCControllerConf::add_matrix_q(double value) {
  _internal_add_matrix_q(value);
  // @@protoc_insertion_point(field_add:autoagric.control.MPCControllerConf.matrix_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::_internal_matrix_q() const {
  return matrix_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::matrix_q() const {
  // @@protoc_insertion_point(field_list:autoagric.control.MPCControllerConf.matrix_q)
  return _internal_matrix_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::_internal_mutable_matrix_q() {
  return &matrix_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::mutable_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.MPCControllerConf.matrix_q)
  return _internal_mutable_matrix_q();
}

// repeated double matrix_r = 10;
inline int MPCControllerConf::_internal_matrix_r_size() const {
  return matrix_r_.size();
}
inline int MPCControllerConf::matrix_r_size() const {
  return _internal_matrix_r_size();
}
inline void MPCControllerConf::clear_matrix_r() {
  matrix_r_.Clear();
}
inline double MPCControllerConf::_internal_matrix_r(int index) const {
  return matrix_r_.Get(index);
}
inline double MPCControllerConf::matrix_r(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.matrix_r)
  return _internal_matrix_r(index);
}
inline void MPCControllerConf::set_matrix_r(int index, double value) {
  matrix_r_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.matrix_r)
}
inline void MPCControllerConf::_internal_add_matrix_r(double value) {
  matrix_r_.Add(value);
}
inline void MPCControllerConf::add_matrix_r(double value) {
  _internal_add_matrix_r(value);
  // @@protoc_insertion_point(field_add:autoagric.control.MPCControllerConf.matrix_r)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::_internal_matrix_r() const {
  return matrix_r_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::matrix_r() const {
  // @@protoc_insertion_point(field_list:autoagric.control.MPCControllerConf.matrix_r)
  return _internal_matrix_r();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::_internal_mutable_matrix_r() {
  return &matrix_r_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::mutable_matrix_r() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.MPCControllerConf.matrix_r)
  return _internal_mutable_matrix_r();
}

// int32 cutoff_freq = 11;
inline void MPCControllerConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
}
inline int32_t MPCControllerConf::_internal_cutoff_freq() const {
  return cutoff_freq_;
}
inline int32_t MPCControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void MPCControllerConf::_internal_set_cutoff_freq(int32_t value) {
  
  cutoff_freq_ = value;
}
inline void MPCControllerConf::set_cutoff_freq(int32_t value) {
  _internal_set_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.cutoff_freq)
}

// int32 mean_filter_window_size = 12;
inline void MPCControllerConf::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 0;
}
inline int32_t MPCControllerConf::_internal_mean_filter_window_size() const {
  return mean_filter_window_size_;
}
inline int32_t MPCControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void MPCControllerConf::_internal_set_mean_filter_window_size(int32_t value) {
  
  mean_filter_window_size_ = value;
}
inline void MPCControllerConf::set_mean_filter_window_size(int32_t value) {
  _internal_set_mean_filter_window_size(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.mean_filter_window_size)
}

// int32 max_iteration = 13;
inline void MPCControllerConf::clear_max_iteration() {
  max_iteration_ = 0;
}
inline int32_t MPCControllerConf::_internal_max_iteration() const {
  return max_iteration_;
}
inline int32_t MPCControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.max_iteration)
  return _internal_max_iteration();
}
inline void MPCControllerConf::_internal_set_max_iteration(int32_t value) {
  
  max_iteration_ = value;
}
inline void MPCControllerConf::set_max_iteration(int32_t value) {
  _internal_set_max_iteration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.max_iteration)
}

// double max_lateral_acceleration = 14;
inline void MPCControllerConf::clear_max_lateral_acceleration() {
  max_lateral_acceleration_ = 0;
}
inline double MPCControllerConf::_internal_max_lateral_acceleration() const {
  return max_lateral_acceleration_;
}
inline double MPCControllerConf::max_lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.max_lateral_acceleration)
  return _internal_max_lateral_acceleration();
}
inline void MPCControllerConf::_internal_set_max_lateral_acceleration(double value) {
  
  max_lateral_acceleration_ = value;
}
inline void MPCControllerConf::set_max_lateral_acceleration(double value) {
  _internal_set_max_lateral_acceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.max_lateral_acceleration)
}

// double standstill_acceleration = 15;
inline void MPCControllerConf::clear_standstill_acceleration() {
  standstill_acceleration_ = 0;
}
inline double MPCControllerConf::_internal_standstill_acceleration() const {
  return standstill_acceleration_;
}
inline double MPCControllerConf::standstill_acceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.standstill_acceleration)
  return _internal_standstill_acceleration();
}
inline void MPCControllerConf::_internal_set_standstill_acceleration(double value) {
  
  standstill_acceleration_ = value;
}
inline void MPCControllerConf::set_standstill_acceleration(double value) {
  _internal_set_standstill_acceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.standstill_acceleration)
}

// double brake_minimum_action = 16;
inline void MPCControllerConf::clear_brake_minimum_action() {
  brake_minimum_action_ = 0;
}
inline double MPCControllerConf::_internal_brake_minimum_action() const {
  return brake_minimum_action_;
}
inline double MPCControllerConf::brake_minimum_action() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.brake_minimum_action)
  return _internal_brake_minimum_action();
}
inline void MPCControllerConf::_internal_set_brake_minimum_action(double value) {
  
  brake_minimum_action_ = value;
}
inline void MPCControllerConf::set_brake_minimum_action(double value) {
  _internal_set_brake_minimum_action(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.brake_minimum_action)
}

// double throttle_minimum_action = 17;
inline void MPCControllerConf::clear_throttle_minimum_action() {
  throttle_minimum_action_ = 0;
}
inline double MPCControllerConf::_internal_throttle_minimum_action() const {
  return throttle_minimum_action_;
}
inline double MPCControllerConf::throttle_minimum_action() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.throttle_minimum_action)
  return _internal_throttle_minimum_action();
}
inline void MPCControllerConf::_internal_set_throttle_minimum_action(double value) {
  
  throttle_minimum_action_ = value;
}
inline void MPCControllerConf::set_throttle_minimum_action(double value) {
  _internal_set_throttle_minimum_action(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.throttle_minimum_action)
}

// .autoagric.control.GainScheduler lat_err_gain_scheduler = 18;
inline bool MPCControllerConf::_internal_has_lat_err_gain_scheduler() const {
  return this != internal_default_instance() && lat_err_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_lat_err_gain_scheduler() const {
  return _internal_has_lat_err_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_lat_err_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = lat_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::lat_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.lat_err_gain_scheduler)
  return _internal_lat_err_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_lat_err_gain_scheduler(
    ::autoagric::control::GainScheduler* lat_err_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_err_gain_scheduler_);
  }
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  if (lat_err_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.lat_err_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_lat_err_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_lat_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.lat_err_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_lat_err_gain_scheduler() {
  
  if (lat_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    lat_err_gain_scheduler_ = p;
  }
  return lat_err_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_lat_err_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_lat_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.lat_err_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_lat_err_gain_scheduler(::autoagric::control::GainScheduler* lat_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_err_gain_scheduler_);
  }
  if (lat_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_err_gain_scheduler));
    if (message_arena != submessage_arena) {
      lat_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_err_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.lat_err_gain_scheduler)
}

// .autoagric.control.GainScheduler lon_err_gain_scheduler = 19;
inline bool MPCControllerConf::_internal_has_lon_err_gain_scheduler() const {
  return this != internal_default_instance() && lon_err_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_lon_err_gain_scheduler() const {
  return _internal_has_lon_err_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_lon_err_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = lon_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::lon_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.lon_err_gain_scheduler)
  return _internal_lon_err_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_lon_err_gain_scheduler(
    ::autoagric::control::GainScheduler* lon_err_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_err_gain_scheduler_);
  }
  lon_err_gain_scheduler_ = lon_err_gain_scheduler;
  if (lon_err_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.lon_err_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_lon_err_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = lon_err_gain_scheduler_;
  lon_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_lon_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.lon_err_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = lon_err_gain_scheduler_;
  lon_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_lon_err_gain_scheduler() {
  
  if (lon_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    lon_err_gain_scheduler_ = p;
  }
  return lon_err_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_lon_err_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_lon_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.lon_err_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_lon_err_gain_scheduler(::autoagric::control::GainScheduler* lon_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_err_gain_scheduler_);
  }
  if (lon_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_err_gain_scheduler));
    if (message_arena != submessage_arena) {
      lon_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon_err_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  lon_err_gain_scheduler_ = lon_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.lon_err_gain_scheduler)
}

// .autoagric.control.GainScheduler heading_err_gain_scheduler = 20;
inline bool MPCControllerConf::_internal_has_heading_err_gain_scheduler() const {
  return this != internal_default_instance() && heading_err_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_heading_err_gain_scheduler() const {
  return _internal_has_heading_err_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_heading_err_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = heading_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::heading_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.heading_err_gain_scheduler)
  return _internal_heading_err_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_heading_err_gain_scheduler(
    ::autoagric::control::GainScheduler* heading_err_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_err_gain_scheduler_);
  }
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  if (heading_err_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.heading_err_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_heading_err_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_heading_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.heading_err_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_heading_err_gain_scheduler() {
  
  if (heading_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    heading_err_gain_scheduler_ = p;
  }
  return heading_err_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_heading_err_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_heading_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.heading_err_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_heading_err_gain_scheduler(::autoagric::control::GainScheduler* heading_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_err_gain_scheduler_);
  }
  if (heading_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_err_gain_scheduler));
    if (message_arena != submessage_arena) {
      heading_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading_err_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.heading_err_gain_scheduler)
}

// .autoagric.control.GainScheduler speed_err_gain_scheduler = 21;
inline bool MPCControllerConf::_internal_has_speed_err_gain_scheduler() const {
  return this != internal_default_instance() && speed_err_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_speed_err_gain_scheduler() const {
  return _internal_has_speed_err_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_speed_err_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = speed_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::speed_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.speed_err_gain_scheduler)
  return _internal_speed_err_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_speed_err_gain_scheduler(
    ::autoagric::control::GainScheduler* speed_err_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_err_gain_scheduler_);
  }
  speed_err_gain_scheduler_ = speed_err_gain_scheduler;
  if (speed_err_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.speed_err_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_speed_err_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = speed_err_gain_scheduler_;
  speed_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_speed_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.speed_err_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = speed_err_gain_scheduler_;
  speed_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_speed_err_gain_scheduler() {
  
  if (speed_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    speed_err_gain_scheduler_ = p;
  }
  return speed_err_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_speed_err_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_speed_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.speed_err_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_speed_err_gain_scheduler(::autoagric::control::GainScheduler* speed_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_err_gain_scheduler_);
  }
  if (speed_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_err_gain_scheduler));
    if (message_arena != submessage_arena) {
      speed_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_err_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  speed_err_gain_scheduler_ = speed_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.speed_err_gain_scheduler)
}

// .autoagric.control.GainScheduler steer_weight_gain_scheduler = 22;
inline bool MPCControllerConf::_internal_has_steer_weight_gain_scheduler() const {
  return this != internal_default_instance() && steer_weight_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_steer_weight_gain_scheduler() const {
  return _internal_has_steer_weight_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_steer_weight_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = steer_weight_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::steer_weight_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.steer_weight_gain_scheduler)
  return _internal_steer_weight_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_steer_weight_gain_scheduler(
    ::autoagric::control::GainScheduler* steer_weight_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_weight_gain_scheduler_);
  }
  steer_weight_gain_scheduler_ = steer_weight_gain_scheduler;
  if (steer_weight_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.steer_weight_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_steer_weight_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_steer_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.steer_weight_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = steer_weight_gain_scheduler_;
  steer_weight_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_steer_weight_gain_scheduler() {
  
  if (steer_weight_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    steer_weight_gain_scheduler_ = p;
  }
  return steer_weight_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_steer_weight_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_steer_weight_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.steer_weight_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_steer_weight_gain_scheduler(::autoagric::control::GainScheduler* steer_weight_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_weight_gain_scheduler_);
  }
  if (steer_weight_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_weight_gain_scheduler));
    if (message_arena != submessage_arena) {
      steer_weight_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_weight_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  steer_weight_gain_scheduler_ = steer_weight_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.steer_weight_gain_scheduler)
}

// .autoagric.control.GainScheduler accel_weight_gain_scheduler = 23;
inline bool MPCControllerConf::_internal_has_accel_weight_gain_scheduler() const {
  return this != internal_default_instance() && accel_weight_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_accel_weight_gain_scheduler() const {
  return _internal_has_accel_weight_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_accel_weight_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = accel_weight_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::accel_weight_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.accel_weight_gain_scheduler)
  return _internal_accel_weight_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_accel_weight_gain_scheduler(
    ::autoagric::control::GainScheduler* accel_weight_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_weight_gain_scheduler_);
  }
  accel_weight_gain_scheduler_ = accel_weight_gain_scheduler;
  if (accel_weight_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.accel_weight_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_accel_weight_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = accel_weight_gain_scheduler_;
  accel_weight_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_accel_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.accel_weight_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = accel_weight_gain_scheduler_;
  accel_weight_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_accel_weight_gain_scheduler() {
  
  if (accel_weight_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    accel_weight_gain_scheduler_ = p;
  }
  return accel_weight_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_accel_weight_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_accel_weight_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.accel_weight_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_accel_weight_gain_scheduler(::autoagric::control::GainScheduler* accel_weight_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_weight_gain_scheduler_);
  }
  if (accel_weight_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_weight_gain_scheduler));
    if (message_arena != submessage_arena) {
      accel_weight_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel_weight_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  accel_weight_gain_scheduler_ = accel_weight_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.accel_weight_gain_scheduler)
}

// .autoagric.control.GainScheduler steer_rate_weight_gain_scheduler = 24;
inline bool MPCControllerConf::_internal_has_steer_rate_weight_gain_scheduler() const {
  return this != internal_default_instance() && steer_rate_weight_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_steer_rate_weight_gain_scheduler() const {
  return _internal_has_steer_rate_weight_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_steer_rate_weight_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = steer_rate_weight_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::steer_rate_weight_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.steer_rate_weight_gain_scheduler)
  return _internal_steer_rate_weight_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_steer_rate_weight_gain_scheduler(
    ::autoagric::control::GainScheduler* steer_rate_weight_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_rate_weight_gain_scheduler_);
  }
  steer_rate_weight_gain_scheduler_ = steer_rate_weight_gain_scheduler;
  if (steer_rate_weight_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.steer_rate_weight_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_steer_rate_weight_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = steer_rate_weight_gain_scheduler_;
  steer_rate_weight_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_steer_rate_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.steer_rate_weight_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = steer_rate_weight_gain_scheduler_;
  steer_rate_weight_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_steer_rate_weight_gain_scheduler() {
  
  if (steer_rate_weight_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    steer_rate_weight_gain_scheduler_ = p;
  }
  return steer_rate_weight_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_steer_rate_weight_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_steer_rate_weight_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.steer_rate_weight_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_steer_rate_weight_gain_scheduler(::autoagric::control::GainScheduler* steer_rate_weight_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_rate_weight_gain_scheduler_);
  }
  if (steer_rate_weight_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_rate_weight_gain_scheduler));
    if (message_arena != submessage_arena) {
      steer_rate_weight_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_rate_weight_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  steer_rate_weight_gain_scheduler_ = steer_rate_weight_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.steer_rate_weight_gain_scheduler)
}

// .autoagric.control.GainScheduler jerk_weight_gain_scheduler = 25;
inline bool MPCControllerConf::_internal_has_jerk_weight_gain_scheduler() const {
  return this != internal_default_instance() && jerk_weight_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_jerk_weight_gain_scheduler() const {
  return _internal_has_jerk_weight_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_jerk_weight_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = jerk_weight_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::jerk_weight_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.jerk_weight_gain_scheduler)
  return _internal_jerk_weight_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_jerk_weight_gain_scheduler(
    ::autoagric::control::GainScheduler* jerk_weight_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jerk_weight_gain_scheduler_);
  }
  jerk_weight_gain_scheduler_ = jerk_weight_gain_scheduler;
  if (jerk_weight_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.jerk_weight_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_jerk_weight_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = jerk_weight_gain_scheduler_;
  jerk_weight_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_jerk_weight_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.jerk_weight_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = jerk_weight_gain_scheduler_;
  jerk_weight_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_jerk_weight_gain_scheduler() {
  
  if (jerk_weight_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    jerk_weight_gain_scheduler_ = p;
  }
  return jerk_weight_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_jerk_weight_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_jerk_weight_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.jerk_weight_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_jerk_weight_gain_scheduler(::autoagric::control::GainScheduler* jerk_weight_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(jerk_weight_gain_scheduler_);
  }
  if (jerk_weight_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jerk_weight_gain_scheduler));
    if (message_arena != submessage_arena) {
      jerk_weight_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jerk_weight_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  jerk_weight_gain_scheduler_ = jerk_weight_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.jerk_weight_gain_scheduler)
}

// .autoagric.control.GainScheduler feedforwardterm_gain_scheduler = 26;
inline bool MPCControllerConf::_internal_has_feedforwardterm_gain_scheduler() const {
  return this != internal_default_instance() && feedforwardterm_gain_scheduler_ != nullptr;
}
inline bool MPCControllerConf::has_feedforwardterm_gain_scheduler() const {
  return _internal_has_feedforwardterm_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::_internal_feedforwardterm_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = feedforwardterm_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& MPCControllerConf::feedforwardterm_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return _internal_feedforwardterm_gain_scheduler();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_feedforwardterm_gain_scheduler(
    ::autoagric::control::GainScheduler* feedforwardterm_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedforwardterm_gain_scheduler_);
  }
  feedforwardterm_gain_scheduler_ = feedforwardterm_gain_scheduler;
  if (feedforwardterm_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.feedforwardterm_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::release_feedforwardterm_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::unsafe_arena_release_feedforwardterm_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = feedforwardterm_gain_scheduler_;
  feedforwardterm_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::_internal_mutable_feedforwardterm_gain_scheduler() {
  
  if (feedforwardterm_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    feedforwardterm_gain_scheduler_ = p;
  }
  return feedforwardterm_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* MPCControllerConf::mutable_feedforwardterm_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_feedforwardterm_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.feedforwardterm_gain_scheduler)
  return _msg;
}
inline void MPCControllerConf::set_allocated_feedforwardterm_gain_scheduler(::autoagric::control::GainScheduler* feedforwardterm_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedforwardterm_gain_scheduler_);
  }
  if (feedforwardterm_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feedforwardterm_gain_scheduler));
    if (message_arena != submessage_arena) {
      feedforwardterm_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feedforwardterm_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  feedforwardterm_gain_scheduler_ = feedforwardterm_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.feedforwardterm_gain_scheduler)
}

// .autoagric.control.calibrationtable.ControlCalibrationTable calibration_table = 27;
inline bool MPCControllerConf::_internal_has_calibration_table() const {
  return this != internal_default_instance() && calibration_table_ != nullptr;
}
inline bool MPCControllerConf::has_calibration_table() const {
  return _internal_has_calibration_table();
}
inline const ::autoagric::control::calibrationtable::ControlCalibrationTable& MPCControllerConf::_internal_calibration_table() const {
  const ::autoagric::control::calibrationtable::ControlCalibrationTable* p = calibration_table_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::calibrationtable::ControlCalibrationTable&>(
      ::autoagric::control::calibrationtable::_ControlCalibrationTable_default_instance_);
}
inline const ::autoagric::control::calibrationtable::ControlCalibrationTable& MPCControllerConf::calibration_table() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.calibration_table)
  return _internal_calibration_table();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_calibration_table(
    ::autoagric::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_table_);
  }
  calibration_table_ = calibration_table;
  if (calibration_table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.calibration_table)
}
inline ::autoagric::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::release_calibration_table() {
  
  ::autoagric::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::unsafe_arena_release_calibration_table() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.calibration_table)
  
  ::autoagric::control::calibrationtable::ControlCalibrationTable* temp = calibration_table_;
  calibration_table_ = nullptr;
  return temp;
}
inline ::autoagric::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::_internal_mutable_calibration_table() {
  
  if (calibration_table_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::calibrationtable::ControlCalibrationTable>(GetArenaForAllocation());
    calibration_table_ = p;
  }
  return calibration_table_;
}
inline ::autoagric::control::calibrationtable::ControlCalibrationTable* MPCControllerConf::mutable_calibration_table() {
  ::autoagric::control::calibrationtable::ControlCalibrationTable* _msg = _internal_mutable_calibration_table();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.calibration_table)
  return _msg;
}
inline void MPCControllerConf::set_allocated_calibration_table(::autoagric::control::calibrationtable::ControlCalibrationTable* calibration_table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_table_);
  }
  if (calibration_table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calibration_table));
    if (message_arena != submessage_arena) {
      calibration_table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calibration_table, submessage_arena);
    }
    
  } else {
    
  }
  calibration_table_ = calibration_table;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.calibration_table)
}

// bool enable_mpc_feedforward_compensation = 28;
inline void MPCControllerConf::clear_enable_mpc_feedforward_compensation() {
  enable_mpc_feedforward_compensation_ = false;
}
inline bool MPCControllerConf::_internal_enable_mpc_feedforward_compensation() const {
  return enable_mpc_feedforward_compensation_;
}
inline bool MPCControllerConf::enable_mpc_feedforward_compensation() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.enable_mpc_feedforward_compensation)
  return _internal_enable_mpc_feedforward_compensation();
}
inline void MPCControllerConf::_internal_set_enable_mpc_feedforward_compensation(bool value) {
  
  enable_mpc_feedforward_compensation_ = value;
}
inline void MPCControllerConf::set_enable_mpc_feedforward_compensation(bool value) {
  _internal_set_enable_mpc_feedforward_compensation(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.enable_mpc_feedforward_compensation)
}

// double unconstrained_control_diff_limit = 29;
inline void MPCControllerConf::clear_unconstrained_control_diff_limit() {
  unconstrained_control_diff_limit_ = 0;
}
inline double MPCControllerConf::_internal_unconstrained_control_diff_limit() const {
  return unconstrained_control_diff_limit_;
}
inline double MPCControllerConf::unconstrained_control_diff_limit() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.unconstrained_control_diff_limit)
  return _internal_unconstrained_control_diff_limit();
}
inline void MPCControllerConf::_internal_set_unconstrained_control_diff_limit(double value) {
  
  unconstrained_control_diff_limit_ = value;
}
inline void MPCControllerConf::set_unconstrained_control_diff_limit(double value) {
  _internal_set_unconstrained_control_diff_limit(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.unconstrained_control_diff_limit)
}

// int32 ipopt_print_level = 30;
inline void MPCControllerConf::clear_ipopt_print_level() {
  ipopt_print_level_ = 0;
}
inline int32_t MPCControllerConf::_internal_ipopt_print_level() const {
  return ipopt_print_level_;
}
inline int32_t MPCControllerConf::ipopt_print_level() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.ipopt_print_level)
  return _internal_ipopt_print_level();
}
inline void MPCControllerConf::_internal_set_ipopt_print_level(int32_t value) {
  
  ipopt_print_level_ = value;
}
inline void MPCControllerConf::set_ipopt_print_level(int32_t value) {
  _internal_set_ipopt_print_level(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.ipopt_print_level)
}

// double latency_time = 31;
inline void MPCControllerConf::clear_latency_time() {
  latency_time_ = 0;
}
inline double MPCControllerConf::_internal_latency_time() const {
  return latency_time_;
}
inline double MPCControllerConf::latency_time() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.latency_time)
  return _internal_latency_time();
}
inline void MPCControllerConf::_internal_set_latency_time(double value) {
  
  latency_time_ = value;
}
inline void MPCControllerConf::set_latency_time(double value) {
  _internal_set_latency_time(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.latency_time)
}

// .autoagric.control.PidConf brake_pid_conf = 32;
inline bool MPCControllerConf::_internal_has_brake_pid_conf() const {
  return this != internal_default_instance() && brake_pid_conf_ != nullptr;
}
inline bool MPCControllerConf::has_brake_pid_conf() const {
  return _internal_has_brake_pid_conf();
}
inline const ::autoagric::control::PidConf& MPCControllerConf::_internal_brake_pid_conf() const {
  const ::autoagric::control::PidConf* p = brake_pid_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::PidConf&>(
      ::autoagric::control::_PidConf_default_instance_);
}
inline const ::autoagric::control::PidConf& MPCControllerConf::brake_pid_conf() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.brake_pid_conf)
  return _internal_brake_pid_conf();
}
inline void MPCControllerConf::unsafe_arena_set_allocated_brake_pid_conf(
    ::autoagric::control::PidConf* brake_pid_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake_pid_conf_);
  }
  brake_pid_conf_ = brake_pid_conf;
  if (brake_pid_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.MPCControllerConf.brake_pid_conf)
}
inline ::autoagric::control::PidConf* MPCControllerConf::release_brake_pid_conf() {
  
  ::autoagric::control::PidConf* temp = brake_pid_conf_;
  brake_pid_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::PidConf* MPCControllerConf::unsafe_arena_release_brake_pid_conf() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.brake_pid_conf)
  
  ::autoagric::control::PidConf* temp = brake_pid_conf_;
  brake_pid_conf_ = nullptr;
  return temp;
}
inline ::autoagric::control::PidConf* MPCControllerConf::_internal_mutable_brake_pid_conf() {
  
  if (brake_pid_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::PidConf>(GetArenaForAllocation());
    brake_pid_conf_ = p;
  }
  return brake_pid_conf_;
}
inline ::autoagric::control::PidConf* MPCControllerConf::mutable_brake_pid_conf() {
  ::autoagric::control::PidConf* _msg = _internal_mutable_brake_pid_conf();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.brake_pid_conf)
  return _msg;
}
inline void MPCControllerConf::set_allocated_brake_pid_conf(::autoagric::control::PidConf* brake_pid_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake_pid_conf_);
  }
  if (brake_pid_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(brake_pid_conf));
    if (message_arena != submessage_arena) {
      brake_pid_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, brake_pid_conf, submessage_arena);
    }
    
  } else {
    
  }
  brake_pid_conf_ = brake_pid_conf;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.brake_pid_conf)
}

// string ipopt_warm_start = 33;
inline void MPCControllerConf::clear_ipopt_warm_start() {
  ipopt_warm_start_.ClearToEmpty();
}
inline const std::string& MPCControllerConf::ipopt_warm_start() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.ipopt_warm_start)
  return _internal_ipopt_warm_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MPCControllerConf::set_ipopt_warm_start(ArgT0&& arg0, ArgT... args) {
 
 ipopt_warm_start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.ipopt_warm_start)
}
inline std::string* MPCControllerConf::mutable_ipopt_warm_start() {
  std::string* _s = _internal_mutable_ipopt_warm_start();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.ipopt_warm_start)
  return _s;
}
inline const std::string& MPCControllerConf::_internal_ipopt_warm_start() const {
  return ipopt_warm_start_.Get();
}
inline void MPCControllerConf::_internal_set_ipopt_warm_start(const std::string& value) {
  
  ipopt_warm_start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MPCControllerConf::_internal_mutable_ipopt_warm_start() {
  
  return ipopt_warm_start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MPCControllerConf::release_ipopt_warm_start() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.ipopt_warm_start)
  return ipopt_warm_start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MPCControllerConf::set_allocated_ipopt_warm_start(std::string* ipopt_warm_start) {
  if (ipopt_warm_start != nullptr) {
    
  } else {
    
  }
  ipopt_warm_start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_warm_start,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipopt_warm_start_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipopt_warm_start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.ipopt_warm_start)
}

// string ipopt_same_structure = 34;
inline void MPCControllerConf::clear_ipopt_same_structure() {
  ipopt_same_structure_.ClearToEmpty();
}
inline const std::string& MPCControllerConf::ipopt_same_structure() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.ipopt_same_structure)
  return _internal_ipopt_same_structure();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MPCControllerConf::set_ipopt_same_structure(ArgT0&& arg0, ArgT... args) {
 
 ipopt_same_structure_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.ipopt_same_structure)
}
inline std::string* MPCControllerConf::mutable_ipopt_same_structure() {
  std::string* _s = _internal_mutable_ipopt_same_structure();
  // @@protoc_insertion_point(field_mutable:autoagric.control.MPCControllerConf.ipopt_same_structure)
  return _s;
}
inline const std::string& MPCControllerConf::_internal_ipopt_same_structure() const {
  return ipopt_same_structure_.Get();
}
inline void MPCControllerConf::_internal_set_ipopt_same_structure(const std::string& value) {
  
  ipopt_same_structure_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MPCControllerConf::_internal_mutable_ipopt_same_structure() {
  
  return ipopt_same_structure_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MPCControllerConf::release_ipopt_same_structure() {
  // @@protoc_insertion_point(field_release:autoagric.control.MPCControllerConf.ipopt_same_structure)
  return ipopt_same_structure_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MPCControllerConf::set_allocated_ipopt_same_structure(std::string* ipopt_same_structure) {
  if (ipopt_same_structure != nullptr) {
    
  } else {
    
  }
  ipopt_same_structure_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ipopt_same_structure,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ipopt_same_structure_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ipopt_same_structure_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.MPCControllerConf.ipopt_same_structure)
}

// double max_longitudinal_jerk = 35;
inline void MPCControllerConf::clear_max_longitudinal_jerk() {
  max_longitudinal_jerk_ = 0;
}
inline double MPCControllerConf::_internal_max_longitudinal_jerk() const {
  return max_longitudinal_jerk_;
}
inline double MPCControllerConf::max_longitudinal_jerk() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.max_longitudinal_jerk)
  return _internal_max_longitudinal_jerk();
}
inline void MPCControllerConf::_internal_set_max_longitudinal_jerk(double value) {
  
  max_longitudinal_jerk_ = value;
}
inline void MPCControllerConf::set_max_longitudinal_jerk(double value) {
  _internal_set_max_longitudinal_jerk(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.max_longitudinal_jerk)
}

// repeated double matrix_endstate = 36;
inline int MPCControllerConf::_internal_matrix_endstate_size() const {
  return matrix_endstate_.size();
}
inline int MPCControllerConf::matrix_endstate_size() const {
  return _internal_matrix_endstate_size();
}
inline void MPCControllerConf::clear_matrix_endstate() {
  matrix_endstate_.Clear();
}
inline double MPCControllerConf::_internal_matrix_endstate(int index) const {
  return matrix_endstate_.Get(index);
}
inline double MPCControllerConf::matrix_endstate(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.MPCControllerConf.matrix_endstate)
  return _internal_matrix_endstate(index);
}
inline void MPCControllerConf::set_matrix_endstate(int index, double value) {
  matrix_endstate_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.MPCControllerConf.matrix_endstate)
}
inline void MPCControllerConf::_internal_add_matrix_endstate(double value) {
  matrix_endstate_.Add(value);
}
inline void MPCControllerConf::add_matrix_endstate(double value) {
  _internal_add_matrix_endstate(value);
  // @@protoc_insertion_point(field_add:autoagric.control.MPCControllerConf.matrix_endstate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::_internal_matrix_endstate() const {
  return matrix_endstate_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MPCControllerConf::matrix_endstate() const {
  // @@protoc_insertion_point(field_list:autoagric.control.MPCControllerConf.matrix_endstate)
  return _internal_matrix_endstate();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::_internal_mutable_matrix_endstate() {
  return &matrix_endstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MPCControllerConf::mutable_matrix_endstate() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.MPCControllerConf.matrix_endstate)
  return _internal_mutable_matrix_endstate();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fmpc_5fcontroller_5fconf_2eproto
