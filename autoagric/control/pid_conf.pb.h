// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/pid_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fpid_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fpid_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcontrol_2fpid_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcontrol_2fpid_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fpid_5fconf_2eproto;
namespace autoagric {
namespace control {
class PidConf;
struct PidConfDefaultTypeInternal;
extern PidConfDefaultTypeInternal _PidConf_default_instance_;
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::control::PidConf* Arena::CreateMaybeMessage<::autoagric::control::PidConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace control {

// ===================================================================

class PidConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.control.PidConf) */ {
 public:
  inline PidConf() : PidConf(nullptr) {}
  ~PidConf() override;
  explicit constexpr PidConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PidConf(const PidConf& from);
  PidConf(PidConf&& from) noexcept
    : PidConf() {
    *this = ::std::move(from);
  }

  inline PidConf& operator=(const PidConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline PidConf& operator=(PidConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PidConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const PidConf* internal_default_instance() {
    return reinterpret_cast<const PidConf*>(
               &_PidConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PidConf& a, PidConf& b) {
    a.Swap(&b);
  }
  inline void Swap(PidConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PidConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PidConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PidConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PidConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PidConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PidConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.control.PidConf";
  }
  protected:
  explicit PidConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntegratorSaturationLevelFieldNumber = 2,
    kKpFieldNumber = 3,
    kKiFieldNumber = 4,
    kKdFieldNumber = 5,
    kKawFieldNumber = 6,
    kOutputSaturationLevelFieldNumber = 7,
    kIntegratorEnableFieldNumber = 1,
  };
  // double integrator_saturation_level = 2;
  void clear_integrator_saturation_level();
  double integrator_saturation_level() const;
  void set_integrator_saturation_level(double value);
  private:
  double _internal_integrator_saturation_level() const;
  void _internal_set_integrator_saturation_level(double value);
  public:

  // double kp = 3;
  void clear_kp();
  double kp() const;
  void set_kp(double value);
  private:
  double _internal_kp() const;
  void _internal_set_kp(double value);
  public:

  // double ki = 4;
  void clear_ki();
  double ki() const;
  void set_ki(double value);
  private:
  double _internal_ki() const;
  void _internal_set_ki(double value);
  public:

  // double kd = 5;
  void clear_kd();
  double kd() const;
  void set_kd(double value);
  private:
  double _internal_kd() const;
  void _internal_set_kd(double value);
  public:

  // double kaw = 6;
  void clear_kaw();
  double kaw() const;
  void set_kaw(double value);
  private:
  double _internal_kaw() const;
  void _internal_set_kaw(double value);
  public:

  // double output_saturation_level = 7;
  void clear_output_saturation_level();
  double output_saturation_level() const;
  void set_output_saturation_level(double value);
  private:
  double _internal_output_saturation_level() const;
  void _internal_set_output_saturation_level(double value);
  public:

  // bool integrator_enable = 1;
  void clear_integrator_enable();
  bool integrator_enable() const;
  void set_integrator_enable(bool value);
  private:
  bool _internal_integrator_enable() const;
  void _internal_set_integrator_enable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.control.PidConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double integrator_saturation_level_;
  double kp_;
  double ki_;
  double kd_;
  double kaw_;
  double output_saturation_level_;
  bool integrator_enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fcontrol_2fpid_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PidConf

// bool integrator_enable = 1;
inline void PidConf::clear_integrator_enable() {
  integrator_enable_ = false;
}
inline bool PidConf::_internal_integrator_enable() const {
  return integrator_enable_;
}
inline bool PidConf::integrator_enable() const {
  // @@protoc_insertion_point(field_get:autoagric.control.PidConf.integrator_enable)
  return _internal_integrator_enable();
}
inline void PidConf::_internal_set_integrator_enable(bool value) {
  
  integrator_enable_ = value;
}
inline void PidConf::set_integrator_enable(bool value) {
  _internal_set_integrator_enable(value);
  // @@protoc_insertion_point(field_set:autoagric.control.PidConf.integrator_enable)
}

// double integrator_saturation_level = 2;
inline void PidConf::clear_integrator_saturation_level() {
  integrator_saturation_level_ = 0;
}
inline double PidConf::_internal_integrator_saturation_level() const {
  return integrator_saturation_level_;
}
inline double PidConf::integrator_saturation_level() const {
  // @@protoc_insertion_point(field_get:autoagric.control.PidConf.integrator_saturation_level)
  return _internal_integrator_saturation_level();
}
inline void PidConf::_internal_set_integrator_saturation_level(double value) {
  
  integrator_saturation_level_ = value;
}
inline void PidConf::set_integrator_saturation_level(double value) {
  _internal_set_integrator_saturation_level(value);
  // @@protoc_insertion_point(field_set:autoagric.control.PidConf.integrator_saturation_level)
}

// double kp = 3;
inline void PidConf::clear_kp() {
  kp_ = 0;
}
inline double PidConf::_internal_kp() const {
  return kp_;
}
inline double PidConf::kp() const {
  // @@protoc_insertion_point(field_get:autoagric.control.PidConf.kp)
  return _internal_kp();
}
inline void PidConf::_internal_set_kp(double value) {
  
  kp_ = value;
}
inline void PidConf::set_kp(double value) {
  _internal_set_kp(value);
  // @@protoc_insertion_point(field_set:autoagric.control.PidConf.kp)
}

// double ki = 4;
inline void PidConf::clear_ki() {
  ki_ = 0;
}
inline double PidConf::_internal_ki() const {
  return ki_;
}
inline double PidConf::ki() const {
  // @@protoc_insertion_point(field_get:autoagric.control.PidConf.ki)
  return _internal_ki();
}
inline void PidConf::_internal_set_ki(double value) {
  
  ki_ = value;
}
inline void PidConf::set_ki(double value) {
  _internal_set_ki(value);
  // @@protoc_insertion_point(field_set:autoagric.control.PidConf.ki)
}

// double kd = 5;
inline void PidConf::clear_kd() {
  kd_ = 0;
}
inline double PidConf::_internal_kd() const {
  return kd_;
}
inline double PidConf::kd() const {
  // @@protoc_insertion_point(field_get:autoagric.control.PidConf.kd)
  return _internal_kd();
}
inline void PidConf::_internal_set_kd(double value) {
  
  kd_ = value;
}
inline void PidConf::set_kd(double value) {
  _internal_set_kd(value);
  // @@protoc_insertion_point(field_set:autoagric.control.PidConf.kd)
}

// double kaw = 6;
inline void PidConf::clear_kaw() {
  kaw_ = 0;
}
inline double PidConf::_internal_kaw() const {
  return kaw_;
}
inline double PidConf::kaw() const {
  // @@protoc_insertion_point(field_get:autoagric.control.PidConf.kaw)
  return _internal_kaw();
}
inline void PidConf::_internal_set_kaw(double value) {
  
  kaw_ = value;
}
inline void PidConf::set_kaw(double value) {
  _internal_set_kaw(value);
  // @@protoc_insertion_point(field_set:autoagric.control.PidConf.kaw)
}

// double output_saturation_level = 7;
inline void PidConf::clear_output_saturation_level() {
  output_saturation_level_ = 0;
}
inline double PidConf::_internal_output_saturation_level() const {
  return output_saturation_level_;
}
inline double PidConf::output_saturation_level() const {
  // @@protoc_insertion_point(field_get:autoagric.control.PidConf.output_saturation_level)
  return _internal_output_saturation_level();
}
inline void PidConf::_internal_set_output_saturation_level(double value) {
  
  output_saturation_level_ = value;
}
inline void PidConf::set_output_saturation_level(double value) {
  _internal_set_output_saturation_level(value);
  // @@protoc_insertion_point(field_set:autoagric.control.PidConf.output_saturation_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fpid_5fconf_2eproto
