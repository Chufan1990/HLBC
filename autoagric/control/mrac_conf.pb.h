// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/mrac_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fmrac_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fmrac_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcontrol_2fmrac_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcontrol_2fmrac_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto;
namespace autoagric {
namespace control {
class MracConf;
struct MracConfDefaultTypeInternal;
extern MracConfDefaultTypeInternal _MracConf_default_instance_;
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::control::MracConf* Arena::CreateMaybeMessage<::autoagric::control::MracConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace control {

// ===================================================================

class MracConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.control.MracConf) */ {
 public:
  inline MracConf() : MracConf(nullptr) {}
  ~MracConf() override;
  explicit constexpr MracConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MracConf(const MracConf& from);
  MracConf(MracConf&& from) noexcept
    : MracConf() {
    *this = ::std::move(from);
  }

  inline MracConf& operator=(const MracConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MracConf& operator=(MracConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MracConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const MracConf* internal_default_instance() {
    return reinterpret_cast<const MracConf*>(
               &_MracConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MracConf& a, MracConf& b) {
    a.Swap(&b);
  }
  inline void Swap(MracConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MracConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MracConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MracConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MracConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MracConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MracConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.control.MracConf";
  }
  protected:
  explicit MracConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdaptionStateGainFieldNumber = 5,
    kAdaptionMatrixPFieldNumber = 8,
    kAntiWindupCompensationGainFieldNumber = 10,
    kReferenceTimeConstantFieldNumber = 2,
    kReferenceNaturalFrequencyFieldNumber = 3,
    kReferenceDampingRatioFieldNumber = 4,
    kAdaptionDesiredGainFieldNumber = 6,
    kAdaptionNonlinearGainFieldNumber = 7,
    kMracSaturationLevelFieldNumber = 9,
    kClampingTimeConstantFieldNumber = 11,
    kMracModelOrderFieldNumber = 1,
  };
  // repeated double adaption_state_gain = 5;
  int adaption_state_gain_size() const;
  private:
  int _internal_adaption_state_gain_size() const;
  public:
  void clear_adaption_state_gain();
  private:
  double _internal_adaption_state_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_adaption_state_gain() const;
  void _internal_add_adaption_state_gain(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_adaption_state_gain();
  public:
  double adaption_state_gain(int index) const;
  void set_adaption_state_gain(int index, double value);
  void add_adaption_state_gain(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      adaption_state_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_adaption_state_gain();

  // repeated double adaption_matrix_p = 8;
  int adaption_matrix_p_size() const;
  private:
  int _internal_adaption_matrix_p_size() const;
  public:
  void clear_adaption_matrix_p();
  private:
  double _internal_adaption_matrix_p(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_adaption_matrix_p() const;
  void _internal_add_adaption_matrix_p(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_adaption_matrix_p();
  public:
  double adaption_matrix_p(int index) const;
  void set_adaption_matrix_p(int index, double value);
  void add_adaption_matrix_p(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      adaption_matrix_p() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_adaption_matrix_p();

  // repeated double anti_windup_compensation_gain = 10;
  int anti_windup_compensation_gain_size() const;
  private:
  int _internal_anti_windup_compensation_gain_size() const;
  public:
  void clear_anti_windup_compensation_gain();
  private:
  double _internal_anti_windup_compensation_gain(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_anti_windup_compensation_gain() const;
  void _internal_add_anti_windup_compensation_gain(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_anti_windup_compensation_gain();
  public:
  double anti_windup_compensation_gain(int index) const;
  void set_anti_windup_compensation_gain(int index, double value);
  void add_anti_windup_compensation_gain(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      anti_windup_compensation_gain() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_anti_windup_compensation_gain();

  // double reference_time_constant = 2;
  void clear_reference_time_constant();
  double reference_time_constant() const;
  void set_reference_time_constant(double value);
  private:
  double _internal_reference_time_constant() const;
  void _internal_set_reference_time_constant(double value);
  public:

  // double reference_natural_frequency = 3;
  void clear_reference_natural_frequency();
  double reference_natural_frequency() const;
  void set_reference_natural_frequency(double value);
  private:
  double _internal_reference_natural_frequency() const;
  void _internal_set_reference_natural_frequency(double value);
  public:

  // double reference_damping_ratio = 4;
  void clear_reference_damping_ratio();
  double reference_damping_ratio() const;
  void set_reference_damping_ratio(double value);
  private:
  double _internal_reference_damping_ratio() const;
  void _internal_set_reference_damping_ratio(double value);
  public:

  // double adaption_desired_gain = 6;
  void clear_adaption_desired_gain();
  double adaption_desired_gain() const;
  void set_adaption_desired_gain(double value);
  private:
  double _internal_adaption_desired_gain() const;
  void _internal_set_adaption_desired_gain(double value);
  public:

  // double adaption_nonlinear_gain = 7;
  void clear_adaption_nonlinear_gain();
  double adaption_nonlinear_gain() const;
  void set_adaption_nonlinear_gain(double value);
  private:
  double _internal_adaption_nonlinear_gain() const;
  void _internal_set_adaption_nonlinear_gain(double value);
  public:

  // double mrac_saturation_level = 9;
  void clear_mrac_saturation_level();
  double mrac_saturation_level() const;
  void set_mrac_saturation_level(double value);
  private:
  double _internal_mrac_saturation_level() const;
  void _internal_set_mrac_saturation_level(double value);
  public:

  // double clamping_time_constant = 11;
  void clear_clamping_time_constant();
  double clamping_time_constant() const;
  void set_clamping_time_constant(double value);
  private:
  double _internal_clamping_time_constant() const;
  void _internal_set_clamping_time_constant(double value);
  public:

  // int32 mrac_model_order = 1;
  void clear_mrac_model_order();
  int32_t mrac_model_order() const;
  void set_mrac_model_order(int32_t value);
  private:
  int32_t _internal_mrac_model_order() const;
  void _internal_set_mrac_model_order(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.control.MracConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > adaption_state_gain_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > adaption_matrix_p_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > anti_windup_compensation_gain_;
  double reference_time_constant_;
  double reference_natural_frequency_;
  double reference_damping_ratio_;
  double adaption_desired_gain_;
  double adaption_nonlinear_gain_;
  double mrac_saturation_level_;
  double clamping_time_constant_;
  int32_t mrac_model_order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fcontrol_2fmrac_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MracConf

// int32 mrac_model_order = 1;
inline void MracConf::clear_mrac_model_order() {
  mrac_model_order_ = 0;
}
inline int32_t MracConf::_internal_mrac_model_order() const {
  return mrac_model_order_;
}
inline int32_t MracConf::mrac_model_order() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.mrac_model_order)
  return _internal_mrac_model_order();
}
inline void MracConf::_internal_set_mrac_model_order(int32_t value) {
  
  mrac_model_order_ = value;
}
inline void MracConf::set_mrac_model_order(int32_t value) {
  _internal_set_mrac_model_order(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.mrac_model_order)
}

// double reference_time_constant = 2;
inline void MracConf::clear_reference_time_constant() {
  reference_time_constant_ = 0;
}
inline double MracConf::_internal_reference_time_constant() const {
  return reference_time_constant_;
}
inline double MracConf::reference_time_constant() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.reference_time_constant)
  return _internal_reference_time_constant();
}
inline void MracConf::_internal_set_reference_time_constant(double value) {
  
  reference_time_constant_ = value;
}
inline void MracConf::set_reference_time_constant(double value) {
  _internal_set_reference_time_constant(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.reference_time_constant)
}

// double reference_natural_frequency = 3;
inline void MracConf::clear_reference_natural_frequency() {
  reference_natural_frequency_ = 0;
}
inline double MracConf::_internal_reference_natural_frequency() const {
  return reference_natural_frequency_;
}
inline double MracConf::reference_natural_frequency() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.reference_natural_frequency)
  return _internal_reference_natural_frequency();
}
inline void MracConf::_internal_set_reference_natural_frequency(double value) {
  
  reference_natural_frequency_ = value;
}
inline void MracConf::set_reference_natural_frequency(double value) {
  _internal_set_reference_natural_frequency(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.reference_natural_frequency)
}

// double reference_damping_ratio = 4;
inline void MracConf::clear_reference_damping_ratio() {
  reference_damping_ratio_ = 0;
}
inline double MracConf::_internal_reference_damping_ratio() const {
  return reference_damping_ratio_;
}
inline double MracConf::reference_damping_ratio() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.reference_damping_ratio)
  return _internal_reference_damping_ratio();
}
inline void MracConf::_internal_set_reference_damping_ratio(double value) {
  
  reference_damping_ratio_ = value;
}
inline void MracConf::set_reference_damping_ratio(double value) {
  _internal_set_reference_damping_ratio(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.reference_damping_ratio)
}

// repeated double adaption_state_gain = 5;
inline int MracConf::_internal_adaption_state_gain_size() const {
  return adaption_state_gain_.size();
}
inline int MracConf::adaption_state_gain_size() const {
  return _internal_adaption_state_gain_size();
}
inline void MracConf::clear_adaption_state_gain() {
  adaption_state_gain_.Clear();
}
inline double MracConf::_internal_adaption_state_gain(int index) const {
  return adaption_state_gain_.Get(index);
}
inline double MracConf::adaption_state_gain(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.adaption_state_gain)
  return _internal_adaption_state_gain(index);
}
inline void MracConf::set_adaption_state_gain(int index, double value) {
  adaption_state_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.adaption_state_gain)
}
inline void MracConf::_internal_add_adaption_state_gain(double value) {
  adaption_state_gain_.Add(value);
}
inline void MracConf::add_adaption_state_gain(double value) {
  _internal_add_adaption_state_gain(value);
  // @@protoc_insertion_point(field_add:autoagric.control.MracConf.adaption_state_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracConf::_internal_adaption_state_gain() const {
  return adaption_state_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracConf::adaption_state_gain() const {
  // @@protoc_insertion_point(field_list:autoagric.control.MracConf.adaption_state_gain)
  return _internal_adaption_state_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracConf::_internal_mutable_adaption_state_gain() {
  return &adaption_state_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracConf::mutable_adaption_state_gain() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.MracConf.adaption_state_gain)
  return _internal_mutable_adaption_state_gain();
}

// double adaption_desired_gain = 6;
inline void MracConf::clear_adaption_desired_gain() {
  adaption_desired_gain_ = 0;
}
inline double MracConf::_internal_adaption_desired_gain() const {
  return adaption_desired_gain_;
}
inline double MracConf::adaption_desired_gain() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.adaption_desired_gain)
  return _internal_adaption_desired_gain();
}
inline void MracConf::_internal_set_adaption_desired_gain(double value) {
  
  adaption_desired_gain_ = value;
}
inline void MracConf::set_adaption_desired_gain(double value) {
  _internal_set_adaption_desired_gain(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.adaption_desired_gain)
}

// double adaption_nonlinear_gain = 7;
inline void MracConf::clear_adaption_nonlinear_gain() {
  adaption_nonlinear_gain_ = 0;
}
inline double MracConf::_internal_adaption_nonlinear_gain() const {
  return adaption_nonlinear_gain_;
}
inline double MracConf::adaption_nonlinear_gain() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.adaption_nonlinear_gain)
  return _internal_adaption_nonlinear_gain();
}
inline void MracConf::_internal_set_adaption_nonlinear_gain(double value) {
  
  adaption_nonlinear_gain_ = value;
}
inline void MracConf::set_adaption_nonlinear_gain(double value) {
  _internal_set_adaption_nonlinear_gain(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.adaption_nonlinear_gain)
}

// repeated double adaption_matrix_p = 8;
inline int MracConf::_internal_adaption_matrix_p_size() const {
  return adaption_matrix_p_.size();
}
inline int MracConf::adaption_matrix_p_size() const {
  return _internal_adaption_matrix_p_size();
}
inline void MracConf::clear_adaption_matrix_p() {
  adaption_matrix_p_.Clear();
}
inline double MracConf::_internal_adaption_matrix_p(int index) const {
  return adaption_matrix_p_.Get(index);
}
inline double MracConf::adaption_matrix_p(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.adaption_matrix_p)
  return _internal_adaption_matrix_p(index);
}
inline void MracConf::set_adaption_matrix_p(int index, double value) {
  adaption_matrix_p_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.adaption_matrix_p)
}
inline void MracConf::_internal_add_adaption_matrix_p(double value) {
  adaption_matrix_p_.Add(value);
}
inline void MracConf::add_adaption_matrix_p(double value) {
  _internal_add_adaption_matrix_p(value);
  // @@protoc_insertion_point(field_add:autoagric.control.MracConf.adaption_matrix_p)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracConf::_internal_adaption_matrix_p() const {
  return adaption_matrix_p_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracConf::adaption_matrix_p() const {
  // @@protoc_insertion_point(field_list:autoagric.control.MracConf.adaption_matrix_p)
  return _internal_adaption_matrix_p();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracConf::_internal_mutable_adaption_matrix_p() {
  return &adaption_matrix_p_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracConf::mutable_adaption_matrix_p() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.MracConf.adaption_matrix_p)
  return _internal_mutable_adaption_matrix_p();
}

// double mrac_saturation_level = 9;
inline void MracConf::clear_mrac_saturation_level() {
  mrac_saturation_level_ = 0;
}
inline double MracConf::_internal_mrac_saturation_level() const {
  return mrac_saturation_level_;
}
inline double MracConf::mrac_saturation_level() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.mrac_saturation_level)
  return _internal_mrac_saturation_level();
}
inline void MracConf::_internal_set_mrac_saturation_level(double value) {
  
  mrac_saturation_level_ = value;
}
inline void MracConf::set_mrac_saturation_level(double value) {
  _internal_set_mrac_saturation_level(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.mrac_saturation_level)
}

// repeated double anti_windup_compensation_gain = 10;
inline int MracConf::_internal_anti_windup_compensation_gain_size() const {
  return anti_windup_compensation_gain_.size();
}
inline int MracConf::anti_windup_compensation_gain_size() const {
  return _internal_anti_windup_compensation_gain_size();
}
inline void MracConf::clear_anti_windup_compensation_gain() {
  anti_windup_compensation_gain_.Clear();
}
inline double MracConf::_internal_anti_windup_compensation_gain(int index) const {
  return anti_windup_compensation_gain_.Get(index);
}
inline double MracConf::anti_windup_compensation_gain(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.anti_windup_compensation_gain)
  return _internal_anti_windup_compensation_gain(index);
}
inline void MracConf::set_anti_windup_compensation_gain(int index, double value) {
  anti_windup_compensation_gain_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.anti_windup_compensation_gain)
}
inline void MracConf::_internal_add_anti_windup_compensation_gain(double value) {
  anti_windup_compensation_gain_.Add(value);
}
inline void MracConf::add_anti_windup_compensation_gain(double value) {
  _internal_add_anti_windup_compensation_gain(value);
  // @@protoc_insertion_point(field_add:autoagric.control.MracConf.anti_windup_compensation_gain)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracConf::_internal_anti_windup_compensation_gain() const {
  return anti_windup_compensation_gain_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MracConf::anti_windup_compensation_gain() const {
  // @@protoc_insertion_point(field_list:autoagric.control.MracConf.anti_windup_compensation_gain)
  return _internal_anti_windup_compensation_gain();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracConf::_internal_mutable_anti_windup_compensation_gain() {
  return &anti_windup_compensation_gain_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MracConf::mutable_anti_windup_compensation_gain() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.MracConf.anti_windup_compensation_gain)
  return _internal_mutable_anti_windup_compensation_gain();
}

// double clamping_time_constant = 11;
inline void MracConf::clear_clamping_time_constant() {
  clamping_time_constant_ = 0;
}
inline double MracConf::_internal_clamping_time_constant() const {
  return clamping_time_constant_;
}
inline double MracConf::clamping_time_constant() const {
  // @@protoc_insertion_point(field_get:autoagric.control.MracConf.clamping_time_constant)
  return _internal_clamping_time_constant();
}
inline void MracConf::_internal_set_clamping_time_constant(double value) {
  
  clamping_time_constant_ = value;
}
inline void MracConf::set_clamping_time_constant(double value) {
  _internal_set_clamping_time_constant(value);
  // @@protoc_insertion_point(field_set:autoagric.control.MracConf.clamping_time_constant)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fmrac_5fconf_2eproto
