// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/mrac_conf.proto

#include "autoagric/control/mrac_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace control {
constexpr MracConf::MracConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : adaption_state_gain_()
  , adaption_matrix_p_()
  , anti_windup_compensation_gain_()
  , reference_time_constant_(0)
  , reference_natural_frequency_(0)
  , reference_damping_ratio_(0)
  , adaption_desired_gain_(0)
  , adaption_nonlinear_gain_(0)
  , mrac_saturation_level_(0)
  , clamping_time_constant_(0)
  , mrac_model_order_(0){}
struct MracConfDefaultTypeInternal {
  constexpr MracConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MracConfDefaultTypeInternal() {}
  union {
    MracConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MracConfDefaultTypeInternal _MracConf_default_instance_;
}  // namespace control
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcontrol_2fmrac_5fconf_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fcontrol_2fmrac_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcontrol_2fmrac_5fconf_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcontrol_2fmrac_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, mrac_model_order_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, reference_time_constant_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, reference_natural_frequency_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, reference_damping_ratio_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, adaption_state_gain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, adaption_desired_gain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, adaption_nonlinear_gain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, adaption_matrix_p_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, mrac_saturation_level_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, anti_windup_compensation_gain_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::MracConf, clamping_time_constant_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::control::MracConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_MracConf_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcontrol_2fmrac_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!autoagric/control/mrac_conf.proto\022\021aut"
  "oagric.control\"\351\002\n\010MracConf\022\030\n\020mrac_mode"
  "l_order\030\001 \001(\005\022\037\n\027reference_time_constant"
  "\030\002 \001(\001\022#\n\033reference_natural_frequency\030\003 "
  "\001(\001\022\037\n\027reference_damping_ratio\030\004 \001(\001\022\033\n\023"
  "adaption_state_gain\030\005 \003(\001\022\035\n\025adaption_de"
  "sired_gain\030\006 \001(\001\022\037\n\027adaption_nonlinear_g"
  "ain\030\007 \001(\001\022\031\n\021adaption_matrix_p\030\010 \003(\001\022\035\n\025"
  "mrac_saturation_level\030\t \001(\001\022%\n\035anti_wind"
  "up_compensation_gain\030\n \003(\001\022\036\n\026clamping_t"
  "ime_constant\030\013 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto = {
  false, false, 426, descriptor_table_protodef_autoagric_2fcontrol_2fmrac_5fconf_2eproto, "autoagric/control/mrac_conf.proto", 
  &descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fcontrol_2fmrac_5fconf_2eproto::offsets,
  file_level_metadata_autoagric_2fcontrol_2fmrac_5fconf_2eproto, file_level_enum_descriptors_autoagric_2fcontrol_2fmrac_5fconf_2eproto, file_level_service_descriptors_autoagric_2fcontrol_2fmrac_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto_getter() {
  return &descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcontrol_2fmrac_5fconf_2eproto(&descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto);
namespace autoagric {
namespace control {

// ===================================================================

class MracConf::_Internal {
 public:
};

MracConf::MracConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  adaption_state_gain_(arena),
  adaption_matrix_p_(arena),
  anti_windup_compensation_gain_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.MracConf)
}
MracConf::MracConf(const MracConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      adaption_state_gain_(from.adaption_state_gain_),
      adaption_matrix_p_(from.adaption_matrix_p_),
      anti_windup_compensation_gain_(from.anti_windup_compensation_gain_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&reference_time_constant_, &from.reference_time_constant_,
    static_cast<size_t>(reinterpret_cast<char*>(&mrac_model_order_) -
    reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(mrac_model_order_));
  // @@protoc_insertion_point(copy_constructor:autoagric.control.MracConf)
}

inline void MracConf::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reference_time_constant_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mrac_model_order_) -
    reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(mrac_model_order_));
}

MracConf::~MracConf() {
  // @@protoc_insertion_point(destructor:autoagric.control.MracConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MracConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MracConf::ArenaDtor(void* object) {
  MracConf* _this = reinterpret_cast< MracConf* >(object);
  (void)_this;
}
void MracConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MracConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MracConf::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.MracConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  adaption_state_gain_.Clear();
  adaption_matrix_p_.Clear();
  anti_windup_compensation_gain_.Clear();
  ::memset(&reference_time_constant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mrac_model_order_) -
      reinterpret_cast<char*>(&reference_time_constant_)) + sizeof(mrac_model_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MracConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 mrac_model_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          mrac_model_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double reference_time_constant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          reference_time_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double reference_natural_frequency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          reference_natural_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double reference_damping_ratio = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          reference_damping_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double adaption_state_gain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_adaption_state_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 41) {
          _internal_add_adaption_state_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double adaption_desired_gain = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          adaption_desired_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double adaption_nonlinear_gain = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          adaption_nonlinear_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double adaption_matrix_p = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_adaption_matrix_p(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_adaption_matrix_p(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mrac_saturation_level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          mrac_saturation_level_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double anti_windup_compensation_gain = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_anti_windup_compensation_gain(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 81) {
          _internal_add_anti_windup_compensation_gain(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double clamping_time_constant = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          clamping_time_constant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MracConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.MracConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mrac_model_order = 1;
  if (this->_internal_mrac_model_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_mrac_model_order(), target);
  }

  // double reference_time_constant = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_time_constant = this->_internal_reference_time_constant();
  uint64_t raw_reference_time_constant;
  memcpy(&raw_reference_time_constant, &tmp_reference_time_constant, sizeof(tmp_reference_time_constant));
  if (raw_reference_time_constant != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_reference_time_constant(), target);
  }

  // double reference_natural_frequency = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_natural_frequency = this->_internal_reference_natural_frequency();
  uint64_t raw_reference_natural_frequency;
  memcpy(&raw_reference_natural_frequency, &tmp_reference_natural_frequency, sizeof(tmp_reference_natural_frequency));
  if (raw_reference_natural_frequency != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reference_natural_frequency(), target);
  }

  // double reference_damping_ratio = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_damping_ratio = this->_internal_reference_damping_ratio();
  uint64_t raw_reference_damping_ratio;
  memcpy(&raw_reference_damping_ratio, &tmp_reference_damping_ratio, sizeof(tmp_reference_damping_ratio));
  if (raw_reference_damping_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_reference_damping_ratio(), target);
  }

  // repeated double adaption_state_gain = 5;
  if (this->_internal_adaption_state_gain_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_adaption_state_gain(), target);
  }

  // double adaption_desired_gain = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adaption_desired_gain = this->_internal_adaption_desired_gain();
  uint64_t raw_adaption_desired_gain;
  memcpy(&raw_adaption_desired_gain, &tmp_adaption_desired_gain, sizeof(tmp_adaption_desired_gain));
  if (raw_adaption_desired_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_adaption_desired_gain(), target);
  }

  // double adaption_nonlinear_gain = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adaption_nonlinear_gain = this->_internal_adaption_nonlinear_gain();
  uint64_t raw_adaption_nonlinear_gain;
  memcpy(&raw_adaption_nonlinear_gain, &tmp_adaption_nonlinear_gain, sizeof(tmp_adaption_nonlinear_gain));
  if (raw_adaption_nonlinear_gain != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_adaption_nonlinear_gain(), target);
  }

  // repeated double adaption_matrix_p = 8;
  if (this->_internal_adaption_matrix_p_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_adaption_matrix_p(), target);
  }

  // double mrac_saturation_level = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mrac_saturation_level = this->_internal_mrac_saturation_level();
  uint64_t raw_mrac_saturation_level;
  memcpy(&raw_mrac_saturation_level, &tmp_mrac_saturation_level, sizeof(tmp_mrac_saturation_level));
  if (raw_mrac_saturation_level != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_mrac_saturation_level(), target);
  }

  // repeated double anti_windup_compensation_gain = 10;
  if (this->_internal_anti_windup_compensation_gain_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_anti_windup_compensation_gain(), target);
  }

  // double clamping_time_constant = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_clamping_time_constant = this->_internal_clamping_time_constant();
  uint64_t raw_clamping_time_constant;
  memcpy(&raw_clamping_time_constant, &tmp_clamping_time_constant, sizeof(tmp_clamping_time_constant));
  if (raw_clamping_time_constant != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_clamping_time_constant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.MracConf)
  return target;
}

size_t MracConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.MracConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double adaption_state_gain = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_adaption_state_gain_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double adaption_matrix_p = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_adaption_matrix_p_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double anti_windup_compensation_gain = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_anti_windup_compensation_gain_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double reference_time_constant = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_time_constant = this->_internal_reference_time_constant();
  uint64_t raw_reference_time_constant;
  memcpy(&raw_reference_time_constant, &tmp_reference_time_constant, sizeof(tmp_reference_time_constant));
  if (raw_reference_time_constant != 0) {
    total_size += 1 + 8;
  }

  // double reference_natural_frequency = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_natural_frequency = this->_internal_reference_natural_frequency();
  uint64_t raw_reference_natural_frequency;
  memcpy(&raw_reference_natural_frequency, &tmp_reference_natural_frequency, sizeof(tmp_reference_natural_frequency));
  if (raw_reference_natural_frequency != 0) {
    total_size += 1 + 8;
  }

  // double reference_damping_ratio = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_damping_ratio = this->_internal_reference_damping_ratio();
  uint64_t raw_reference_damping_ratio;
  memcpy(&raw_reference_damping_ratio, &tmp_reference_damping_ratio, sizeof(tmp_reference_damping_ratio));
  if (raw_reference_damping_ratio != 0) {
    total_size += 1 + 8;
  }

  // double adaption_desired_gain = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adaption_desired_gain = this->_internal_adaption_desired_gain();
  uint64_t raw_adaption_desired_gain;
  memcpy(&raw_adaption_desired_gain, &tmp_adaption_desired_gain, sizeof(tmp_adaption_desired_gain));
  if (raw_adaption_desired_gain != 0) {
    total_size += 1 + 8;
  }

  // double adaption_nonlinear_gain = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adaption_nonlinear_gain = this->_internal_adaption_nonlinear_gain();
  uint64_t raw_adaption_nonlinear_gain;
  memcpy(&raw_adaption_nonlinear_gain, &tmp_adaption_nonlinear_gain, sizeof(tmp_adaption_nonlinear_gain));
  if (raw_adaption_nonlinear_gain != 0) {
    total_size += 1 + 8;
  }

  // double mrac_saturation_level = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mrac_saturation_level = this->_internal_mrac_saturation_level();
  uint64_t raw_mrac_saturation_level;
  memcpy(&raw_mrac_saturation_level, &tmp_mrac_saturation_level, sizeof(tmp_mrac_saturation_level));
  if (raw_mrac_saturation_level != 0) {
    total_size += 1 + 8;
  }

  // double clamping_time_constant = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_clamping_time_constant = this->_internal_clamping_time_constant();
  uint64_t raw_clamping_time_constant;
  memcpy(&raw_clamping_time_constant, &tmp_clamping_time_constant, sizeof(tmp_clamping_time_constant));
  if (raw_clamping_time_constant != 0) {
    total_size += 1 + 8;
  }

  // int32 mrac_model_order = 1;
  if (this->_internal_mrac_model_order() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mrac_model_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MracConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MracConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MracConf::GetClassData() const { return &_class_data_; }

void MracConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MracConf *>(to)->MergeFrom(
      static_cast<const MracConf &>(from));
}


void MracConf::MergeFrom(const MracConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.MracConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  adaption_state_gain_.MergeFrom(from.adaption_state_gain_);
  adaption_matrix_p_.MergeFrom(from.adaption_matrix_p_);
  anti_windup_compensation_gain_.MergeFrom(from.anti_windup_compensation_gain_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_time_constant = from._internal_reference_time_constant();
  uint64_t raw_reference_time_constant;
  memcpy(&raw_reference_time_constant, &tmp_reference_time_constant, sizeof(tmp_reference_time_constant));
  if (raw_reference_time_constant != 0) {
    _internal_set_reference_time_constant(from._internal_reference_time_constant());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_natural_frequency = from._internal_reference_natural_frequency();
  uint64_t raw_reference_natural_frequency;
  memcpy(&raw_reference_natural_frequency, &tmp_reference_natural_frequency, sizeof(tmp_reference_natural_frequency));
  if (raw_reference_natural_frequency != 0) {
    _internal_set_reference_natural_frequency(from._internal_reference_natural_frequency());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_reference_damping_ratio = from._internal_reference_damping_ratio();
  uint64_t raw_reference_damping_ratio;
  memcpy(&raw_reference_damping_ratio, &tmp_reference_damping_ratio, sizeof(tmp_reference_damping_ratio));
  if (raw_reference_damping_ratio != 0) {
    _internal_set_reference_damping_ratio(from._internal_reference_damping_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adaption_desired_gain = from._internal_adaption_desired_gain();
  uint64_t raw_adaption_desired_gain;
  memcpy(&raw_adaption_desired_gain, &tmp_adaption_desired_gain, sizeof(tmp_adaption_desired_gain));
  if (raw_adaption_desired_gain != 0) {
    _internal_set_adaption_desired_gain(from._internal_adaption_desired_gain());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_adaption_nonlinear_gain = from._internal_adaption_nonlinear_gain();
  uint64_t raw_adaption_nonlinear_gain;
  memcpy(&raw_adaption_nonlinear_gain, &tmp_adaption_nonlinear_gain, sizeof(tmp_adaption_nonlinear_gain));
  if (raw_adaption_nonlinear_gain != 0) {
    _internal_set_adaption_nonlinear_gain(from._internal_adaption_nonlinear_gain());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mrac_saturation_level = from._internal_mrac_saturation_level();
  uint64_t raw_mrac_saturation_level;
  memcpy(&raw_mrac_saturation_level, &tmp_mrac_saturation_level, sizeof(tmp_mrac_saturation_level));
  if (raw_mrac_saturation_level != 0) {
    _internal_set_mrac_saturation_level(from._internal_mrac_saturation_level());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_clamping_time_constant = from._internal_clamping_time_constant();
  uint64_t raw_clamping_time_constant;
  memcpy(&raw_clamping_time_constant, &tmp_clamping_time_constant, sizeof(tmp_clamping_time_constant));
  if (raw_clamping_time_constant != 0) {
    _internal_set_clamping_time_constant(from._internal_clamping_time_constant());
  }
  if (from._internal_mrac_model_order() != 0) {
    _internal_set_mrac_model_order(from._internal_mrac_model_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MracConf::CopyFrom(const MracConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.MracConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MracConf::IsInitialized() const {
  return true;
}

void MracConf::InternalSwap(MracConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  adaption_state_gain_.InternalSwap(&other->adaption_state_gain_);
  adaption_matrix_p_.InternalSwap(&other->adaption_matrix_p_);
  anti_windup_compensation_gain_.InternalSwap(&other->anti_windup_compensation_gain_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MracConf, mrac_model_order_)
      + sizeof(MracConf::mrac_model_order_)
      - PROTOBUF_FIELD_OFFSET(MracConf, reference_time_constant_)>(
          reinterpret_cast<char*>(&reference_time_constant_),
          reinterpret_cast<char*>(&other->reference_time_constant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MracConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2fmrac_5fconf_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2fmrac_5fconf_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::control::MracConf* Arena::CreateMaybeMessage< ::autoagric::control::MracConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::MracConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
