// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/lat_controller_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/control/gain_scheduler_conf.pb.h"
#include "autoagric/control/mrac_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto;
namespace autoagric {
namespace control {
class LatControllerConf;
struct LatControllerConfDefaultTypeInternal;
extern LatControllerConfDefaultTypeInternal _LatControllerConf_default_instance_;
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::control::LatControllerConf* Arena::CreateMaybeMessage<::autoagric::control::LatControllerConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace control {

// ===================================================================

class LatControllerConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.control.LatControllerConf) */ {
 public:
  inline LatControllerConf() : LatControllerConf(nullptr) {}
  ~LatControllerConf() override;
  explicit constexpr LatControllerConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatControllerConf(const LatControllerConf& from);
  LatControllerConf(LatControllerConf&& from) noexcept
    : LatControllerConf() {
    *this = ::std::move(from);
  }

  inline LatControllerConf& operator=(const LatControllerConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatControllerConf& operator=(LatControllerConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatControllerConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatControllerConf* internal_default_instance() {
    return reinterpret_cast<const LatControllerConf*>(
               &_LatControllerConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LatControllerConf& a, LatControllerConf& b) {
    a.Swap(&b);
  }
  inline void Swap(LatControllerConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatControllerConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatControllerConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatControllerConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatControllerConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LatControllerConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatControllerConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.control.LatControllerConf";
  }
  protected:
  explicit LatControllerConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatrixQFieldNumber = 10,
    kReverseMatrixQFieldNumber = 11,
    kLatErrGainSchedulerFieldNumber = 16,
    kHeadingErrGainSchedulerFieldNumber = 17,
    kSteerMracConfFieldNumber = 23,
    kTsFieldNumber = 1,
    kCfFieldNumber = 3,
    kPreviewWindowFieldNumber = 2,
    kMassFlFieldNumber = 5,
    kCrFieldNumber = 4,
    kMassFrFieldNumber = 6,
    kMassRlFieldNumber = 7,
    kEpsFieldNumber = 9,
    kMassRrFieldNumber = 8,
    kCutoffFreqFieldNumber = 12,
    kMeanFilterWindowSizeFieldNumber = 13,
    kMaxIterationFieldNumber = 14,
    kMaxLateralAccelerationFieldNumber = 15,
    kLookaheadStationFieldNumber = 21,
    kLookbackStationFieldNumber = 22,
    kLookaheadStationHighSpeedFieldNumber = 25,
    kLookbackStationHighSpeedFieldNumber = 26,
    kEnableReverseLeadlagCompensationFieldNumber = 19,
    kEnableLookAheadBackControlFieldNumber = 20,
    kEnableSteerMracControlFieldNumber = 24,
  };
  // repeated double matrix_q = 10;
  int matrix_q_size() const;
  private:
  int _internal_matrix_q_size() const;
  public:
  void clear_matrix_q();
  private:
  double _internal_matrix_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_matrix_q() const;
  void _internal_add_matrix_q(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_matrix_q();
  public:
  double matrix_q(int index) const;
  void set_matrix_q(int index, double value);
  void add_matrix_q(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      matrix_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_matrix_q();

  // repeated double reverse_matrix_q = 11;
  int reverse_matrix_q_size() const;
  private:
  int _internal_reverse_matrix_q_size() const;
  public:
  void clear_reverse_matrix_q();
  private:
  double _internal_reverse_matrix_q(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_reverse_matrix_q() const;
  void _internal_add_reverse_matrix_q(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_reverse_matrix_q();
  public:
  double reverse_matrix_q(int index) const;
  void set_reverse_matrix_q(int index, double value);
  void add_reverse_matrix_q(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      reverse_matrix_q() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_reverse_matrix_q();

  // .autoagric.control.GainScheduler lat_err_gain_scheduler = 16;
  bool has_lat_err_gain_scheduler() const;
  private:
  bool _internal_has_lat_err_gain_scheduler() const;
  public:
  void clear_lat_err_gain_scheduler();
  const ::autoagric::control::GainScheduler& lat_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_lat_err_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_lat_err_gain_scheduler();
  void set_allocated_lat_err_gain_scheduler(::autoagric::control::GainScheduler* lat_err_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_lat_err_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_lat_err_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_lat_err_gain_scheduler(
      ::autoagric::control::GainScheduler* lat_err_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_lat_err_gain_scheduler();

  // .autoagric.control.GainScheduler heading_err_gain_scheduler = 17;
  bool has_heading_err_gain_scheduler() const;
  private:
  bool _internal_has_heading_err_gain_scheduler() const;
  public:
  void clear_heading_err_gain_scheduler();
  const ::autoagric::control::GainScheduler& heading_err_gain_scheduler() const;
  PROTOBUF_NODISCARD ::autoagric::control::GainScheduler* release_heading_err_gain_scheduler();
  ::autoagric::control::GainScheduler* mutable_heading_err_gain_scheduler();
  void set_allocated_heading_err_gain_scheduler(::autoagric::control::GainScheduler* heading_err_gain_scheduler);
  private:
  const ::autoagric::control::GainScheduler& _internal_heading_err_gain_scheduler() const;
  ::autoagric::control::GainScheduler* _internal_mutable_heading_err_gain_scheduler();
  public:
  void unsafe_arena_set_allocated_heading_err_gain_scheduler(
      ::autoagric::control::GainScheduler* heading_err_gain_scheduler);
  ::autoagric::control::GainScheduler* unsafe_arena_release_heading_err_gain_scheduler();

  // .autoagric.control.MracConf steer_mrac_conf = 23;
  bool has_steer_mrac_conf() const;
  private:
  bool _internal_has_steer_mrac_conf() const;
  public:
  void clear_steer_mrac_conf();
  const ::autoagric::control::MracConf& steer_mrac_conf() const;
  PROTOBUF_NODISCARD ::autoagric::control::MracConf* release_steer_mrac_conf();
  ::autoagric::control::MracConf* mutable_steer_mrac_conf();
  void set_allocated_steer_mrac_conf(::autoagric::control::MracConf* steer_mrac_conf);
  private:
  const ::autoagric::control::MracConf& _internal_steer_mrac_conf() const;
  ::autoagric::control::MracConf* _internal_mutable_steer_mrac_conf();
  public:
  void unsafe_arena_set_allocated_steer_mrac_conf(
      ::autoagric::control::MracConf* steer_mrac_conf);
  ::autoagric::control::MracConf* unsafe_arena_release_steer_mrac_conf();

  // double ts = 1;
  void clear_ts();
  double ts() const;
  void set_ts(double value);
  private:
  double _internal_ts() const;
  void _internal_set_ts(double value);
  public:

  // double cf = 3;
  void clear_cf();
  double cf() const;
  void set_cf(double value);
  private:
  double _internal_cf() const;
  void _internal_set_cf(double value);
  public:

  // int32 preview_window = 2;
  void clear_preview_window();
  int32_t preview_window() const;
  void set_preview_window(int32_t value);
  private:
  int32_t _internal_preview_window() const;
  void _internal_set_preview_window(int32_t value);
  public:

  // int32 mass_fl = 5;
  void clear_mass_fl();
  int32_t mass_fl() const;
  void set_mass_fl(int32_t value);
  private:
  int32_t _internal_mass_fl() const;
  void _internal_set_mass_fl(int32_t value);
  public:

  // double cr = 4;
  void clear_cr();
  double cr() const;
  void set_cr(double value);
  private:
  double _internal_cr() const;
  void _internal_set_cr(double value);
  public:

  // int32 mass_fr = 6;
  void clear_mass_fr();
  int32_t mass_fr() const;
  void set_mass_fr(int32_t value);
  private:
  int32_t _internal_mass_fr() const;
  void _internal_set_mass_fr(int32_t value);
  public:

  // int32 mass_rl = 7;
  void clear_mass_rl();
  int32_t mass_rl() const;
  void set_mass_rl(int32_t value);
  private:
  int32_t _internal_mass_rl() const;
  void _internal_set_mass_rl(int32_t value);
  public:

  // double eps = 9;
  void clear_eps();
  double eps() const;
  void set_eps(double value);
  private:
  double _internal_eps() const;
  void _internal_set_eps(double value);
  public:

  // int32 mass_rr = 8;
  void clear_mass_rr();
  int32_t mass_rr() const;
  void set_mass_rr(int32_t value);
  private:
  int32_t _internal_mass_rr() const;
  void _internal_set_mass_rr(int32_t value);
  public:

  // int32 cutoff_freq = 12;
  void clear_cutoff_freq();
  int32_t cutoff_freq() const;
  void set_cutoff_freq(int32_t value);
  private:
  int32_t _internal_cutoff_freq() const;
  void _internal_set_cutoff_freq(int32_t value);
  public:

  // int32 mean_filter_window_size = 13;
  void clear_mean_filter_window_size();
  int32_t mean_filter_window_size() const;
  void set_mean_filter_window_size(int32_t value);
  private:
  int32_t _internal_mean_filter_window_size() const;
  void _internal_set_mean_filter_window_size(int32_t value);
  public:

  // int32 max_iteration = 14;
  void clear_max_iteration();
  int32_t max_iteration() const;
  void set_max_iteration(int32_t value);
  private:
  int32_t _internal_max_iteration() const;
  void _internal_set_max_iteration(int32_t value);
  public:

  // double max_lateral_acceleration = 15;
  void clear_max_lateral_acceleration();
  double max_lateral_acceleration() const;
  void set_max_lateral_acceleration(double value);
  private:
  double _internal_max_lateral_acceleration() const;
  void _internal_set_max_lateral_acceleration(double value);
  public:

  // double lookahead_station = 21;
  void clear_lookahead_station();
  double lookahead_station() const;
  void set_lookahead_station(double value);
  private:
  double _internal_lookahead_station() const;
  void _internal_set_lookahead_station(double value);
  public:

  // double lookback_station = 22;
  void clear_lookback_station();
  double lookback_station() const;
  void set_lookback_station(double value);
  private:
  double _internal_lookback_station() const;
  void _internal_set_lookback_station(double value);
  public:

  // double lookahead_station_high_speed = 25;
  void clear_lookahead_station_high_speed();
  double lookahead_station_high_speed() const;
  void set_lookahead_station_high_speed(double value);
  private:
  double _internal_lookahead_station_high_speed() const;
  void _internal_set_lookahead_station_high_speed(double value);
  public:

  // double lookback_station_high_speed = 26;
  void clear_lookback_station_high_speed();
  double lookback_station_high_speed() const;
  void set_lookback_station_high_speed(double value);
  private:
  double _internal_lookback_station_high_speed() const;
  void _internal_set_lookback_station_high_speed(double value);
  public:

  // bool enable_reverse_leadlag_compensation = 19;
  void clear_enable_reverse_leadlag_compensation();
  bool enable_reverse_leadlag_compensation() const;
  void set_enable_reverse_leadlag_compensation(bool value);
  private:
  bool _internal_enable_reverse_leadlag_compensation() const;
  void _internal_set_enable_reverse_leadlag_compensation(bool value);
  public:

  // bool enable_look_ahead_back_control = 20;
  void clear_enable_look_ahead_back_control();
  bool enable_look_ahead_back_control() const;
  void set_enable_look_ahead_back_control(bool value);
  private:
  bool _internal_enable_look_ahead_back_control() const;
  void _internal_set_enable_look_ahead_back_control(bool value);
  public:

  // bool enable_steer_mrac_control = 24;
  void clear_enable_steer_mrac_control();
  bool enable_steer_mrac_control() const;
  void set_enable_steer_mrac_control(bool value);
  private:
  bool _internal_enable_steer_mrac_control() const;
  void _internal_set_enable_steer_mrac_control(bool value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.control.LatControllerConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > matrix_q_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > reverse_matrix_q_;
  ::autoagric::control::GainScheduler* lat_err_gain_scheduler_;
  ::autoagric::control::GainScheduler* heading_err_gain_scheduler_;
  ::autoagric::control::MracConf* steer_mrac_conf_;
  double ts_;
  double cf_;
  int32_t preview_window_;
  int32_t mass_fl_;
  double cr_;
  int32_t mass_fr_;
  int32_t mass_rl_;
  double eps_;
  int32_t mass_rr_;
  int32_t cutoff_freq_;
  int32_t mean_filter_window_size_;
  int32_t max_iteration_;
  double max_lateral_acceleration_;
  double lookahead_station_;
  double lookback_station_;
  double lookahead_station_high_speed_;
  double lookback_station_high_speed_;
  bool enable_reverse_leadlag_compensation_;
  bool enable_look_ahead_back_control_;
  bool enable_steer_mrac_control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LatControllerConf

// double ts = 1;
inline void LatControllerConf::clear_ts() {
  ts_ = 0;
}
inline double LatControllerConf::_internal_ts() const {
  return ts_;
}
inline double LatControllerConf::ts() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.ts)
  return _internal_ts();
}
inline void LatControllerConf::_internal_set_ts(double value) {
  
  ts_ = value;
}
inline void LatControllerConf::set_ts(double value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.ts)
}

// int32 preview_window = 2;
inline void LatControllerConf::clear_preview_window() {
  preview_window_ = 0;
}
inline int32_t LatControllerConf::_internal_preview_window() const {
  return preview_window_;
}
inline int32_t LatControllerConf::preview_window() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.preview_window)
  return _internal_preview_window();
}
inline void LatControllerConf::_internal_set_preview_window(int32_t value) {
  
  preview_window_ = value;
}
inline void LatControllerConf::set_preview_window(int32_t value) {
  _internal_set_preview_window(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.preview_window)
}

// double cf = 3;
inline void LatControllerConf::clear_cf() {
  cf_ = 0;
}
inline double LatControllerConf::_internal_cf() const {
  return cf_;
}
inline double LatControllerConf::cf() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.cf)
  return _internal_cf();
}
inline void LatControllerConf::_internal_set_cf(double value) {
  
  cf_ = value;
}
inline void LatControllerConf::set_cf(double value) {
  _internal_set_cf(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.cf)
}

// double cr = 4;
inline void LatControllerConf::clear_cr() {
  cr_ = 0;
}
inline double LatControllerConf::_internal_cr() const {
  return cr_;
}
inline double LatControllerConf::cr() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.cr)
  return _internal_cr();
}
inline void LatControllerConf::_internal_set_cr(double value) {
  
  cr_ = value;
}
inline void LatControllerConf::set_cr(double value) {
  _internal_set_cr(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.cr)
}

// int32 mass_fl = 5;
inline void LatControllerConf::clear_mass_fl() {
  mass_fl_ = 0;
}
inline int32_t LatControllerConf::_internal_mass_fl() const {
  return mass_fl_;
}
inline int32_t LatControllerConf::mass_fl() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.mass_fl)
  return _internal_mass_fl();
}
inline void LatControllerConf::_internal_set_mass_fl(int32_t value) {
  
  mass_fl_ = value;
}
inline void LatControllerConf::set_mass_fl(int32_t value) {
  _internal_set_mass_fl(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.mass_fl)
}

// int32 mass_fr = 6;
inline void LatControllerConf::clear_mass_fr() {
  mass_fr_ = 0;
}
inline int32_t LatControllerConf::_internal_mass_fr() const {
  return mass_fr_;
}
inline int32_t LatControllerConf::mass_fr() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.mass_fr)
  return _internal_mass_fr();
}
inline void LatControllerConf::_internal_set_mass_fr(int32_t value) {
  
  mass_fr_ = value;
}
inline void LatControllerConf::set_mass_fr(int32_t value) {
  _internal_set_mass_fr(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.mass_fr)
}

// int32 mass_rl = 7;
inline void LatControllerConf::clear_mass_rl() {
  mass_rl_ = 0;
}
inline int32_t LatControllerConf::_internal_mass_rl() const {
  return mass_rl_;
}
inline int32_t LatControllerConf::mass_rl() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.mass_rl)
  return _internal_mass_rl();
}
inline void LatControllerConf::_internal_set_mass_rl(int32_t value) {
  
  mass_rl_ = value;
}
inline void LatControllerConf::set_mass_rl(int32_t value) {
  _internal_set_mass_rl(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.mass_rl)
}

// int32 mass_rr = 8;
inline void LatControllerConf::clear_mass_rr() {
  mass_rr_ = 0;
}
inline int32_t LatControllerConf::_internal_mass_rr() const {
  return mass_rr_;
}
inline int32_t LatControllerConf::mass_rr() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.mass_rr)
  return _internal_mass_rr();
}
inline void LatControllerConf::_internal_set_mass_rr(int32_t value) {
  
  mass_rr_ = value;
}
inline void LatControllerConf::set_mass_rr(int32_t value) {
  _internal_set_mass_rr(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.mass_rr)
}

// double eps = 9;
inline void LatControllerConf::clear_eps() {
  eps_ = 0;
}
inline double LatControllerConf::_internal_eps() const {
  return eps_;
}
inline double LatControllerConf::eps() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.eps)
  return _internal_eps();
}
inline void LatControllerConf::_internal_set_eps(double value) {
  
  eps_ = value;
}
inline void LatControllerConf::set_eps(double value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.eps)
}

// repeated double matrix_q = 10;
inline int LatControllerConf::_internal_matrix_q_size() const {
  return matrix_q_.size();
}
inline int LatControllerConf::matrix_q_size() const {
  return _internal_matrix_q_size();
}
inline void LatControllerConf::clear_matrix_q() {
  matrix_q_.Clear();
}
inline double LatControllerConf::_internal_matrix_q(int index) const {
  return matrix_q_.Get(index);
}
inline double LatControllerConf::matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.matrix_q)
  return _internal_matrix_q(index);
}
inline void LatControllerConf::set_matrix_q(int index, double value) {
  matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.matrix_q)
}
inline void LatControllerConf::_internal_add_matrix_q(double value) {
  matrix_q_.Add(value);
}
inline void LatControllerConf::add_matrix_q(double value) {
  _internal_add_matrix_q(value);
  // @@protoc_insertion_point(field_add:autoagric.control.LatControllerConf.matrix_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LatControllerConf::_internal_matrix_q() const {
  return matrix_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LatControllerConf::matrix_q() const {
  // @@protoc_insertion_point(field_list:autoagric.control.LatControllerConf.matrix_q)
  return _internal_matrix_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LatControllerConf::_internal_mutable_matrix_q() {
  return &matrix_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LatControllerConf::mutable_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.LatControllerConf.matrix_q)
  return _internal_mutable_matrix_q();
}

// repeated double reverse_matrix_q = 11;
inline int LatControllerConf::_internal_reverse_matrix_q_size() const {
  return reverse_matrix_q_.size();
}
inline int LatControllerConf::reverse_matrix_q_size() const {
  return _internal_reverse_matrix_q_size();
}
inline void LatControllerConf::clear_reverse_matrix_q() {
  reverse_matrix_q_.Clear();
}
inline double LatControllerConf::_internal_reverse_matrix_q(int index) const {
  return reverse_matrix_q_.Get(index);
}
inline double LatControllerConf::reverse_matrix_q(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.reverse_matrix_q)
  return _internal_reverse_matrix_q(index);
}
inline void LatControllerConf::set_reverse_matrix_q(int index, double value) {
  reverse_matrix_q_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.reverse_matrix_q)
}
inline void LatControllerConf::_internal_add_reverse_matrix_q(double value) {
  reverse_matrix_q_.Add(value);
}
inline void LatControllerConf::add_reverse_matrix_q(double value) {
  _internal_add_reverse_matrix_q(value);
  // @@protoc_insertion_point(field_add:autoagric.control.LatControllerConf.reverse_matrix_q)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LatControllerConf::_internal_reverse_matrix_q() const {
  return reverse_matrix_q_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LatControllerConf::reverse_matrix_q() const {
  // @@protoc_insertion_point(field_list:autoagric.control.LatControllerConf.reverse_matrix_q)
  return _internal_reverse_matrix_q();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LatControllerConf::_internal_mutable_reverse_matrix_q() {
  return &reverse_matrix_q_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LatControllerConf::mutable_reverse_matrix_q() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.LatControllerConf.reverse_matrix_q)
  return _internal_mutable_reverse_matrix_q();
}

// int32 cutoff_freq = 12;
inline void LatControllerConf::clear_cutoff_freq() {
  cutoff_freq_ = 0;
}
inline int32_t LatControllerConf::_internal_cutoff_freq() const {
  return cutoff_freq_;
}
inline int32_t LatControllerConf::cutoff_freq() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.cutoff_freq)
  return _internal_cutoff_freq();
}
inline void LatControllerConf::_internal_set_cutoff_freq(int32_t value) {
  
  cutoff_freq_ = value;
}
inline void LatControllerConf::set_cutoff_freq(int32_t value) {
  _internal_set_cutoff_freq(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.cutoff_freq)
}

// int32 mean_filter_window_size = 13;
inline void LatControllerConf::clear_mean_filter_window_size() {
  mean_filter_window_size_ = 0;
}
inline int32_t LatControllerConf::_internal_mean_filter_window_size() const {
  return mean_filter_window_size_;
}
inline int32_t LatControllerConf::mean_filter_window_size() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.mean_filter_window_size)
  return _internal_mean_filter_window_size();
}
inline void LatControllerConf::_internal_set_mean_filter_window_size(int32_t value) {
  
  mean_filter_window_size_ = value;
}
inline void LatControllerConf::set_mean_filter_window_size(int32_t value) {
  _internal_set_mean_filter_window_size(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.mean_filter_window_size)
}

// int32 max_iteration = 14;
inline void LatControllerConf::clear_max_iteration() {
  max_iteration_ = 0;
}
inline int32_t LatControllerConf::_internal_max_iteration() const {
  return max_iteration_;
}
inline int32_t LatControllerConf::max_iteration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.max_iteration)
  return _internal_max_iteration();
}
inline void LatControllerConf::_internal_set_max_iteration(int32_t value) {
  
  max_iteration_ = value;
}
inline void LatControllerConf::set_max_iteration(int32_t value) {
  _internal_set_max_iteration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.max_iteration)
}

// double max_lateral_acceleration = 15;
inline void LatControllerConf::clear_max_lateral_acceleration() {
  max_lateral_acceleration_ = 0;
}
inline double LatControllerConf::_internal_max_lateral_acceleration() const {
  return max_lateral_acceleration_;
}
inline double LatControllerConf::max_lateral_acceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.max_lateral_acceleration)
  return _internal_max_lateral_acceleration();
}
inline void LatControllerConf::_internal_set_max_lateral_acceleration(double value) {
  
  max_lateral_acceleration_ = value;
}
inline void LatControllerConf::set_max_lateral_acceleration(double value) {
  _internal_set_max_lateral_acceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.max_lateral_acceleration)
}

// .autoagric.control.GainScheduler lat_err_gain_scheduler = 16;
inline bool LatControllerConf::_internal_has_lat_err_gain_scheduler() const {
  return this != internal_default_instance() && lat_err_gain_scheduler_ != nullptr;
}
inline bool LatControllerConf::has_lat_err_gain_scheduler() const {
  return _internal_has_lat_err_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& LatControllerConf::_internal_lat_err_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = lat_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& LatControllerConf::lat_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.lat_err_gain_scheduler)
  return _internal_lat_err_gain_scheduler();
}
inline void LatControllerConf::unsafe_arena_set_allocated_lat_err_gain_scheduler(
    ::autoagric::control::GainScheduler* lat_err_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_err_gain_scheduler_);
  }
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  if (lat_err_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.LatControllerConf.lat_err_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* LatControllerConf::release_lat_err_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* LatControllerConf::unsafe_arena_release_lat_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.LatControllerConf.lat_err_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = lat_err_gain_scheduler_;
  lat_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* LatControllerConf::_internal_mutable_lat_err_gain_scheduler() {
  
  if (lat_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    lat_err_gain_scheduler_ = p;
  }
  return lat_err_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* LatControllerConf::mutable_lat_err_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_lat_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.LatControllerConf.lat_err_gain_scheduler)
  return _msg;
}
inline void LatControllerConf::set_allocated_lat_err_gain_scheduler(::autoagric::control::GainScheduler* lat_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_err_gain_scheduler_);
  }
  if (lat_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_err_gain_scheduler));
    if (message_arena != submessage_arena) {
      lat_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_err_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  lat_err_gain_scheduler_ = lat_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.LatControllerConf.lat_err_gain_scheduler)
}

// .autoagric.control.GainScheduler heading_err_gain_scheduler = 17;
inline bool LatControllerConf::_internal_has_heading_err_gain_scheduler() const {
  return this != internal_default_instance() && heading_err_gain_scheduler_ != nullptr;
}
inline bool LatControllerConf::has_heading_err_gain_scheduler() const {
  return _internal_has_heading_err_gain_scheduler();
}
inline const ::autoagric::control::GainScheduler& LatControllerConf::_internal_heading_err_gain_scheduler() const {
  const ::autoagric::control::GainScheduler* p = heading_err_gain_scheduler_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::GainScheduler&>(
      ::autoagric::control::_GainScheduler_default_instance_);
}
inline const ::autoagric::control::GainScheduler& LatControllerConf::heading_err_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.heading_err_gain_scheduler)
  return _internal_heading_err_gain_scheduler();
}
inline void LatControllerConf::unsafe_arena_set_allocated_heading_err_gain_scheduler(
    ::autoagric::control::GainScheduler* heading_err_gain_scheduler) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_err_gain_scheduler_);
  }
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  if (heading_err_gain_scheduler) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.LatControllerConf.heading_err_gain_scheduler)
}
inline ::autoagric::control::GainScheduler* LatControllerConf::release_heading_err_gain_scheduler() {
  
  ::autoagric::control::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::GainScheduler* LatControllerConf::unsafe_arena_release_heading_err_gain_scheduler() {
  // @@protoc_insertion_point(field_release:autoagric.control.LatControllerConf.heading_err_gain_scheduler)
  
  ::autoagric::control::GainScheduler* temp = heading_err_gain_scheduler_;
  heading_err_gain_scheduler_ = nullptr;
  return temp;
}
inline ::autoagric::control::GainScheduler* LatControllerConf::_internal_mutable_heading_err_gain_scheduler() {
  
  if (heading_err_gain_scheduler_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::GainScheduler>(GetArenaForAllocation());
    heading_err_gain_scheduler_ = p;
  }
  return heading_err_gain_scheduler_;
}
inline ::autoagric::control::GainScheduler* LatControllerConf::mutable_heading_err_gain_scheduler() {
  ::autoagric::control::GainScheduler* _msg = _internal_mutable_heading_err_gain_scheduler();
  // @@protoc_insertion_point(field_mutable:autoagric.control.LatControllerConf.heading_err_gain_scheduler)
  return _msg;
}
inline void LatControllerConf::set_allocated_heading_err_gain_scheduler(::autoagric::control::GainScheduler* heading_err_gain_scheduler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_err_gain_scheduler_);
  }
  if (heading_err_gain_scheduler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_err_gain_scheduler));
    if (message_arena != submessage_arena) {
      heading_err_gain_scheduler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading_err_gain_scheduler, submessage_arena);
    }
    
  } else {
    
  }
  heading_err_gain_scheduler_ = heading_err_gain_scheduler;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.LatControllerConf.heading_err_gain_scheduler)
}

// bool enable_reverse_leadlag_compensation = 19;
inline void LatControllerConf::clear_enable_reverse_leadlag_compensation() {
  enable_reverse_leadlag_compensation_ = false;
}
inline bool LatControllerConf::_internal_enable_reverse_leadlag_compensation() const {
  return enable_reverse_leadlag_compensation_;
}
inline bool LatControllerConf::enable_reverse_leadlag_compensation() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.enable_reverse_leadlag_compensation)
  return _internal_enable_reverse_leadlag_compensation();
}
inline void LatControllerConf::_internal_set_enable_reverse_leadlag_compensation(bool value) {
  
  enable_reverse_leadlag_compensation_ = value;
}
inline void LatControllerConf::set_enable_reverse_leadlag_compensation(bool value) {
  _internal_set_enable_reverse_leadlag_compensation(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.enable_reverse_leadlag_compensation)
}

// bool enable_look_ahead_back_control = 20;
inline void LatControllerConf::clear_enable_look_ahead_back_control() {
  enable_look_ahead_back_control_ = false;
}
inline bool LatControllerConf::_internal_enable_look_ahead_back_control() const {
  return enable_look_ahead_back_control_;
}
inline bool LatControllerConf::enable_look_ahead_back_control() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.enable_look_ahead_back_control)
  return _internal_enable_look_ahead_back_control();
}
inline void LatControllerConf::_internal_set_enable_look_ahead_back_control(bool value) {
  
  enable_look_ahead_back_control_ = value;
}
inline void LatControllerConf::set_enable_look_ahead_back_control(bool value) {
  _internal_set_enable_look_ahead_back_control(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.enable_look_ahead_back_control)
}

// double lookahead_station = 21;
inline void LatControllerConf::clear_lookahead_station() {
  lookahead_station_ = 0;
}
inline double LatControllerConf::_internal_lookahead_station() const {
  return lookahead_station_;
}
inline double LatControllerConf::lookahead_station() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.lookahead_station)
  return _internal_lookahead_station();
}
inline void LatControllerConf::_internal_set_lookahead_station(double value) {
  
  lookahead_station_ = value;
}
inline void LatControllerConf::set_lookahead_station(double value) {
  _internal_set_lookahead_station(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.lookahead_station)
}

// double lookback_station = 22;
inline void LatControllerConf::clear_lookback_station() {
  lookback_station_ = 0;
}
inline double LatControllerConf::_internal_lookback_station() const {
  return lookback_station_;
}
inline double LatControllerConf::lookback_station() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.lookback_station)
  return _internal_lookback_station();
}
inline void LatControllerConf::_internal_set_lookback_station(double value) {
  
  lookback_station_ = value;
}
inline void LatControllerConf::set_lookback_station(double value) {
  _internal_set_lookback_station(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.lookback_station)
}

// .autoagric.control.MracConf steer_mrac_conf = 23;
inline bool LatControllerConf::_internal_has_steer_mrac_conf() const {
  return this != internal_default_instance() && steer_mrac_conf_ != nullptr;
}
inline bool LatControllerConf::has_steer_mrac_conf() const {
  return _internal_has_steer_mrac_conf();
}
inline const ::autoagric::control::MracConf& LatControllerConf::_internal_steer_mrac_conf() const {
  const ::autoagric::control::MracConf* p = steer_mrac_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::MracConf&>(
      ::autoagric::control::_MracConf_default_instance_);
}
inline const ::autoagric::control::MracConf& LatControllerConf::steer_mrac_conf() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.steer_mrac_conf)
  return _internal_steer_mrac_conf();
}
inline void LatControllerConf::unsafe_arena_set_allocated_steer_mrac_conf(
    ::autoagric::control::MracConf* steer_mrac_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_mrac_conf_);
  }
  steer_mrac_conf_ = steer_mrac_conf;
  if (steer_mrac_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.LatControllerConf.steer_mrac_conf)
}
inline ::autoagric::control::MracConf* LatControllerConf::release_steer_mrac_conf() {
  
  ::autoagric::control::MracConf* temp = steer_mrac_conf_;
  steer_mrac_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::MracConf* LatControllerConf::unsafe_arena_release_steer_mrac_conf() {
  // @@protoc_insertion_point(field_release:autoagric.control.LatControllerConf.steer_mrac_conf)
  
  ::autoagric::control::MracConf* temp = steer_mrac_conf_;
  steer_mrac_conf_ = nullptr;
  return temp;
}
inline ::autoagric::control::MracConf* LatControllerConf::_internal_mutable_steer_mrac_conf() {
  
  if (steer_mrac_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::MracConf>(GetArenaForAllocation());
    steer_mrac_conf_ = p;
  }
  return steer_mrac_conf_;
}
inline ::autoagric::control::MracConf* LatControllerConf::mutable_steer_mrac_conf() {
  ::autoagric::control::MracConf* _msg = _internal_mutable_steer_mrac_conf();
  // @@protoc_insertion_point(field_mutable:autoagric.control.LatControllerConf.steer_mrac_conf)
  return _msg;
}
inline void LatControllerConf::set_allocated_steer_mrac_conf(::autoagric::control::MracConf* steer_mrac_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_mrac_conf_);
  }
  if (steer_mrac_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(steer_mrac_conf));
    if (message_arena != submessage_arena) {
      steer_mrac_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, steer_mrac_conf, submessage_arena);
    }
    
  } else {
    
  }
  steer_mrac_conf_ = steer_mrac_conf;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.LatControllerConf.steer_mrac_conf)
}

// bool enable_steer_mrac_control = 24;
inline void LatControllerConf::clear_enable_steer_mrac_control() {
  enable_steer_mrac_control_ = false;
}
inline bool LatControllerConf::_internal_enable_steer_mrac_control() const {
  return enable_steer_mrac_control_;
}
inline bool LatControllerConf::enable_steer_mrac_control() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.enable_steer_mrac_control)
  return _internal_enable_steer_mrac_control();
}
inline void LatControllerConf::_internal_set_enable_steer_mrac_control(bool value) {
  
  enable_steer_mrac_control_ = value;
}
inline void LatControllerConf::set_enable_steer_mrac_control(bool value) {
  _internal_set_enable_steer_mrac_control(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.enable_steer_mrac_control)
}

// double lookahead_station_high_speed = 25;
inline void LatControllerConf::clear_lookahead_station_high_speed() {
  lookahead_station_high_speed_ = 0;
}
inline double LatControllerConf::_internal_lookahead_station_high_speed() const {
  return lookahead_station_high_speed_;
}
inline double LatControllerConf::lookahead_station_high_speed() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.lookahead_station_high_speed)
  return _internal_lookahead_station_high_speed();
}
inline void LatControllerConf::_internal_set_lookahead_station_high_speed(double value) {
  
  lookahead_station_high_speed_ = value;
}
inline void LatControllerConf::set_lookahead_station_high_speed(double value) {
  _internal_set_lookahead_station_high_speed(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.lookahead_station_high_speed)
}

// double lookback_station_high_speed = 26;
inline void LatControllerConf::clear_lookback_station_high_speed() {
  lookback_station_high_speed_ = 0;
}
inline double LatControllerConf::_internal_lookback_station_high_speed() const {
  return lookback_station_high_speed_;
}
inline double LatControllerConf::lookback_station_high_speed() const {
  // @@protoc_insertion_point(field_get:autoagric.control.LatControllerConf.lookback_station_high_speed)
  return _internal_lookback_station_high_speed();
}
inline void LatControllerConf::_internal_set_lookback_station_high_speed(double value) {
  
  lookback_station_high_speed_ = value;
}
inline void LatControllerConf::set_lookback_station_high_speed(double value) {
  _internal_set_lookback_station_high_speed(value);
  // @@protoc_insertion_point(field_set:autoagric.control.LatControllerConf.lookback_station_high_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2flat_5fcontroller_5fconf_2eproto
