// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/local_view.proto

#include "autoagric/control/local_view.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace control {
constexpr LocalView::LocalView(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , chassis_(nullptr)
  , trajectory_(nullptr)
  , localization_(nullptr){}
struct LocalViewDefaultTypeInternal {
  constexpr LocalViewDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalViewDefaultTypeInternal() {}
  union {
    LocalView _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalViewDefaultTypeInternal _LocalView_default_instance_;
}  // namespace control
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcontrol_2flocal_5fview_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fcontrol_2flocal_5fview_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcontrol_2flocal_5fview_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcontrol_2flocal_5fview_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LocalView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LocalView, header_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LocalView, chassis_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LocalView, trajectory_),
  PROTOBUF_FIELD_OFFSET(::autoagric::control::LocalView, localization_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::control::LocalView)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::control::_LocalView_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcontrol_2flocal_5fview_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"autoagric/control/local_view.proto\022\021au"
  "toagric.control\032\036autoagric/canbus/chassi"
  "s.proto\032\035autoagric/common/header.proto\032)"
  "autoagric/localization/localization.prot"
  "o\032!autoagric/planning/planning.proto\"\334\001\n"
  "\tLocalView\022(\n\006header\030\001 \001(\0132\030.autoagric.c"
  "ommon.Header\022*\n\007chassis\030\002 \001(\0132\031.autoagri"
  "c.canbus.Chassis\0225\n\ntrajectory\030\003 \001(\0132!.a"
  "utoagric.planning.ADCTrajectory\022B\n\014local"
  "ization\030\004 \001(\0132,.autoagric.localization.L"
  "ocalizationEstimateb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto_deps[4] = {
  &::descriptor_table_autoagric_2fcanbus_2fchassis_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fheader_2eproto,
  &::descriptor_table_autoagric_2flocalization_2flocalization_2eproto,
  &::descriptor_table_autoagric_2fplanning_2fplanning_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto = {
  false, false, 427, descriptor_table_protodef_autoagric_2fcontrol_2flocal_5fview_2eproto, "autoagric/control/local_view.proto", 
  &descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto_once, descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fcontrol_2flocal_5fview_2eproto::offsets,
  file_level_metadata_autoagric_2fcontrol_2flocal_5fview_2eproto, file_level_enum_descriptors_autoagric_2fcontrol_2flocal_5fview_2eproto, file_level_service_descriptors_autoagric_2fcontrol_2flocal_5fview_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto_getter() {
  return &descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcontrol_2flocal_5fview_2eproto(&descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto);
namespace autoagric {
namespace control {

// ===================================================================

class LocalView::_Internal {
 public:
  static const ::autoagric::common::Header& header(const LocalView* msg);
  static const ::autoagric::canbus::Chassis& chassis(const LocalView* msg);
  static const ::autoagric::planning::ADCTrajectory& trajectory(const LocalView* msg);
  static const ::autoagric::localization::LocalizationEstimate& localization(const LocalView* msg);
};

const ::autoagric::common::Header&
LocalView::_Internal::header(const LocalView* msg) {
  return *msg->header_;
}
const ::autoagric::canbus::Chassis&
LocalView::_Internal::chassis(const LocalView* msg) {
  return *msg->chassis_;
}
const ::autoagric::planning::ADCTrajectory&
LocalView::_Internal::trajectory(const LocalView* msg) {
  return *msg->trajectory_;
}
const ::autoagric::localization::LocalizationEstimate&
LocalView::_Internal::localization(const LocalView* msg) {
  return *msg->localization_;
}
void LocalView::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void LocalView::clear_chassis() {
  if (GetArenaForAllocation() == nullptr && chassis_ != nullptr) {
    delete chassis_;
  }
  chassis_ = nullptr;
}
void LocalView::clear_trajectory() {
  if (GetArenaForAllocation() == nullptr && trajectory_ != nullptr) {
    delete trajectory_;
  }
  trajectory_ = nullptr;
}
void LocalView::clear_localization() {
  if (GetArenaForAllocation() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
}
LocalView::LocalView(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.control.LocalView)
}
LocalView::LocalView(const LocalView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::autoagric::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_chassis()) {
    chassis_ = new ::autoagric::canbus::Chassis(*from.chassis_);
  } else {
    chassis_ = nullptr;
  }
  if (from._internal_has_trajectory()) {
    trajectory_ = new ::autoagric::planning::ADCTrajectory(*from.trajectory_);
  } else {
    trajectory_ = nullptr;
  }
  if (from._internal_has_localization()) {
    localization_ = new ::autoagric::localization::LocalizationEstimate(*from.localization_);
  } else {
    localization_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.control.LocalView)
}

inline void LocalView::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&localization_) -
    reinterpret_cast<char*>(&header_)) + sizeof(localization_));
}

LocalView::~LocalView() {
  // @@protoc_insertion_point(destructor:autoagric.control.LocalView)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LocalView::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete chassis_;
  if (this != internal_default_instance()) delete trajectory_;
  if (this != internal_default_instance()) delete localization_;
}

void LocalView::ArenaDtor(void* object) {
  LocalView* _this = reinterpret_cast< LocalView* >(object);
  (void)_this;
}
void LocalView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalView::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.control.LocalView)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chassis_ != nullptr) {
    delete chassis_;
  }
  chassis_ = nullptr;
  if (GetArenaForAllocation() == nullptr && trajectory_ != nullptr) {
    delete trajectory_;
  }
  trajectory_ = nullptr;
  if (GetArenaForAllocation() == nullptr && localization_ != nullptr) {
    delete localization_;
  }
  localization_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.canbus.Chassis chassis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.ADCTrajectory trajectory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trajectory(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.localization.LocalizationEstimate localization = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalView::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.control.LocalView)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .autoagric.canbus.Chassis chassis = 2;
  if (this->_internal_has_chassis()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chassis(this), target, stream);
  }

  // .autoagric.planning.ADCTrajectory trajectory = 3;
  if (this->_internal_has_trajectory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trajectory(this), target, stream);
  }

  // .autoagric.localization.LocalizationEstimate localization = 4;
  if (this->_internal_has_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::localization(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.control.LocalView)
  return target;
}

size_t LocalView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.control.LocalView)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .autoagric.canbus.Chassis chassis = 2;
  if (this->_internal_has_chassis()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chassis_);
  }

  // .autoagric.planning.ADCTrajectory trajectory = 3;
  if (this->_internal_has_trajectory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_);
  }

  // .autoagric.localization.LocalizationEstimate localization = 4;
  if (this->_internal_has_localization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localization_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalView::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LocalView::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalView::GetClassData() const { return &_class_data_; }

void LocalView::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LocalView *>(to)->MergeFrom(
      static_cast<const LocalView &>(from));
}


void LocalView::MergeFrom(const LocalView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.control.LocalView)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::autoagric::common::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_chassis()) {
    _internal_mutable_chassis()->::autoagric::canbus::Chassis::MergeFrom(from._internal_chassis());
  }
  if (from._internal_has_trajectory()) {
    _internal_mutable_trajectory()->::autoagric::planning::ADCTrajectory::MergeFrom(from._internal_trajectory());
  }
  if (from._internal_has_localization()) {
    _internal_mutable_localization()->::autoagric::localization::LocalizationEstimate::MergeFrom(from._internal_localization());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalView::CopyFrom(const LocalView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.control.LocalView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalView::IsInitialized() const {
  return true;
}

void LocalView::InternalSwap(LocalView* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalView, localization_)
      + sizeof(LocalView::localization_)
      - PROTOBUF_FIELD_OFFSET(LocalView, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalView::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto_getter, &descriptor_table_autoagric_2fcontrol_2flocal_5fview_2eproto_once,
      file_level_metadata_autoagric_2fcontrol_2flocal_5fview_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::control::LocalView* Arena::CreateMaybeMessage< ::autoagric::control::LocalView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::control::LocalView >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
