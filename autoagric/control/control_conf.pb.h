// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/control/control_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fcontrol_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fcontrol_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/canbus/chassis.pb.h"
#include "autoagric/control/lat_controller_conf.pb.h"
#include "autoagric/control/lon_controller_conf.pb.h"
#include "autoagric/control/mpc_controller_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcontrol_2fcontrol_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcontrol_2fcontrol_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcontrol_2fcontrol_5fconf_2eproto;
namespace autoagric {
namespace control {
class ControlConf;
struct ControlConfDefaultTypeInternal;
extern ControlConfDefaultTypeInternal _ControlConf_default_instance_;
}  // namespace control
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::control::ControlConf* Arena::CreateMaybeMessage<::autoagric::control::ControlConf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace control {

enum ControlConf_ControllerType : int {
  ControlConf_ControllerType_LAT_CONTROLLER = 0,
  ControlConf_ControllerType_LON_CONTROLLER = 1,
  ControlConf_ControllerType_MPC_CONTROLLER = 2,
  ControlConf_ControllerType_ControlConf_ControllerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ControlConf_ControllerType_ControlConf_ControllerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ControlConf_ControllerType_IsValid(int value);
constexpr ControlConf_ControllerType ControlConf_ControllerType_ControllerType_MIN = ControlConf_ControllerType_LAT_CONTROLLER;
constexpr ControlConf_ControllerType ControlConf_ControllerType_ControllerType_MAX = ControlConf_ControllerType_MPC_CONTROLLER;
constexpr int ControlConf_ControllerType_ControllerType_ARRAYSIZE = ControlConf_ControllerType_ControllerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlConf_ControllerType_descriptor();
template<typename T>
inline const std::string& ControlConf_ControllerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlConf_ControllerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlConf_ControllerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlConf_ControllerType_descriptor(), enum_t_value);
}
inline bool ControlConf_ControllerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlConf_ControllerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlConf_ControllerType>(
    ControlConf_ControllerType_descriptor(), name, value);
}
// ===================================================================

class ControlConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.control.ControlConf) */ {
 public:
  inline ControlConf() : ControlConf(nullptr) {}
  ~ControlConf() override;
  explicit constexpr ControlConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlConf(const ControlConf& from);
  ControlConf(ControlConf&& from) noexcept
    : ControlConf() {
    *this = ::std::move(from);
  }

  inline ControlConf& operator=(const ControlConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlConf& operator=(ControlConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlConf* internal_default_instance() {
    return reinterpret_cast<const ControlConf*>(
               &_ControlConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlConf& a, ControlConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.control.ControlConf";
  }
  protected:
  explicit ControlConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ControlConf_ControllerType ControllerType;
  static constexpr ControllerType LAT_CONTROLLER =
    ControlConf_ControllerType_LAT_CONTROLLER;
  static constexpr ControllerType LON_CONTROLLER =
    ControlConf_ControllerType_LON_CONTROLLER;
  static constexpr ControllerType MPC_CONTROLLER =
    ControlConf_ControllerType_MPC_CONTROLLER;
  static inline bool ControllerType_IsValid(int value) {
    return ControlConf_ControllerType_IsValid(value);
  }
  static constexpr ControllerType ControllerType_MIN =
    ControlConf_ControllerType_ControllerType_MIN;
  static constexpr ControllerType ControllerType_MAX =
    ControlConf_ControllerType_ControllerType_MAX;
  static constexpr int ControllerType_ARRAYSIZE =
    ControlConf_ControllerType_ControllerType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ControllerType_descriptor() {
    return ControlConf_ControllerType_descriptor();
  }
  template<typename T>
  static inline const std::string& ControllerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ControllerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ControllerType_Name.");
    return ControlConf_ControllerType_Name(enum_t_value);
  }
  static inline bool ControllerType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ControllerType* value) {
    return ControlConf_ControllerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActiveControllersFieldNumber = 25,
    kLatControllerConfFieldNumber = 28,
    kLonControllerConfFieldNumber = 29,
    kMpcControllerConfFieldNumber = 42,
    kControlTestDurationFieldNumber = 1,
    kEnableCsvDebugFieldNumber = 2,
    kEnableSpeedStationPreviewFieldNumber = 3,
    kIsControlTestModeFieldNumber = 4,
    kUsePreviewSpeedForTableFieldNumber = 5,
    kMaxLocalizationMissNumFieldNumber = 7,
    kMaxChassisMissNumFieldNumber = 8,
    kMaxPlanningMissNumFieldNumber = 9,
    kMaxAccelerationWhenStoppedFieldNumber = 10,
    kSteerAngleRateFieldNumber = 11,
    kEnableInputTimestampCheckFieldNumber = 6,
    kEnableGainSchedulerFieldNumber = 12,
    kSetSteerLimitFieldNumber = 13,
    kEnableSlopeOffsetFieldNumber = 14,
    kEnableNavigationModeErrorFilterFieldNumber = 16,
    kEnableNavigationModePositionUpdateFieldNumber = 17,
    kEnablePersistentEstopFieldNumber = 18,
    kLockSteerSpeedFieldNumber = 15,
    kControlPeriodFieldNumber = 19,
    kMaxPlanningIntervalSecFieldNumber = 20,
    kMaxPlanningDelayThresholdFieldNumber = 21,
    kSoftEstopBrakeFieldNumber = 24,
    kDrivingModeFieldNumber = 22,
    kMaxSteeringPercentageAllowedFieldNumber = 26,
    kMaxStatusIntervalSecFieldNumber = 27,
    kTrajectoryPeriodFieldNumber = 30,
    kChassisPeriodFieldNumber = 31,
    kLocalizationPeriodFieldNumber = 32,
    kMinimumSpeedResolutionFieldNumber = 33,
    kQueryRelativeTimeFieldNumber = 35,
    kMinimumSpeedProtectionFieldNumber = 36,
    kMaxPathRemainWhenStoppedFieldNumber = 37,
    kMaximumForwardSpeedFieldNumber = 38,
    kMaximumBackwardSpeedFieldNumber = 39,
    kMaximumDrivingAccelerationFieldNumber = 40,
    kMaximumDrivingDecelerationFieldNumber = 41,
  };
  // repeated .autoagric.control.ControlConf.ControllerType active_controllers = 25;
  int active_controllers_size() const;
  private:
  int _internal_active_controllers_size() const;
  public:
  void clear_active_controllers();
  private:
  ::autoagric::control::ControlConf_ControllerType _internal_active_controllers(int index) const;
  void _internal_add_active_controllers(::autoagric::control::ControlConf_ControllerType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_active_controllers();
  public:
  ::autoagric::control::ControlConf_ControllerType active_controllers(int index) const;
  void set_active_controllers(int index, ::autoagric::control::ControlConf_ControllerType value);
  void add_active_controllers(::autoagric::control::ControlConf_ControllerType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& active_controllers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_active_controllers();

  // .autoagric.control.LatControllerConf lat_controller_conf = 28;
  bool has_lat_controller_conf() const;
  private:
  bool _internal_has_lat_controller_conf() const;
  public:
  void clear_lat_controller_conf();
  const ::autoagric::control::LatControllerConf& lat_controller_conf() const;
  PROTOBUF_NODISCARD ::autoagric::control::LatControllerConf* release_lat_controller_conf();
  ::autoagric::control::LatControllerConf* mutable_lat_controller_conf();
  void set_allocated_lat_controller_conf(::autoagric::control::LatControllerConf* lat_controller_conf);
  private:
  const ::autoagric::control::LatControllerConf& _internal_lat_controller_conf() const;
  ::autoagric::control::LatControllerConf* _internal_mutable_lat_controller_conf();
  public:
  void unsafe_arena_set_allocated_lat_controller_conf(
      ::autoagric::control::LatControllerConf* lat_controller_conf);
  ::autoagric::control::LatControllerConf* unsafe_arena_release_lat_controller_conf();

  // .autoagric.control.LonControllerConf lon_controller_conf = 29;
  bool has_lon_controller_conf() const;
  private:
  bool _internal_has_lon_controller_conf() const;
  public:
  void clear_lon_controller_conf();
  const ::autoagric::control::LonControllerConf& lon_controller_conf() const;
  PROTOBUF_NODISCARD ::autoagric::control::LonControllerConf* release_lon_controller_conf();
  ::autoagric::control::LonControllerConf* mutable_lon_controller_conf();
  void set_allocated_lon_controller_conf(::autoagric::control::LonControllerConf* lon_controller_conf);
  private:
  const ::autoagric::control::LonControllerConf& _internal_lon_controller_conf() const;
  ::autoagric::control::LonControllerConf* _internal_mutable_lon_controller_conf();
  public:
  void unsafe_arena_set_allocated_lon_controller_conf(
      ::autoagric::control::LonControllerConf* lon_controller_conf);
  ::autoagric::control::LonControllerConf* unsafe_arena_release_lon_controller_conf();

  // .autoagric.control.MPCControllerConf mpc_controller_conf = 42;
  bool has_mpc_controller_conf() const;
  private:
  bool _internal_has_mpc_controller_conf() const;
  public:
  void clear_mpc_controller_conf();
  const ::autoagric::control::MPCControllerConf& mpc_controller_conf() const;
  PROTOBUF_NODISCARD ::autoagric::control::MPCControllerConf* release_mpc_controller_conf();
  ::autoagric::control::MPCControllerConf* mutable_mpc_controller_conf();
  void set_allocated_mpc_controller_conf(::autoagric::control::MPCControllerConf* mpc_controller_conf);
  private:
  const ::autoagric::control::MPCControllerConf& _internal_mpc_controller_conf() const;
  ::autoagric::control::MPCControllerConf* _internal_mutable_mpc_controller_conf();
  public:
  void unsafe_arena_set_allocated_mpc_controller_conf(
      ::autoagric::control::MPCControllerConf* mpc_controller_conf);
  ::autoagric::control::MPCControllerConf* unsafe_arena_release_mpc_controller_conf();

  // double control_test_duration = 1;
  void clear_control_test_duration();
  double control_test_duration() const;
  void set_control_test_duration(double value);
  private:
  double _internal_control_test_duration() const;
  void _internal_set_control_test_duration(double value);
  public:

  // bool enable_csv_debug = 2;
  void clear_enable_csv_debug();
  bool enable_csv_debug() const;
  void set_enable_csv_debug(bool value);
  private:
  bool _internal_enable_csv_debug() const;
  void _internal_set_enable_csv_debug(bool value);
  public:

  // bool enable_speed_station_preview = 3;
  void clear_enable_speed_station_preview();
  bool enable_speed_station_preview() const;
  void set_enable_speed_station_preview(bool value);
  private:
  bool _internal_enable_speed_station_preview() const;
  void _internal_set_enable_speed_station_preview(bool value);
  public:

  // bool is_control_test_mode = 4;
  void clear_is_control_test_mode();
  bool is_control_test_mode() const;
  void set_is_control_test_mode(bool value);
  private:
  bool _internal_is_control_test_mode() const;
  void _internal_set_is_control_test_mode(bool value);
  public:

  // bool use_preview_speed_for_table = 5;
  void clear_use_preview_speed_for_table();
  bool use_preview_speed_for_table() const;
  void set_use_preview_speed_for_table(bool value);
  private:
  bool _internal_use_preview_speed_for_table() const;
  void _internal_set_use_preview_speed_for_table(bool value);
  public:

  // int32 max_localization_miss_num = 7;
  void clear_max_localization_miss_num();
  int32_t max_localization_miss_num() const;
  void set_max_localization_miss_num(int32_t value);
  private:
  int32_t _internal_max_localization_miss_num() const;
  void _internal_set_max_localization_miss_num(int32_t value);
  public:

  // int32 max_chassis_miss_num = 8;
  void clear_max_chassis_miss_num();
  int32_t max_chassis_miss_num() const;
  void set_max_chassis_miss_num(int32_t value);
  private:
  int32_t _internal_max_chassis_miss_num() const;
  void _internal_set_max_chassis_miss_num(int32_t value);
  public:

  // int32 max_planning_miss_num = 9;
  void clear_max_planning_miss_num();
  int32_t max_planning_miss_num() const;
  void set_max_planning_miss_num(int32_t value);
  private:
  int32_t _internal_max_planning_miss_num() const;
  void _internal_set_max_planning_miss_num(int32_t value);
  public:

  // double max_acceleration_when_stopped = 10;
  void clear_max_acceleration_when_stopped();
  double max_acceleration_when_stopped() const;
  void set_max_acceleration_when_stopped(double value);
  private:
  double _internal_max_acceleration_when_stopped() const;
  void _internal_set_max_acceleration_when_stopped(double value);
  public:

  // double steer_angle_rate = 11;
  void clear_steer_angle_rate();
  double steer_angle_rate() const;
  void set_steer_angle_rate(double value);
  private:
  double _internal_steer_angle_rate() const;
  void _internal_set_steer_angle_rate(double value);
  public:

  // bool enable_input_timestamp_check = 6;
  void clear_enable_input_timestamp_check();
  bool enable_input_timestamp_check() const;
  void set_enable_input_timestamp_check(bool value);
  private:
  bool _internal_enable_input_timestamp_check() const;
  void _internal_set_enable_input_timestamp_check(bool value);
  public:

  // bool enable_gain_scheduler = 12;
  void clear_enable_gain_scheduler();
  bool enable_gain_scheduler() const;
  void set_enable_gain_scheduler(bool value);
  private:
  bool _internal_enable_gain_scheduler() const;
  void _internal_set_enable_gain_scheduler(bool value);
  public:

  // bool set_steer_limit = 13;
  void clear_set_steer_limit();
  bool set_steer_limit() const;
  void set_set_steer_limit(bool value);
  private:
  bool _internal_set_steer_limit() const;
  void _internal_set_set_steer_limit(bool value);
  public:

  // bool enable_slope_offset = 14;
  void clear_enable_slope_offset();
  bool enable_slope_offset() const;
  void set_enable_slope_offset(bool value);
  private:
  bool _internal_enable_slope_offset() const;
  void _internal_set_enable_slope_offset(bool value);
  public:

  // bool enable_navigation_mode_error_filter = 16;
  void clear_enable_navigation_mode_error_filter();
  bool enable_navigation_mode_error_filter() const;
  void set_enable_navigation_mode_error_filter(bool value);
  private:
  bool _internal_enable_navigation_mode_error_filter() const;
  void _internal_set_enable_navigation_mode_error_filter(bool value);
  public:

  // bool enable_navigation_mode_position_update = 17;
  void clear_enable_navigation_mode_position_update();
  bool enable_navigation_mode_position_update() const;
  void set_enable_navigation_mode_position_update(bool value);
  private:
  bool _internal_enable_navigation_mode_position_update() const;
  void _internal_set_enable_navigation_mode_position_update(bool value);
  public:

  // bool enable_persistent_estop = 18;
  void clear_enable_persistent_estop();
  bool enable_persistent_estop() const;
  void set_enable_persistent_estop(bool value);
  private:
  bool _internal_enable_persistent_estop() const;
  void _internal_set_enable_persistent_estop(bool value);
  public:

  // double lock_steer_speed = 15;
  void clear_lock_steer_speed();
  double lock_steer_speed() const;
  void set_lock_steer_speed(double value);
  private:
  double _internal_lock_steer_speed() const;
  void _internal_set_lock_steer_speed(double value);
  public:

  // double control_period = 19;
  void clear_control_period();
  double control_period() const;
  void set_control_period(double value);
  private:
  double _internal_control_period() const;
  void _internal_set_control_period(double value);
  public:

  // double max_planning_interval_sec = 20;
  void clear_max_planning_interval_sec();
  double max_planning_interval_sec() const;
  void set_max_planning_interval_sec(double value);
  private:
  double _internal_max_planning_interval_sec() const;
  void _internal_set_max_planning_interval_sec(double value);
  public:

  // double max_planning_delay_threshold = 21;
  void clear_max_planning_delay_threshold();
  double max_planning_delay_threshold() const;
  void set_max_planning_delay_threshold(double value);
  private:
  double _internal_max_planning_delay_threshold() const;
  void _internal_set_max_planning_delay_threshold(double value);
  public:

  // double soft_estop_brake = 24;
  void clear_soft_estop_brake();
  double soft_estop_brake() const;
  void set_soft_estop_brake(double value);
  private:
  double _internal_soft_estop_brake() const;
  void _internal_set_soft_estop_brake(double value);
  public:

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 22;
  void clear_driving_mode();
  ::autoagric::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value);
  private:
  ::autoagric::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value);
  public:

  // int32 max_steering_percentage_allowed = 26;
  void clear_max_steering_percentage_allowed();
  int32_t max_steering_percentage_allowed() const;
  void set_max_steering_percentage_allowed(int32_t value);
  private:
  int32_t _internal_max_steering_percentage_allowed() const;
  void _internal_set_max_steering_percentage_allowed(int32_t value);
  public:

  // double max_status_interval_sec = 27;
  void clear_max_status_interval_sec();
  double max_status_interval_sec() const;
  void set_max_status_interval_sec(double value);
  private:
  double _internal_max_status_interval_sec() const;
  void _internal_set_max_status_interval_sec(double value);
  public:

  // double trajectory_period = 30;
  void clear_trajectory_period();
  double trajectory_period() const;
  void set_trajectory_period(double value);
  private:
  double _internal_trajectory_period() const;
  void _internal_set_trajectory_period(double value);
  public:

  // double chassis_period = 31;
  void clear_chassis_period();
  double chassis_period() const;
  void set_chassis_period(double value);
  private:
  double _internal_chassis_period() const;
  void _internal_set_chassis_period(double value);
  public:

  // double localization_period = 32;
  void clear_localization_period();
  double localization_period() const;
  void set_localization_period(double value);
  private:
  double _internal_localization_period() const;
  void _internal_set_localization_period(double value);
  public:

  // double minimum_speed_resolution = 33;
  void clear_minimum_speed_resolution();
  double minimum_speed_resolution() const;
  void set_minimum_speed_resolution(double value);
  private:
  double _internal_minimum_speed_resolution() const;
  void _internal_set_minimum_speed_resolution(double value);
  public:

  // double query_relative_time = 35;
  void clear_query_relative_time();
  double query_relative_time() const;
  void set_query_relative_time(double value);
  private:
  double _internal_query_relative_time() const;
  void _internal_set_query_relative_time(double value);
  public:

  // double minimum_speed_protection = 36;
  void clear_minimum_speed_protection();
  double minimum_speed_protection() const;
  void set_minimum_speed_protection(double value);
  private:
  double _internal_minimum_speed_protection() const;
  void _internal_set_minimum_speed_protection(double value);
  public:

  // double max_path_remain_when_stopped = 37;
  void clear_max_path_remain_when_stopped();
  double max_path_remain_when_stopped() const;
  void set_max_path_remain_when_stopped(double value);
  private:
  double _internal_max_path_remain_when_stopped() const;
  void _internal_set_max_path_remain_when_stopped(double value);
  public:

  // double maximum_forward_speed = 38;
  void clear_maximum_forward_speed();
  double maximum_forward_speed() const;
  void set_maximum_forward_speed(double value);
  private:
  double _internal_maximum_forward_speed() const;
  void _internal_set_maximum_forward_speed(double value);
  public:

  // double maximum_backward_speed = 39;
  void clear_maximum_backward_speed();
  double maximum_backward_speed() const;
  void set_maximum_backward_speed(double value);
  private:
  double _internal_maximum_backward_speed() const;
  void _internal_set_maximum_backward_speed(double value);
  public:

  // double maximum_driving_acceleration = 40;
  void clear_maximum_driving_acceleration();
  double maximum_driving_acceleration() const;
  void set_maximum_driving_acceleration(double value);
  private:
  double _internal_maximum_driving_acceleration() const;
  void _internal_set_maximum_driving_acceleration(double value);
  public:

  // double maximum_driving_deceleration = 41;
  void clear_maximum_driving_deceleration();
  double maximum_driving_deceleration() const;
  void set_maximum_driving_deceleration(double value);
  private:
  double _internal_maximum_driving_deceleration() const;
  void _internal_set_maximum_driving_deceleration(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.control.ControlConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> active_controllers_;
  mutable std::atomic<int> _active_controllers_cached_byte_size_;
  ::autoagric::control::LatControllerConf* lat_controller_conf_;
  ::autoagric::control::LonControllerConf* lon_controller_conf_;
  ::autoagric::control::MPCControllerConf* mpc_controller_conf_;
  double control_test_duration_;
  bool enable_csv_debug_;
  bool enable_speed_station_preview_;
  bool is_control_test_mode_;
  bool use_preview_speed_for_table_;
  int32_t max_localization_miss_num_;
  int32_t max_chassis_miss_num_;
  int32_t max_planning_miss_num_;
  double max_acceleration_when_stopped_;
  double steer_angle_rate_;
  bool enable_input_timestamp_check_;
  bool enable_gain_scheduler_;
  bool set_steer_limit_;
  bool enable_slope_offset_;
  bool enable_navigation_mode_error_filter_;
  bool enable_navigation_mode_position_update_;
  bool enable_persistent_estop_;
  double lock_steer_speed_;
  double control_period_;
  double max_planning_interval_sec_;
  double max_planning_delay_threshold_;
  double soft_estop_brake_;
  int driving_mode_;
  int32_t max_steering_percentage_allowed_;
  double max_status_interval_sec_;
  double trajectory_period_;
  double chassis_period_;
  double localization_period_;
  double minimum_speed_resolution_;
  double query_relative_time_;
  double minimum_speed_protection_;
  double max_path_remain_when_stopped_;
  double maximum_forward_speed_;
  double maximum_backward_speed_;
  double maximum_driving_acceleration_;
  double maximum_driving_deceleration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fcontrol_2fcontrol_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlConf

// double control_test_duration = 1;
inline void ControlConf::clear_control_test_duration() {
  control_test_duration_ = 0;
}
inline double ControlConf::_internal_control_test_duration() const {
  return control_test_duration_;
}
inline double ControlConf::control_test_duration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.control_test_duration)
  return _internal_control_test_duration();
}
inline void ControlConf::_internal_set_control_test_duration(double value) {
  
  control_test_duration_ = value;
}
inline void ControlConf::set_control_test_duration(double value) {
  _internal_set_control_test_duration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.control_test_duration)
}

// bool enable_csv_debug = 2;
inline void ControlConf::clear_enable_csv_debug() {
  enable_csv_debug_ = false;
}
inline bool ControlConf::_internal_enable_csv_debug() const {
  return enable_csv_debug_;
}
inline bool ControlConf::enable_csv_debug() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_csv_debug)
  return _internal_enable_csv_debug();
}
inline void ControlConf::_internal_set_enable_csv_debug(bool value) {
  
  enable_csv_debug_ = value;
}
inline void ControlConf::set_enable_csv_debug(bool value) {
  _internal_set_enable_csv_debug(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_csv_debug)
}

// bool enable_speed_station_preview = 3;
inline void ControlConf::clear_enable_speed_station_preview() {
  enable_speed_station_preview_ = false;
}
inline bool ControlConf::_internal_enable_speed_station_preview() const {
  return enable_speed_station_preview_;
}
inline bool ControlConf::enable_speed_station_preview() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_speed_station_preview)
  return _internal_enable_speed_station_preview();
}
inline void ControlConf::_internal_set_enable_speed_station_preview(bool value) {
  
  enable_speed_station_preview_ = value;
}
inline void ControlConf::set_enable_speed_station_preview(bool value) {
  _internal_set_enable_speed_station_preview(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_speed_station_preview)
}

// bool is_control_test_mode = 4;
inline void ControlConf::clear_is_control_test_mode() {
  is_control_test_mode_ = false;
}
inline bool ControlConf::_internal_is_control_test_mode() const {
  return is_control_test_mode_;
}
inline bool ControlConf::is_control_test_mode() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.is_control_test_mode)
  return _internal_is_control_test_mode();
}
inline void ControlConf::_internal_set_is_control_test_mode(bool value) {
  
  is_control_test_mode_ = value;
}
inline void ControlConf::set_is_control_test_mode(bool value) {
  _internal_set_is_control_test_mode(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.is_control_test_mode)
}

// bool use_preview_speed_for_table = 5;
inline void ControlConf::clear_use_preview_speed_for_table() {
  use_preview_speed_for_table_ = false;
}
inline bool ControlConf::_internal_use_preview_speed_for_table() const {
  return use_preview_speed_for_table_;
}
inline bool ControlConf::use_preview_speed_for_table() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.use_preview_speed_for_table)
  return _internal_use_preview_speed_for_table();
}
inline void ControlConf::_internal_set_use_preview_speed_for_table(bool value) {
  
  use_preview_speed_for_table_ = value;
}
inline void ControlConf::set_use_preview_speed_for_table(bool value) {
  _internal_set_use_preview_speed_for_table(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.use_preview_speed_for_table)
}

// bool enable_input_timestamp_check = 6;
inline void ControlConf::clear_enable_input_timestamp_check() {
  enable_input_timestamp_check_ = false;
}
inline bool ControlConf::_internal_enable_input_timestamp_check() const {
  return enable_input_timestamp_check_;
}
inline bool ControlConf::enable_input_timestamp_check() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_input_timestamp_check)
  return _internal_enable_input_timestamp_check();
}
inline void ControlConf::_internal_set_enable_input_timestamp_check(bool value) {
  
  enable_input_timestamp_check_ = value;
}
inline void ControlConf::set_enable_input_timestamp_check(bool value) {
  _internal_set_enable_input_timestamp_check(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_input_timestamp_check)
}

// int32 max_localization_miss_num = 7;
inline void ControlConf::clear_max_localization_miss_num() {
  max_localization_miss_num_ = 0;
}
inline int32_t ControlConf::_internal_max_localization_miss_num() const {
  return max_localization_miss_num_;
}
inline int32_t ControlConf::max_localization_miss_num() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_localization_miss_num)
  return _internal_max_localization_miss_num();
}
inline void ControlConf::_internal_set_max_localization_miss_num(int32_t value) {
  
  max_localization_miss_num_ = value;
}
inline void ControlConf::set_max_localization_miss_num(int32_t value) {
  _internal_set_max_localization_miss_num(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_localization_miss_num)
}

// int32 max_chassis_miss_num = 8;
inline void ControlConf::clear_max_chassis_miss_num() {
  max_chassis_miss_num_ = 0;
}
inline int32_t ControlConf::_internal_max_chassis_miss_num() const {
  return max_chassis_miss_num_;
}
inline int32_t ControlConf::max_chassis_miss_num() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_chassis_miss_num)
  return _internal_max_chassis_miss_num();
}
inline void ControlConf::_internal_set_max_chassis_miss_num(int32_t value) {
  
  max_chassis_miss_num_ = value;
}
inline void ControlConf::set_max_chassis_miss_num(int32_t value) {
  _internal_set_max_chassis_miss_num(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_chassis_miss_num)
}

// int32 max_planning_miss_num = 9;
inline void ControlConf::clear_max_planning_miss_num() {
  max_planning_miss_num_ = 0;
}
inline int32_t ControlConf::_internal_max_planning_miss_num() const {
  return max_planning_miss_num_;
}
inline int32_t ControlConf::max_planning_miss_num() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_planning_miss_num)
  return _internal_max_planning_miss_num();
}
inline void ControlConf::_internal_set_max_planning_miss_num(int32_t value) {
  
  max_planning_miss_num_ = value;
}
inline void ControlConf::set_max_planning_miss_num(int32_t value) {
  _internal_set_max_planning_miss_num(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_planning_miss_num)
}

// double max_acceleration_when_stopped = 10;
inline void ControlConf::clear_max_acceleration_when_stopped() {
  max_acceleration_when_stopped_ = 0;
}
inline double ControlConf::_internal_max_acceleration_when_stopped() const {
  return max_acceleration_when_stopped_;
}
inline double ControlConf::max_acceleration_when_stopped() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_acceleration_when_stopped)
  return _internal_max_acceleration_when_stopped();
}
inline void ControlConf::_internal_set_max_acceleration_when_stopped(double value) {
  
  max_acceleration_when_stopped_ = value;
}
inline void ControlConf::set_max_acceleration_when_stopped(double value) {
  _internal_set_max_acceleration_when_stopped(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_acceleration_when_stopped)
}

// double steer_angle_rate = 11;
inline void ControlConf::clear_steer_angle_rate() {
  steer_angle_rate_ = 0;
}
inline double ControlConf::_internal_steer_angle_rate() const {
  return steer_angle_rate_;
}
inline double ControlConf::steer_angle_rate() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.steer_angle_rate)
  return _internal_steer_angle_rate();
}
inline void ControlConf::_internal_set_steer_angle_rate(double value) {
  
  steer_angle_rate_ = value;
}
inline void ControlConf::set_steer_angle_rate(double value) {
  _internal_set_steer_angle_rate(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.steer_angle_rate)
}

// bool enable_gain_scheduler = 12;
inline void ControlConf::clear_enable_gain_scheduler() {
  enable_gain_scheduler_ = false;
}
inline bool ControlConf::_internal_enable_gain_scheduler() const {
  return enable_gain_scheduler_;
}
inline bool ControlConf::enable_gain_scheduler() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_gain_scheduler)
  return _internal_enable_gain_scheduler();
}
inline void ControlConf::_internal_set_enable_gain_scheduler(bool value) {
  
  enable_gain_scheduler_ = value;
}
inline void ControlConf::set_enable_gain_scheduler(bool value) {
  _internal_set_enable_gain_scheduler(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_gain_scheduler)
}

// bool set_steer_limit = 13;
inline void ControlConf::clear_set_steer_limit() {
  set_steer_limit_ = false;
}
inline bool ControlConf::_internal_set_steer_limit() const {
  return set_steer_limit_;
}
inline bool ControlConf::set_steer_limit() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.set_steer_limit)
  return _internal_set_steer_limit();
}
inline void ControlConf::_internal_set_set_steer_limit(bool value) {
  
  set_steer_limit_ = value;
}
inline void ControlConf::set_set_steer_limit(bool value) {
  _internal_set_set_steer_limit(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.set_steer_limit)
}

// bool enable_slope_offset = 14;
inline void ControlConf::clear_enable_slope_offset() {
  enable_slope_offset_ = false;
}
inline bool ControlConf::_internal_enable_slope_offset() const {
  return enable_slope_offset_;
}
inline bool ControlConf::enable_slope_offset() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_slope_offset)
  return _internal_enable_slope_offset();
}
inline void ControlConf::_internal_set_enable_slope_offset(bool value) {
  
  enable_slope_offset_ = value;
}
inline void ControlConf::set_enable_slope_offset(bool value) {
  _internal_set_enable_slope_offset(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_slope_offset)
}

// double lock_steer_speed = 15;
inline void ControlConf::clear_lock_steer_speed() {
  lock_steer_speed_ = 0;
}
inline double ControlConf::_internal_lock_steer_speed() const {
  return lock_steer_speed_;
}
inline double ControlConf::lock_steer_speed() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.lock_steer_speed)
  return _internal_lock_steer_speed();
}
inline void ControlConf::_internal_set_lock_steer_speed(double value) {
  
  lock_steer_speed_ = value;
}
inline void ControlConf::set_lock_steer_speed(double value) {
  _internal_set_lock_steer_speed(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.lock_steer_speed)
}

// bool enable_navigation_mode_error_filter = 16;
inline void ControlConf::clear_enable_navigation_mode_error_filter() {
  enable_navigation_mode_error_filter_ = false;
}
inline bool ControlConf::_internal_enable_navigation_mode_error_filter() const {
  return enable_navigation_mode_error_filter_;
}
inline bool ControlConf::enable_navigation_mode_error_filter() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_navigation_mode_error_filter)
  return _internal_enable_navigation_mode_error_filter();
}
inline void ControlConf::_internal_set_enable_navigation_mode_error_filter(bool value) {
  
  enable_navigation_mode_error_filter_ = value;
}
inline void ControlConf::set_enable_navigation_mode_error_filter(bool value) {
  _internal_set_enable_navigation_mode_error_filter(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_navigation_mode_error_filter)
}

// bool enable_navigation_mode_position_update = 17;
inline void ControlConf::clear_enable_navigation_mode_position_update() {
  enable_navigation_mode_position_update_ = false;
}
inline bool ControlConf::_internal_enable_navigation_mode_position_update() const {
  return enable_navigation_mode_position_update_;
}
inline bool ControlConf::enable_navigation_mode_position_update() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_navigation_mode_position_update)
  return _internal_enable_navigation_mode_position_update();
}
inline void ControlConf::_internal_set_enable_navigation_mode_position_update(bool value) {
  
  enable_navigation_mode_position_update_ = value;
}
inline void ControlConf::set_enable_navigation_mode_position_update(bool value) {
  _internal_set_enable_navigation_mode_position_update(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_navigation_mode_position_update)
}

// bool enable_persistent_estop = 18;
inline void ControlConf::clear_enable_persistent_estop() {
  enable_persistent_estop_ = false;
}
inline bool ControlConf::_internal_enable_persistent_estop() const {
  return enable_persistent_estop_;
}
inline bool ControlConf::enable_persistent_estop() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.enable_persistent_estop)
  return _internal_enable_persistent_estop();
}
inline void ControlConf::_internal_set_enable_persistent_estop(bool value) {
  
  enable_persistent_estop_ = value;
}
inline void ControlConf::set_enable_persistent_estop(bool value) {
  _internal_set_enable_persistent_estop(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.enable_persistent_estop)
}

// double control_period = 19;
inline void ControlConf::clear_control_period() {
  control_period_ = 0;
}
inline double ControlConf::_internal_control_period() const {
  return control_period_;
}
inline double ControlConf::control_period() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.control_period)
  return _internal_control_period();
}
inline void ControlConf::_internal_set_control_period(double value) {
  
  control_period_ = value;
}
inline void ControlConf::set_control_period(double value) {
  _internal_set_control_period(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.control_period)
}

// double max_planning_interval_sec = 20;
inline void ControlConf::clear_max_planning_interval_sec() {
  max_planning_interval_sec_ = 0;
}
inline double ControlConf::_internal_max_planning_interval_sec() const {
  return max_planning_interval_sec_;
}
inline double ControlConf::max_planning_interval_sec() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_planning_interval_sec)
  return _internal_max_planning_interval_sec();
}
inline void ControlConf::_internal_set_max_planning_interval_sec(double value) {
  
  max_planning_interval_sec_ = value;
}
inline void ControlConf::set_max_planning_interval_sec(double value) {
  _internal_set_max_planning_interval_sec(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_planning_interval_sec)
}

// double max_planning_delay_threshold = 21;
inline void ControlConf::clear_max_planning_delay_threshold() {
  max_planning_delay_threshold_ = 0;
}
inline double ControlConf::_internal_max_planning_delay_threshold() const {
  return max_planning_delay_threshold_;
}
inline double ControlConf::max_planning_delay_threshold() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_planning_delay_threshold)
  return _internal_max_planning_delay_threshold();
}
inline void ControlConf::_internal_set_max_planning_delay_threshold(double value) {
  
  max_planning_delay_threshold_ = value;
}
inline void ControlConf::set_max_planning_delay_threshold(double value) {
  _internal_set_max_planning_delay_threshold(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_planning_delay_threshold)
}

// .autoagric.canbus.Chassis.DrivingMode driving_mode = 22;
inline void ControlConf::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::autoagric::canbus::Chassis_DrivingMode ControlConf::_internal_driving_mode() const {
  return static_cast< ::autoagric::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline ::autoagric::canbus::Chassis_DrivingMode ControlConf::driving_mode() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.driving_mode)
  return _internal_driving_mode();
}
inline void ControlConf::_internal_set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value) {
  
  driving_mode_ = value;
}
inline void ControlConf::set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.driving_mode)
}

// double soft_estop_brake = 24;
inline void ControlConf::clear_soft_estop_brake() {
  soft_estop_brake_ = 0;
}
inline double ControlConf::_internal_soft_estop_brake() const {
  return soft_estop_brake_;
}
inline double ControlConf::soft_estop_brake() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.soft_estop_brake)
  return _internal_soft_estop_brake();
}
inline void ControlConf::_internal_set_soft_estop_brake(double value) {
  
  soft_estop_brake_ = value;
}
inline void ControlConf::set_soft_estop_brake(double value) {
  _internal_set_soft_estop_brake(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.soft_estop_brake)
}

// repeated .autoagric.control.ControlConf.ControllerType active_controllers = 25;
inline int ControlConf::_internal_active_controllers_size() const {
  return active_controllers_.size();
}
inline int ControlConf::active_controllers_size() const {
  return _internal_active_controllers_size();
}
inline void ControlConf::clear_active_controllers() {
  active_controllers_.Clear();
}
inline ::autoagric::control::ControlConf_ControllerType ControlConf::_internal_active_controllers(int index) const {
  return static_cast< ::autoagric::control::ControlConf_ControllerType >(active_controllers_.Get(index));
}
inline ::autoagric::control::ControlConf_ControllerType ControlConf::active_controllers(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.active_controllers)
  return _internal_active_controllers(index);
}
inline void ControlConf::set_active_controllers(int index, ::autoagric::control::ControlConf_ControllerType value) {
  active_controllers_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.active_controllers)
}
inline void ControlConf::_internal_add_active_controllers(::autoagric::control::ControlConf_ControllerType value) {
  active_controllers_.Add(value);
}
inline void ControlConf::add_active_controllers(::autoagric::control::ControlConf_ControllerType value) {
  _internal_add_active_controllers(value);
  // @@protoc_insertion_point(field_add:autoagric.control.ControlConf.active_controllers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ControlConf::active_controllers() const {
  // @@protoc_insertion_point(field_list:autoagric.control.ControlConf.active_controllers)
  return active_controllers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ControlConf::_internal_mutable_active_controllers() {
  return &active_controllers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ControlConf::mutable_active_controllers() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.control.ControlConf.active_controllers)
  return _internal_mutable_active_controllers();
}

// int32 max_steering_percentage_allowed = 26;
inline void ControlConf::clear_max_steering_percentage_allowed() {
  max_steering_percentage_allowed_ = 0;
}
inline int32_t ControlConf::_internal_max_steering_percentage_allowed() const {
  return max_steering_percentage_allowed_;
}
inline int32_t ControlConf::max_steering_percentage_allowed() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_steering_percentage_allowed)
  return _internal_max_steering_percentage_allowed();
}
inline void ControlConf::_internal_set_max_steering_percentage_allowed(int32_t value) {
  
  max_steering_percentage_allowed_ = value;
}
inline void ControlConf::set_max_steering_percentage_allowed(int32_t value) {
  _internal_set_max_steering_percentage_allowed(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_steering_percentage_allowed)
}

// double max_status_interval_sec = 27;
inline void ControlConf::clear_max_status_interval_sec() {
  max_status_interval_sec_ = 0;
}
inline double ControlConf::_internal_max_status_interval_sec() const {
  return max_status_interval_sec_;
}
inline double ControlConf::max_status_interval_sec() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_status_interval_sec)
  return _internal_max_status_interval_sec();
}
inline void ControlConf::_internal_set_max_status_interval_sec(double value) {
  
  max_status_interval_sec_ = value;
}
inline void ControlConf::set_max_status_interval_sec(double value) {
  _internal_set_max_status_interval_sec(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_status_interval_sec)
}

// .autoagric.control.LatControllerConf lat_controller_conf = 28;
inline bool ControlConf::_internal_has_lat_controller_conf() const {
  return this != internal_default_instance() && lat_controller_conf_ != nullptr;
}
inline bool ControlConf::has_lat_controller_conf() const {
  return _internal_has_lat_controller_conf();
}
inline const ::autoagric::control::LatControllerConf& ControlConf::_internal_lat_controller_conf() const {
  const ::autoagric::control::LatControllerConf* p = lat_controller_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::LatControllerConf&>(
      ::autoagric::control::_LatControllerConf_default_instance_);
}
inline const ::autoagric::control::LatControllerConf& ControlConf::lat_controller_conf() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.lat_controller_conf)
  return _internal_lat_controller_conf();
}
inline void ControlConf::unsafe_arena_set_allocated_lat_controller_conf(
    ::autoagric::control::LatControllerConf* lat_controller_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_controller_conf_);
  }
  lat_controller_conf_ = lat_controller_conf;
  if (lat_controller_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.ControlConf.lat_controller_conf)
}
inline ::autoagric::control::LatControllerConf* ControlConf::release_lat_controller_conf() {
  
  ::autoagric::control::LatControllerConf* temp = lat_controller_conf_;
  lat_controller_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::LatControllerConf* ControlConf::unsafe_arena_release_lat_controller_conf() {
  // @@protoc_insertion_point(field_release:autoagric.control.ControlConf.lat_controller_conf)
  
  ::autoagric::control::LatControllerConf* temp = lat_controller_conf_;
  lat_controller_conf_ = nullptr;
  return temp;
}
inline ::autoagric::control::LatControllerConf* ControlConf::_internal_mutable_lat_controller_conf() {
  
  if (lat_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::LatControllerConf>(GetArenaForAllocation());
    lat_controller_conf_ = p;
  }
  return lat_controller_conf_;
}
inline ::autoagric::control::LatControllerConf* ControlConf::mutable_lat_controller_conf() {
  ::autoagric::control::LatControllerConf* _msg = _internal_mutable_lat_controller_conf();
  // @@protoc_insertion_point(field_mutable:autoagric.control.ControlConf.lat_controller_conf)
  return _msg;
}
inline void ControlConf::set_allocated_lat_controller_conf(::autoagric::control::LatControllerConf* lat_controller_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_controller_conf_);
  }
  if (lat_controller_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lat_controller_conf));
    if (message_arena != submessage_arena) {
      lat_controller_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lat_controller_conf, submessage_arena);
    }
    
  } else {
    
  }
  lat_controller_conf_ = lat_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.ControlConf.lat_controller_conf)
}

// .autoagric.control.LonControllerConf lon_controller_conf = 29;
inline bool ControlConf::_internal_has_lon_controller_conf() const {
  return this != internal_default_instance() && lon_controller_conf_ != nullptr;
}
inline bool ControlConf::has_lon_controller_conf() const {
  return _internal_has_lon_controller_conf();
}
inline const ::autoagric::control::LonControllerConf& ControlConf::_internal_lon_controller_conf() const {
  const ::autoagric::control::LonControllerConf* p = lon_controller_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::LonControllerConf&>(
      ::autoagric::control::_LonControllerConf_default_instance_);
}
inline const ::autoagric::control::LonControllerConf& ControlConf::lon_controller_conf() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.lon_controller_conf)
  return _internal_lon_controller_conf();
}
inline void ControlConf::unsafe_arena_set_allocated_lon_controller_conf(
    ::autoagric::control::LonControllerConf* lon_controller_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_controller_conf_);
  }
  lon_controller_conf_ = lon_controller_conf;
  if (lon_controller_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.ControlConf.lon_controller_conf)
}
inline ::autoagric::control::LonControllerConf* ControlConf::release_lon_controller_conf() {
  
  ::autoagric::control::LonControllerConf* temp = lon_controller_conf_;
  lon_controller_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::LonControllerConf* ControlConf::unsafe_arena_release_lon_controller_conf() {
  // @@protoc_insertion_point(field_release:autoagric.control.ControlConf.lon_controller_conf)
  
  ::autoagric::control::LonControllerConf* temp = lon_controller_conf_;
  lon_controller_conf_ = nullptr;
  return temp;
}
inline ::autoagric::control::LonControllerConf* ControlConf::_internal_mutable_lon_controller_conf() {
  
  if (lon_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::LonControllerConf>(GetArenaForAllocation());
    lon_controller_conf_ = p;
  }
  return lon_controller_conf_;
}
inline ::autoagric::control::LonControllerConf* ControlConf::mutable_lon_controller_conf() {
  ::autoagric::control::LonControllerConf* _msg = _internal_mutable_lon_controller_conf();
  // @@protoc_insertion_point(field_mutable:autoagric.control.ControlConf.lon_controller_conf)
  return _msg;
}
inline void ControlConf::set_allocated_lon_controller_conf(::autoagric::control::LonControllerConf* lon_controller_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_controller_conf_);
  }
  if (lon_controller_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lon_controller_conf));
    if (message_arena != submessage_arena) {
      lon_controller_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lon_controller_conf, submessage_arena);
    }
    
  } else {
    
  }
  lon_controller_conf_ = lon_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.ControlConf.lon_controller_conf)
}

// double trajectory_period = 30;
inline void ControlConf::clear_trajectory_period() {
  trajectory_period_ = 0;
}
inline double ControlConf::_internal_trajectory_period() const {
  return trajectory_period_;
}
inline double ControlConf::trajectory_period() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.trajectory_period)
  return _internal_trajectory_period();
}
inline void ControlConf::_internal_set_trajectory_period(double value) {
  
  trajectory_period_ = value;
}
inline void ControlConf::set_trajectory_period(double value) {
  _internal_set_trajectory_period(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.trajectory_period)
}

// double chassis_period = 31;
inline void ControlConf::clear_chassis_period() {
  chassis_period_ = 0;
}
inline double ControlConf::_internal_chassis_period() const {
  return chassis_period_;
}
inline double ControlConf::chassis_period() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.chassis_period)
  return _internal_chassis_period();
}
inline void ControlConf::_internal_set_chassis_period(double value) {
  
  chassis_period_ = value;
}
inline void ControlConf::set_chassis_period(double value) {
  _internal_set_chassis_period(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.chassis_period)
}

// double localization_period = 32;
inline void ControlConf::clear_localization_period() {
  localization_period_ = 0;
}
inline double ControlConf::_internal_localization_period() const {
  return localization_period_;
}
inline double ControlConf::localization_period() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.localization_period)
  return _internal_localization_period();
}
inline void ControlConf::_internal_set_localization_period(double value) {
  
  localization_period_ = value;
}
inline void ControlConf::set_localization_period(double value) {
  _internal_set_localization_period(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.localization_period)
}

// double minimum_speed_resolution = 33;
inline void ControlConf::clear_minimum_speed_resolution() {
  minimum_speed_resolution_ = 0;
}
inline double ControlConf::_internal_minimum_speed_resolution() const {
  return minimum_speed_resolution_;
}
inline double ControlConf::minimum_speed_resolution() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.minimum_speed_resolution)
  return _internal_minimum_speed_resolution();
}
inline void ControlConf::_internal_set_minimum_speed_resolution(double value) {
  
  minimum_speed_resolution_ = value;
}
inline void ControlConf::set_minimum_speed_resolution(double value) {
  _internal_set_minimum_speed_resolution(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.minimum_speed_resolution)
}

// double query_relative_time = 35;
inline void ControlConf::clear_query_relative_time() {
  query_relative_time_ = 0;
}
inline double ControlConf::_internal_query_relative_time() const {
  return query_relative_time_;
}
inline double ControlConf::query_relative_time() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.query_relative_time)
  return _internal_query_relative_time();
}
inline void ControlConf::_internal_set_query_relative_time(double value) {
  
  query_relative_time_ = value;
}
inline void ControlConf::set_query_relative_time(double value) {
  _internal_set_query_relative_time(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.query_relative_time)
}

// double minimum_speed_protection = 36;
inline void ControlConf::clear_minimum_speed_protection() {
  minimum_speed_protection_ = 0;
}
inline double ControlConf::_internal_minimum_speed_protection() const {
  return minimum_speed_protection_;
}
inline double ControlConf::minimum_speed_protection() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.minimum_speed_protection)
  return _internal_minimum_speed_protection();
}
inline void ControlConf::_internal_set_minimum_speed_protection(double value) {
  
  minimum_speed_protection_ = value;
}
inline void ControlConf::set_minimum_speed_protection(double value) {
  _internal_set_minimum_speed_protection(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.minimum_speed_protection)
}

// double max_path_remain_when_stopped = 37;
inline void ControlConf::clear_max_path_remain_when_stopped() {
  max_path_remain_when_stopped_ = 0;
}
inline double ControlConf::_internal_max_path_remain_when_stopped() const {
  return max_path_remain_when_stopped_;
}
inline double ControlConf::max_path_remain_when_stopped() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.max_path_remain_when_stopped)
  return _internal_max_path_remain_when_stopped();
}
inline void ControlConf::_internal_set_max_path_remain_when_stopped(double value) {
  
  max_path_remain_when_stopped_ = value;
}
inline void ControlConf::set_max_path_remain_when_stopped(double value) {
  _internal_set_max_path_remain_when_stopped(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.max_path_remain_when_stopped)
}

// double maximum_forward_speed = 38;
inline void ControlConf::clear_maximum_forward_speed() {
  maximum_forward_speed_ = 0;
}
inline double ControlConf::_internal_maximum_forward_speed() const {
  return maximum_forward_speed_;
}
inline double ControlConf::maximum_forward_speed() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.maximum_forward_speed)
  return _internal_maximum_forward_speed();
}
inline void ControlConf::_internal_set_maximum_forward_speed(double value) {
  
  maximum_forward_speed_ = value;
}
inline void ControlConf::set_maximum_forward_speed(double value) {
  _internal_set_maximum_forward_speed(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.maximum_forward_speed)
}

// double maximum_backward_speed = 39;
inline void ControlConf::clear_maximum_backward_speed() {
  maximum_backward_speed_ = 0;
}
inline double ControlConf::_internal_maximum_backward_speed() const {
  return maximum_backward_speed_;
}
inline double ControlConf::maximum_backward_speed() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.maximum_backward_speed)
  return _internal_maximum_backward_speed();
}
inline void ControlConf::_internal_set_maximum_backward_speed(double value) {
  
  maximum_backward_speed_ = value;
}
inline void ControlConf::set_maximum_backward_speed(double value) {
  _internal_set_maximum_backward_speed(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.maximum_backward_speed)
}

// double maximum_driving_acceleration = 40;
inline void ControlConf::clear_maximum_driving_acceleration() {
  maximum_driving_acceleration_ = 0;
}
inline double ControlConf::_internal_maximum_driving_acceleration() const {
  return maximum_driving_acceleration_;
}
inline double ControlConf::maximum_driving_acceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.maximum_driving_acceleration)
  return _internal_maximum_driving_acceleration();
}
inline void ControlConf::_internal_set_maximum_driving_acceleration(double value) {
  
  maximum_driving_acceleration_ = value;
}
inline void ControlConf::set_maximum_driving_acceleration(double value) {
  _internal_set_maximum_driving_acceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.maximum_driving_acceleration)
}

// double maximum_driving_deceleration = 41;
inline void ControlConf::clear_maximum_driving_deceleration() {
  maximum_driving_deceleration_ = 0;
}
inline double ControlConf::_internal_maximum_driving_deceleration() const {
  return maximum_driving_deceleration_;
}
inline double ControlConf::maximum_driving_deceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.maximum_driving_deceleration)
  return _internal_maximum_driving_deceleration();
}
inline void ControlConf::_internal_set_maximum_driving_deceleration(double value) {
  
  maximum_driving_deceleration_ = value;
}
inline void ControlConf::set_maximum_driving_deceleration(double value) {
  _internal_set_maximum_driving_deceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.control.ControlConf.maximum_driving_deceleration)
}

// .autoagric.control.MPCControllerConf mpc_controller_conf = 42;
inline bool ControlConf::_internal_has_mpc_controller_conf() const {
  return this != internal_default_instance() && mpc_controller_conf_ != nullptr;
}
inline bool ControlConf::has_mpc_controller_conf() const {
  return _internal_has_mpc_controller_conf();
}
inline const ::autoagric::control::MPCControllerConf& ControlConf::_internal_mpc_controller_conf() const {
  const ::autoagric::control::MPCControllerConf* p = mpc_controller_conf_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::control::MPCControllerConf&>(
      ::autoagric::control::_MPCControllerConf_default_instance_);
}
inline const ::autoagric::control::MPCControllerConf& ControlConf::mpc_controller_conf() const {
  // @@protoc_insertion_point(field_get:autoagric.control.ControlConf.mpc_controller_conf)
  return _internal_mpc_controller_conf();
}
inline void ControlConf::unsafe_arena_set_allocated_mpc_controller_conf(
    ::autoagric::control::MPCControllerConf* mpc_controller_conf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpc_controller_conf_);
  }
  mpc_controller_conf_ = mpc_controller_conf;
  if (mpc_controller_conf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.control.ControlConf.mpc_controller_conf)
}
inline ::autoagric::control::MPCControllerConf* ControlConf::release_mpc_controller_conf() {
  
  ::autoagric::control::MPCControllerConf* temp = mpc_controller_conf_;
  mpc_controller_conf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::control::MPCControllerConf* ControlConf::unsafe_arena_release_mpc_controller_conf() {
  // @@protoc_insertion_point(field_release:autoagric.control.ControlConf.mpc_controller_conf)
  
  ::autoagric::control::MPCControllerConf* temp = mpc_controller_conf_;
  mpc_controller_conf_ = nullptr;
  return temp;
}
inline ::autoagric::control::MPCControllerConf* ControlConf::_internal_mutable_mpc_controller_conf() {
  
  if (mpc_controller_conf_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::control::MPCControllerConf>(GetArenaForAllocation());
    mpc_controller_conf_ = p;
  }
  return mpc_controller_conf_;
}
inline ::autoagric::control::MPCControllerConf* ControlConf::mutable_mpc_controller_conf() {
  ::autoagric::control::MPCControllerConf* _msg = _internal_mutable_mpc_controller_conf();
  // @@protoc_insertion_point(field_mutable:autoagric.control.ControlConf.mpc_controller_conf)
  return _msg;
}
inline void ControlConf::set_allocated_mpc_controller_conf(::autoagric::control::MPCControllerConf* mpc_controller_conf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpc_controller_conf_);
  }
  if (mpc_controller_conf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mpc_controller_conf));
    if (message_arena != submessage_arena) {
      mpc_controller_conf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mpc_controller_conf, submessage_arena);
    }
    
  } else {
    
  }
  mpc_controller_conf_ = mpc_controller_conf;
  // @@protoc_insertion_point(field_set_allocated:autoagric.control.ControlConf.mpc_controller_conf)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace control
}  // namespace autoagric

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autoagric::control::ControlConf_ControllerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::control::ControlConf_ControllerType>() {
  return ::autoagric::control::ControlConf_ControllerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcontrol_2fcontrol_5fconf_2eproto
