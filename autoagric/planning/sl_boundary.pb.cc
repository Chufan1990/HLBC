// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/sl_boundary.proto

#include "autoagric/planning/sl_boundary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace planning {
constexpr SLBoundary::SLBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : boundary_point_()
  , start_s_(0)
  , end_s_(0)
  , start_l_(0)
  , end_l_(0){}
struct SLBoundaryDefaultTypeInternal {
  constexpr SLBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SLBoundaryDefaultTypeInternal() {}
  union {
    SLBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SLBoundaryDefaultTypeInternal _SLBoundary_default_instance_;
}  // namespace planning
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fplanning_2fsl_5fboundary_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fplanning_2fsl_5fboundary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fplanning_2fsl_5fboundary_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fplanning_2fsl_5fboundary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SLBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SLBoundary, start_s_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SLBoundary, end_s_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SLBoundary, start_l_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SLBoundary, end_l_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SLBoundary, boundary_point_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::planning::SLBoundary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_SLBoundary_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fplanning_2fsl_5fboundary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$autoagric/planning/sl_boundary.proto\022\022"
  "autoagric.planning\032 autoagric/common/pnc"
  "_point.proto\"\177\n\nSLBoundary\022\017\n\007start_s\030\001 "
  "\001(\001\022\r\n\005end_s\030\002 \001(\001\022\017\n\007start_l\030\003 \001(\001\022\r\n\005e"
  "nd_l\030\004 \001(\001\0221\n\016boundary_point\030\005 \003(\0132\031.aut"
  "oagric.common.SLPointb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto_deps[1] = {
  &::descriptor_table_autoagric_2fcommon_2fpnc_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto = {
  false, false, 229, descriptor_table_protodef_autoagric_2fplanning_2fsl_5fboundary_2eproto, "autoagric/planning/sl_boundary.proto", 
  &descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto_once, descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fplanning_2fsl_5fboundary_2eproto::offsets,
  file_level_metadata_autoagric_2fplanning_2fsl_5fboundary_2eproto, file_level_enum_descriptors_autoagric_2fplanning_2fsl_5fboundary_2eproto, file_level_service_descriptors_autoagric_2fplanning_2fsl_5fboundary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto_getter() {
  return &descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fplanning_2fsl_5fboundary_2eproto(&descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto);
namespace autoagric {
namespace planning {

// ===================================================================

class SLBoundary::_Internal {
 public:
};

void SLBoundary::clear_boundary_point() {
  boundary_point_.Clear();
}
SLBoundary::SLBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  boundary_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.SLBoundary)
}
SLBoundary::SLBoundary(const SLBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      boundary_point_(from.boundary_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_l_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(end_l_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.SLBoundary)
}

inline void SLBoundary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_s_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_l_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(end_l_));
}

SLBoundary::~SLBoundary() {
  // @@protoc_insertion_point(destructor:autoagric.planning.SLBoundary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SLBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SLBoundary::ArenaDtor(void* object) {
  SLBoundary* _this = reinterpret_cast< SLBoundary* >(object);
  (void)_this;
}
void SLBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SLBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SLBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.SLBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_point_.Clear();
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_l_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(end_l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SLBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double start_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double start_l = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          start_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double end_l = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          end_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.common.SLPoint boundary_point = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_boundary_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SLBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.SLBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_s = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_s = this->_internal_start_s();
  uint64_t raw_start_s;
  memcpy(&raw_start_s, &tmp_start_s, sizeof(tmp_start_s));
  if (raw_start_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_s(), target);
  }

  // double end_s = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_s = this->_internal_end_s();
  uint64_t raw_end_s;
  memcpy(&raw_end_s, &tmp_end_s, sizeof(tmp_end_s));
  if (raw_end_s != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_s(), target);
  }

  // double start_l = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_l = this->_internal_start_l();
  uint64_t raw_start_l;
  memcpy(&raw_start_l, &tmp_start_l, sizeof(tmp_start_l));
  if (raw_start_l != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_start_l(), target);
  }

  // double end_l = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_l = this->_internal_end_l();
  uint64_t raw_end_l;
  memcpy(&raw_end_l, &tmp_end_l, sizeof(tmp_end_l));
  if (raw_end_l != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_end_l(), target);
  }

  // repeated .autoagric.common.SLPoint boundary_point = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_boundary_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_boundary_point(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.SLBoundary)
  return target;
}

size_t SLBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.SLBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.common.SLPoint boundary_point = 5;
  total_size += 1UL * this->_internal_boundary_point_size();
  for (const auto& msg : this->boundary_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double start_s = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_s = this->_internal_start_s();
  uint64_t raw_start_s;
  memcpy(&raw_start_s, &tmp_start_s, sizeof(tmp_start_s));
  if (raw_start_s != 0) {
    total_size += 1 + 8;
  }

  // double end_s = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_s = this->_internal_end_s();
  uint64_t raw_end_s;
  memcpy(&raw_end_s, &tmp_end_s, sizeof(tmp_end_s));
  if (raw_end_s != 0) {
    total_size += 1 + 8;
  }

  // double start_l = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_l = this->_internal_start_l();
  uint64_t raw_start_l;
  memcpy(&raw_start_l, &tmp_start_l, sizeof(tmp_start_l));
  if (raw_start_l != 0) {
    total_size += 1 + 8;
  }

  // double end_l = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_l = this->_internal_end_l();
  uint64_t raw_end_l;
  memcpy(&raw_end_l, &tmp_end_l, sizeof(tmp_end_l));
  if (raw_end_l != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SLBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SLBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SLBoundary::GetClassData() const { return &_class_data_; }

void SLBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SLBoundary *>(to)->MergeFrom(
      static_cast<const SLBoundary &>(from));
}


void SLBoundary::MergeFrom(const SLBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.SLBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_point_.MergeFrom(from.boundary_point_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_s = from._internal_start_s();
  uint64_t raw_start_s;
  memcpy(&raw_start_s, &tmp_start_s, sizeof(tmp_start_s));
  if (raw_start_s != 0) {
    _internal_set_start_s(from._internal_start_s());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_s = from._internal_end_s();
  uint64_t raw_end_s;
  memcpy(&raw_end_s, &tmp_end_s, sizeof(tmp_end_s));
  if (raw_end_s != 0) {
    _internal_set_end_s(from._internal_end_s());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_start_l = from._internal_start_l();
  uint64_t raw_start_l;
  memcpy(&raw_start_l, &tmp_start_l, sizeof(tmp_start_l));
  if (raw_start_l != 0) {
    _internal_set_start_l(from._internal_start_l());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_end_l = from._internal_end_l();
  uint64_t raw_end_l;
  memcpy(&raw_end_l, &tmp_end_l, sizeof(tmp_end_l));
  if (raw_end_l != 0) {
    _internal_set_end_l(from._internal_end_l());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SLBoundary::CopyFrom(const SLBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.SLBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLBoundary::IsInitialized() const {
  return true;
}

void SLBoundary::InternalSwap(SLBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  boundary_point_.InternalSwap(&other->boundary_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SLBoundary, end_l_)
      + sizeof(SLBoundary::end_l_)
      - PROTOBUF_FIELD_OFFSET(SLBoundary, start_s_)>(
          reinterpret_cast<char*>(&start_s_),
          reinterpret_cast<char*>(&other->start_s_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SLBoundary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fsl_5fboundary_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fsl_5fboundary_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::planning::SLBoundary* Arena::CreateMaybeMessage< ::autoagric::planning::SLBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::SLBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
