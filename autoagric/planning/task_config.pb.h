// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/task_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2ftask_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2ftask_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fplanning_2ftask_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fplanning_2ftask_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2ftask_5fconfig_2eproto;
namespace autoagric {
namespace planning {
class DpStSpeedOptimizerConfig;
struct DpStSpeedOptimizerConfigDefaultTypeInternal;
extern DpStSpeedOptimizerConfigDefaultTypeInternal _DpStSpeedOptimizerConfig_default_instance_;
class PiecewiseJerkSpeedOptimizerConfig;
struct PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal;
extern PiecewiseJerkSpeedOptimizerConfigDefaultTypeInternal _PiecewiseJerkSpeedOptimizerConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::planning::DpStSpeedOptimizerConfig* Arena::CreateMaybeMessage<::autoagric::planning::DpStSpeedOptimizerConfig>(Arena*);
template<> ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* Arena::CreateMaybeMessage<::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace planning {

// ===================================================================

class DpStSpeedOptimizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.DpStSpeedOptimizerConfig) */ {
 public:
  inline DpStSpeedOptimizerConfig() : DpStSpeedOptimizerConfig(nullptr) {}
  ~DpStSpeedOptimizerConfig() override;
  explicit constexpr DpStSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DpStSpeedOptimizerConfig(const DpStSpeedOptimizerConfig& from);
  DpStSpeedOptimizerConfig(DpStSpeedOptimizerConfig&& from) noexcept
    : DpStSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline DpStSpeedOptimizerConfig& operator=(const DpStSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpStSpeedOptimizerConfig& operator=(DpStSpeedOptimizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DpStSpeedOptimizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const DpStSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const DpStSpeedOptimizerConfig*>(
               &_DpStSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DpStSpeedOptimizerConfig& a, DpStSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DpStSpeedOptimizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DpStSpeedOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DpStSpeedOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DpStSpeedOptimizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DpStSpeedOptimizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DpStSpeedOptimizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DpStSpeedOptimizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.DpStSpeedOptimizerConfig";
  }
  protected:
  explicit DpStSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitTFieldNumber = 1,
    kDenseUnitSFieldNumber = 3,
    kSparseUnitSFieldNumber = 4,
    kSpeedWeightFieldNumber = 10,
    kAccelWeightFieldNumber = 11,
    kJerkWeightFieldNumber = 12,
    kObstacleWeightFieldNumber = 13,
    kReferenceWeightFieldNumber = 14,
    kGoDownBufferFieldNumber = 15,
    kGoUpBufferFieldNumber = 16,
    kDefaultObstacleCostFieldNumber = 20,
    kDefaultSpeedCostFieldNumber = 31,
    kExceedSpeedPenaltyFieldNumber = 32,
    kLowSpeedPenaltyFieldNumber = 33,
    kReferenceSpeedPenaltyFieldNumber = 34,
    kKeepClearLowSpeedPenaltyFieldNumber = 35,
    kAccelPenaltyFieldNumber = 40,
    kDecelPenaltyFieldNumber = 41,
    kDenseDimensionSFieldNumber = 2,
    kIsLaneChangingFieldNumber = 81,
    kPositiveJerkCoeffFieldNumber = 50,
    kNegativeJerkCoeffFieldNumber = 51,
    kMaxAccelerationFieldNumber = 60,
    kMaxDecelerationFieldNumber = 61,
    kSafeTimeBufferFieldNumber = 70,
    kSafeDistanceFieldNumber = 71,
    kSpatialPotentialPenaltyFieldNumber = 80,
  };
  // double unit_t = 1;
  void clear_unit_t();
  double unit_t() const;
  void set_unit_t(double value);
  private:
  double _internal_unit_t() const;
  void _internal_set_unit_t(double value);
  public:

  // double dense_unit_s = 3;
  void clear_dense_unit_s();
  double dense_unit_s() const;
  void set_dense_unit_s(double value);
  private:
  double _internal_dense_unit_s() const;
  void _internal_set_dense_unit_s(double value);
  public:

  // double sparse_unit_s = 4;
  void clear_sparse_unit_s();
  double sparse_unit_s() const;
  void set_sparse_unit_s(double value);
  private:
  double _internal_sparse_unit_s() const;
  void _internal_set_sparse_unit_s(double value);
  public:

  // double speed_weight = 10;
  void clear_speed_weight();
  double speed_weight() const;
  void set_speed_weight(double value);
  private:
  double _internal_speed_weight() const;
  void _internal_set_speed_weight(double value);
  public:

  // double accel_weight = 11;
  void clear_accel_weight();
  double accel_weight() const;
  void set_accel_weight(double value);
  private:
  double _internal_accel_weight() const;
  void _internal_set_accel_weight(double value);
  public:

  // double jerk_weight = 12;
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // double obstacle_weight = 13;
  void clear_obstacle_weight();
  double obstacle_weight() const;
  void set_obstacle_weight(double value);
  private:
  double _internal_obstacle_weight() const;
  void _internal_set_obstacle_weight(double value);
  public:

  // double reference_weight = 14;
  void clear_reference_weight();
  double reference_weight() const;
  void set_reference_weight(double value);
  private:
  double _internal_reference_weight() const;
  void _internal_set_reference_weight(double value);
  public:

  // double go_down_buffer = 15;
  void clear_go_down_buffer();
  double go_down_buffer() const;
  void set_go_down_buffer(double value);
  private:
  double _internal_go_down_buffer() const;
  void _internal_set_go_down_buffer(double value);
  public:

  // double go_up_buffer = 16;
  void clear_go_up_buffer();
  double go_up_buffer() const;
  void set_go_up_buffer(double value);
  private:
  double _internal_go_up_buffer() const;
  void _internal_set_go_up_buffer(double value);
  public:

  // double default_obstacle_cost = 20;
  void clear_default_obstacle_cost();
  double default_obstacle_cost() const;
  void set_default_obstacle_cost(double value);
  private:
  double _internal_default_obstacle_cost() const;
  void _internal_set_default_obstacle_cost(double value);
  public:

  // double default_speed_cost = 31;
  void clear_default_speed_cost();
  double default_speed_cost() const;
  void set_default_speed_cost(double value);
  private:
  double _internal_default_speed_cost() const;
  void _internal_set_default_speed_cost(double value);
  public:

  // double exceed_speed_penalty = 32;
  void clear_exceed_speed_penalty();
  double exceed_speed_penalty() const;
  void set_exceed_speed_penalty(double value);
  private:
  double _internal_exceed_speed_penalty() const;
  void _internal_set_exceed_speed_penalty(double value);
  public:

  // double low_speed_penalty = 33;
  void clear_low_speed_penalty();
  double low_speed_penalty() const;
  void set_low_speed_penalty(double value);
  private:
  double _internal_low_speed_penalty() const;
  void _internal_set_low_speed_penalty(double value);
  public:

  // double reference_speed_penalty = 34;
  void clear_reference_speed_penalty();
  double reference_speed_penalty() const;
  void set_reference_speed_penalty(double value);
  private:
  double _internal_reference_speed_penalty() const;
  void _internal_set_reference_speed_penalty(double value);
  public:

  // double keep_clear_low_speed_penalty = 35;
  void clear_keep_clear_low_speed_penalty();
  double keep_clear_low_speed_penalty() const;
  void set_keep_clear_low_speed_penalty(double value);
  private:
  double _internal_keep_clear_low_speed_penalty() const;
  void _internal_set_keep_clear_low_speed_penalty(double value);
  public:

  // double accel_penalty = 40;
  void clear_accel_penalty();
  double accel_penalty() const;
  void set_accel_penalty(double value);
  private:
  double _internal_accel_penalty() const;
  void _internal_set_accel_penalty(double value);
  public:

  // double decel_penalty = 41;
  void clear_decel_penalty();
  double decel_penalty() const;
  void set_decel_penalty(double value);
  private:
  double _internal_decel_penalty() const;
  void _internal_set_decel_penalty(double value);
  public:

  // int32 dense_dimension_s = 2;
  void clear_dense_dimension_s();
  int32_t dense_dimension_s() const;
  void set_dense_dimension_s(int32_t value);
  private:
  int32_t _internal_dense_dimension_s() const;
  void _internal_set_dense_dimension_s(int32_t value);
  public:

  // bool is_lane_changing = 81;
  void clear_is_lane_changing();
  bool is_lane_changing() const;
  void set_is_lane_changing(bool value);
  private:
  bool _internal_is_lane_changing() const;
  void _internal_set_is_lane_changing(bool value);
  public:

  // double positive_jerk_coeff = 50;
  void clear_positive_jerk_coeff();
  double positive_jerk_coeff() const;
  void set_positive_jerk_coeff(double value);
  private:
  double _internal_positive_jerk_coeff() const;
  void _internal_set_positive_jerk_coeff(double value);
  public:

  // double negative_jerk_coeff = 51;
  void clear_negative_jerk_coeff();
  double negative_jerk_coeff() const;
  void set_negative_jerk_coeff(double value);
  private:
  double _internal_negative_jerk_coeff() const;
  void _internal_set_negative_jerk_coeff(double value);
  public:

  // double max_acceleration = 60;
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // double max_deceleration = 61;
  void clear_max_deceleration();
  double max_deceleration() const;
  void set_max_deceleration(double value);
  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);
  public:

  // double safe_time_buffer = 70;
  void clear_safe_time_buffer();
  double safe_time_buffer() const;
  void set_safe_time_buffer(double value);
  private:
  double _internal_safe_time_buffer() const;
  void _internal_set_safe_time_buffer(double value);
  public:

  // double safe_distance = 71;
  void clear_safe_distance();
  double safe_distance() const;
  void set_safe_distance(double value);
  private:
  double _internal_safe_distance() const;
  void _internal_set_safe_distance(double value);
  public:

  // double spatial_potential_penalty = 80;
  void clear_spatial_potential_penalty();
  double spatial_potential_penalty() const;
  void set_spatial_potential_penalty(double value);
  private:
  double _internal_spatial_potential_penalty() const;
  void _internal_set_spatial_potential_penalty(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.DpStSpeedOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double unit_t_;
  double dense_unit_s_;
  double sparse_unit_s_;
  double speed_weight_;
  double accel_weight_;
  double jerk_weight_;
  double obstacle_weight_;
  double reference_weight_;
  double go_down_buffer_;
  double go_up_buffer_;
  double default_obstacle_cost_;
  double default_speed_cost_;
  double exceed_speed_penalty_;
  double low_speed_penalty_;
  double reference_speed_penalty_;
  double keep_clear_low_speed_penalty_;
  double accel_penalty_;
  double decel_penalty_;
  int32_t dense_dimension_s_;
  bool is_lane_changing_;
  double positive_jerk_coeff_;
  double negative_jerk_coeff_;
  double max_acceleration_;
  double max_deceleration_;
  double safe_time_buffer_;
  double safe_distance_;
  double spatial_potential_penalty_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2ftask_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class PiecewiseJerkSpeedOptimizerConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig) */ {
 public:
  inline PiecewiseJerkSpeedOptimizerConfig() : PiecewiseJerkSpeedOptimizerConfig(nullptr) {}
  ~PiecewiseJerkSpeedOptimizerConfig() override;
  explicit constexpr PiecewiseJerkSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PiecewiseJerkSpeedOptimizerConfig(const PiecewiseJerkSpeedOptimizerConfig& from);
  PiecewiseJerkSpeedOptimizerConfig(PiecewiseJerkSpeedOptimizerConfig&& from) noexcept
    : PiecewiseJerkSpeedOptimizerConfig() {
    *this = ::std::move(from);
  }

  inline PiecewiseJerkSpeedOptimizerConfig& operator=(const PiecewiseJerkSpeedOptimizerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PiecewiseJerkSpeedOptimizerConfig& operator=(PiecewiseJerkSpeedOptimizerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PiecewiseJerkSpeedOptimizerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PiecewiseJerkSpeedOptimizerConfig* internal_default_instance() {
    return reinterpret_cast<const PiecewiseJerkSpeedOptimizerConfig*>(
               &_PiecewiseJerkSpeedOptimizerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PiecewiseJerkSpeedOptimizerConfig& a, PiecewiseJerkSpeedOptimizerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PiecewiseJerkSpeedOptimizerConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PiecewiseJerkSpeedOptimizerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PiecewiseJerkSpeedOptimizerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PiecewiseJerkSpeedOptimizerConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PiecewiseJerkSpeedOptimizerConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PiecewiseJerkSpeedOptimizerConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.PiecewiseJerkSpeedOptimizerConfig";
  }
  protected:
  explicit PiecewiseJerkSpeedOptimizerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccWeightFieldNumber = 1,
    kJerkWeightFieldNumber = 2,
    kKappaPenaltyWeightFieldNumber = 3,
    kRefSWeightFieldNumber = 4,
    kRefVWeightFieldNumber = 5,
  };
  // double acc_weight = 1;
  void clear_acc_weight();
  double acc_weight() const;
  void set_acc_weight(double value);
  private:
  double _internal_acc_weight() const;
  void _internal_set_acc_weight(double value);
  public:

  // double jerk_weight = 2;
  void clear_jerk_weight();
  double jerk_weight() const;
  void set_jerk_weight(double value);
  private:
  double _internal_jerk_weight() const;
  void _internal_set_jerk_weight(double value);
  public:

  // double kappa_penalty_weight = 3;
  void clear_kappa_penalty_weight();
  double kappa_penalty_weight() const;
  void set_kappa_penalty_weight(double value);
  private:
  double _internal_kappa_penalty_weight() const;
  void _internal_set_kappa_penalty_weight(double value);
  public:

  // double ref_s_weight = 4;
  void clear_ref_s_weight();
  double ref_s_weight() const;
  void set_ref_s_weight(double value);
  private:
  double _internal_ref_s_weight() const;
  void _internal_set_ref_s_weight(double value);
  public:

  // double ref_v_weight = 5;
  void clear_ref_v_weight();
  double ref_v_weight() const;
  void set_ref_v_weight(double value);
  private:
  double _internal_ref_v_weight() const;
  void _internal_set_ref_v_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double acc_weight_;
  double jerk_weight_;
  double kappa_penalty_weight_;
  double ref_s_weight_;
  double ref_v_weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2ftask_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DpStSpeedOptimizerConfig

// double unit_t = 1;
inline void DpStSpeedOptimizerConfig::clear_unit_t() {
  unit_t_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_unit_t() const {
  return unit_t_;
}
inline double DpStSpeedOptimizerConfig::unit_t() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.unit_t)
  return _internal_unit_t();
}
inline void DpStSpeedOptimizerConfig::_internal_set_unit_t(double value) {
  
  unit_t_ = value;
}
inline void DpStSpeedOptimizerConfig::set_unit_t(double value) {
  _internal_set_unit_t(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.unit_t)
}

// int32 dense_dimension_s = 2;
inline void DpStSpeedOptimizerConfig::clear_dense_dimension_s() {
  dense_dimension_s_ = 0;
}
inline int32_t DpStSpeedOptimizerConfig::_internal_dense_dimension_s() const {
  return dense_dimension_s_;
}
inline int32_t DpStSpeedOptimizerConfig::dense_dimension_s() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.dense_dimension_s)
  return _internal_dense_dimension_s();
}
inline void DpStSpeedOptimizerConfig::_internal_set_dense_dimension_s(int32_t value) {
  
  dense_dimension_s_ = value;
}
inline void DpStSpeedOptimizerConfig::set_dense_dimension_s(int32_t value) {
  _internal_set_dense_dimension_s(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.dense_dimension_s)
}

// double dense_unit_s = 3;
inline void DpStSpeedOptimizerConfig::clear_dense_unit_s() {
  dense_unit_s_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_dense_unit_s() const {
  return dense_unit_s_;
}
inline double DpStSpeedOptimizerConfig::dense_unit_s() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.dense_unit_s)
  return _internal_dense_unit_s();
}
inline void DpStSpeedOptimizerConfig::_internal_set_dense_unit_s(double value) {
  
  dense_unit_s_ = value;
}
inline void DpStSpeedOptimizerConfig::set_dense_unit_s(double value) {
  _internal_set_dense_unit_s(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.dense_unit_s)
}

// double sparse_unit_s = 4;
inline void DpStSpeedOptimizerConfig::clear_sparse_unit_s() {
  sparse_unit_s_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_sparse_unit_s() const {
  return sparse_unit_s_;
}
inline double DpStSpeedOptimizerConfig::sparse_unit_s() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.sparse_unit_s)
  return _internal_sparse_unit_s();
}
inline void DpStSpeedOptimizerConfig::_internal_set_sparse_unit_s(double value) {
  
  sparse_unit_s_ = value;
}
inline void DpStSpeedOptimizerConfig::set_sparse_unit_s(double value) {
  _internal_set_sparse_unit_s(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.sparse_unit_s)
}

// double speed_weight = 10;
inline void DpStSpeedOptimizerConfig::clear_speed_weight() {
  speed_weight_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_speed_weight() const {
  return speed_weight_;
}
inline double DpStSpeedOptimizerConfig::speed_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.speed_weight)
  return _internal_speed_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_speed_weight(double value) {
  
  speed_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_speed_weight(double value) {
  _internal_set_speed_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.speed_weight)
}

// double accel_weight = 11;
inline void DpStSpeedOptimizerConfig::clear_accel_weight() {
  accel_weight_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_accel_weight() const {
  return accel_weight_;
}
inline double DpStSpeedOptimizerConfig::accel_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.accel_weight)
  return _internal_accel_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_accel_weight(double value) {
  
  accel_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_accel_weight(double value) {
  _internal_set_accel_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.accel_weight)
}

// double jerk_weight = 12;
inline void DpStSpeedOptimizerConfig::clear_jerk_weight() {
  jerk_weight_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_jerk_weight() const {
  return jerk_weight_;
}
inline double DpStSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_jerk_weight(double value) {
  
  jerk_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.jerk_weight)
}

// double obstacle_weight = 13;
inline void DpStSpeedOptimizerConfig::clear_obstacle_weight() {
  obstacle_weight_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_obstacle_weight() const {
  return obstacle_weight_;
}
inline double DpStSpeedOptimizerConfig::obstacle_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.obstacle_weight)
  return _internal_obstacle_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_obstacle_weight(double value) {
  
  obstacle_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_obstacle_weight(double value) {
  _internal_set_obstacle_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.obstacle_weight)
}

// double reference_weight = 14;
inline void DpStSpeedOptimizerConfig::clear_reference_weight() {
  reference_weight_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_reference_weight() const {
  return reference_weight_;
}
inline double DpStSpeedOptimizerConfig::reference_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.reference_weight)
  return _internal_reference_weight();
}
inline void DpStSpeedOptimizerConfig::_internal_set_reference_weight(double value) {
  
  reference_weight_ = value;
}
inline void DpStSpeedOptimizerConfig::set_reference_weight(double value) {
  _internal_set_reference_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.reference_weight)
}

// double go_down_buffer = 15;
inline void DpStSpeedOptimizerConfig::clear_go_down_buffer() {
  go_down_buffer_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_go_down_buffer() const {
  return go_down_buffer_;
}
inline double DpStSpeedOptimizerConfig::go_down_buffer() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.go_down_buffer)
  return _internal_go_down_buffer();
}
inline void DpStSpeedOptimizerConfig::_internal_set_go_down_buffer(double value) {
  
  go_down_buffer_ = value;
}
inline void DpStSpeedOptimizerConfig::set_go_down_buffer(double value) {
  _internal_set_go_down_buffer(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.go_down_buffer)
}

// double go_up_buffer = 16;
inline void DpStSpeedOptimizerConfig::clear_go_up_buffer() {
  go_up_buffer_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_go_up_buffer() const {
  return go_up_buffer_;
}
inline double DpStSpeedOptimizerConfig::go_up_buffer() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.go_up_buffer)
  return _internal_go_up_buffer();
}
inline void DpStSpeedOptimizerConfig::_internal_set_go_up_buffer(double value) {
  
  go_up_buffer_ = value;
}
inline void DpStSpeedOptimizerConfig::set_go_up_buffer(double value) {
  _internal_set_go_up_buffer(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.go_up_buffer)
}

// double default_obstacle_cost = 20;
inline void DpStSpeedOptimizerConfig::clear_default_obstacle_cost() {
  default_obstacle_cost_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_default_obstacle_cost() const {
  return default_obstacle_cost_;
}
inline double DpStSpeedOptimizerConfig::default_obstacle_cost() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.default_obstacle_cost)
  return _internal_default_obstacle_cost();
}
inline void DpStSpeedOptimizerConfig::_internal_set_default_obstacle_cost(double value) {
  
  default_obstacle_cost_ = value;
}
inline void DpStSpeedOptimizerConfig::set_default_obstacle_cost(double value) {
  _internal_set_default_obstacle_cost(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.default_obstacle_cost)
}

// double default_speed_cost = 31;
inline void DpStSpeedOptimizerConfig::clear_default_speed_cost() {
  default_speed_cost_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_default_speed_cost() const {
  return default_speed_cost_;
}
inline double DpStSpeedOptimizerConfig::default_speed_cost() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.default_speed_cost)
  return _internal_default_speed_cost();
}
inline void DpStSpeedOptimizerConfig::_internal_set_default_speed_cost(double value) {
  
  default_speed_cost_ = value;
}
inline void DpStSpeedOptimizerConfig::set_default_speed_cost(double value) {
  _internal_set_default_speed_cost(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.default_speed_cost)
}

// double exceed_speed_penalty = 32;
inline void DpStSpeedOptimizerConfig::clear_exceed_speed_penalty() {
  exceed_speed_penalty_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_exceed_speed_penalty() const {
  return exceed_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::exceed_speed_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.exceed_speed_penalty)
  return _internal_exceed_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_exceed_speed_penalty(double value) {
  
  exceed_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_exceed_speed_penalty(double value) {
  _internal_set_exceed_speed_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.exceed_speed_penalty)
}

// double low_speed_penalty = 33;
inline void DpStSpeedOptimizerConfig::clear_low_speed_penalty() {
  low_speed_penalty_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_low_speed_penalty() const {
  return low_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.low_speed_penalty)
  return _internal_low_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_low_speed_penalty(double value) {
  
  low_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_low_speed_penalty(double value) {
  _internal_set_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.low_speed_penalty)
}

// double reference_speed_penalty = 34;
inline void DpStSpeedOptimizerConfig::clear_reference_speed_penalty() {
  reference_speed_penalty_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_reference_speed_penalty() const {
  return reference_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::reference_speed_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.reference_speed_penalty)
  return _internal_reference_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_reference_speed_penalty(double value) {
  
  reference_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_reference_speed_penalty(double value) {
  _internal_set_reference_speed_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.reference_speed_penalty)
}

// double keep_clear_low_speed_penalty = 35;
inline void DpStSpeedOptimizerConfig::clear_keep_clear_low_speed_penalty() {
  keep_clear_low_speed_penalty_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_keep_clear_low_speed_penalty() const {
  return keep_clear_low_speed_penalty_;
}
inline double DpStSpeedOptimizerConfig::keep_clear_low_speed_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.keep_clear_low_speed_penalty)
  return _internal_keep_clear_low_speed_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_keep_clear_low_speed_penalty(double value) {
  
  keep_clear_low_speed_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_keep_clear_low_speed_penalty(double value) {
  _internal_set_keep_clear_low_speed_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.keep_clear_low_speed_penalty)
}

// double accel_penalty = 40;
inline void DpStSpeedOptimizerConfig::clear_accel_penalty() {
  accel_penalty_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_accel_penalty() const {
  return accel_penalty_;
}
inline double DpStSpeedOptimizerConfig::accel_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.accel_penalty)
  return _internal_accel_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_accel_penalty(double value) {
  
  accel_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_accel_penalty(double value) {
  _internal_set_accel_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.accel_penalty)
}

// double decel_penalty = 41;
inline void DpStSpeedOptimizerConfig::clear_decel_penalty() {
  decel_penalty_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_decel_penalty() const {
  return decel_penalty_;
}
inline double DpStSpeedOptimizerConfig::decel_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.decel_penalty)
  return _internal_decel_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_decel_penalty(double value) {
  
  decel_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_decel_penalty(double value) {
  _internal_set_decel_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.decel_penalty)
}

// double positive_jerk_coeff = 50;
inline void DpStSpeedOptimizerConfig::clear_positive_jerk_coeff() {
  positive_jerk_coeff_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_positive_jerk_coeff() const {
  return positive_jerk_coeff_;
}
inline double DpStSpeedOptimizerConfig::positive_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.positive_jerk_coeff)
  return _internal_positive_jerk_coeff();
}
inline void DpStSpeedOptimizerConfig::_internal_set_positive_jerk_coeff(double value) {
  
  positive_jerk_coeff_ = value;
}
inline void DpStSpeedOptimizerConfig::set_positive_jerk_coeff(double value) {
  _internal_set_positive_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.positive_jerk_coeff)
}

// double negative_jerk_coeff = 51;
inline void DpStSpeedOptimizerConfig::clear_negative_jerk_coeff() {
  negative_jerk_coeff_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_negative_jerk_coeff() const {
  return negative_jerk_coeff_;
}
inline double DpStSpeedOptimizerConfig::negative_jerk_coeff() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.negative_jerk_coeff)
  return _internal_negative_jerk_coeff();
}
inline void DpStSpeedOptimizerConfig::_internal_set_negative_jerk_coeff(double value) {
  
  negative_jerk_coeff_ = value;
}
inline void DpStSpeedOptimizerConfig::set_negative_jerk_coeff(double value) {
  _internal_set_negative_jerk_coeff(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.negative_jerk_coeff)
}

// double max_acceleration = 60;
inline void DpStSpeedOptimizerConfig::clear_max_acceleration() {
  max_acceleration_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_max_acceleration() const {
  return max_acceleration_;
}
inline double DpStSpeedOptimizerConfig::max_acceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.max_acceleration)
  return _internal_max_acceleration();
}
inline void DpStSpeedOptimizerConfig::_internal_set_max_acceleration(double value) {
  
  max_acceleration_ = value;
}
inline void DpStSpeedOptimizerConfig::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.max_acceleration)
}

// double max_deceleration = 61;
inline void DpStSpeedOptimizerConfig::clear_max_deceleration() {
  max_deceleration_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_max_deceleration() const {
  return max_deceleration_;
}
inline double DpStSpeedOptimizerConfig::max_deceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.max_deceleration)
  return _internal_max_deceleration();
}
inline void DpStSpeedOptimizerConfig::_internal_set_max_deceleration(double value) {
  
  max_deceleration_ = value;
}
inline void DpStSpeedOptimizerConfig::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.max_deceleration)
}

// double safe_time_buffer = 70;
inline void DpStSpeedOptimizerConfig::clear_safe_time_buffer() {
  safe_time_buffer_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_safe_time_buffer() const {
  return safe_time_buffer_;
}
inline double DpStSpeedOptimizerConfig::safe_time_buffer() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.safe_time_buffer)
  return _internal_safe_time_buffer();
}
inline void DpStSpeedOptimizerConfig::_internal_set_safe_time_buffer(double value) {
  
  safe_time_buffer_ = value;
}
inline void DpStSpeedOptimizerConfig::set_safe_time_buffer(double value) {
  _internal_set_safe_time_buffer(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.safe_time_buffer)
}

// double safe_distance = 71;
inline void DpStSpeedOptimizerConfig::clear_safe_distance() {
  safe_distance_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_safe_distance() const {
  return safe_distance_;
}
inline double DpStSpeedOptimizerConfig::safe_distance() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.safe_distance)
  return _internal_safe_distance();
}
inline void DpStSpeedOptimizerConfig::_internal_set_safe_distance(double value) {
  
  safe_distance_ = value;
}
inline void DpStSpeedOptimizerConfig::set_safe_distance(double value) {
  _internal_set_safe_distance(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.safe_distance)
}

// double spatial_potential_penalty = 80;
inline void DpStSpeedOptimizerConfig::clear_spatial_potential_penalty() {
  spatial_potential_penalty_ = 0;
}
inline double DpStSpeedOptimizerConfig::_internal_spatial_potential_penalty() const {
  return spatial_potential_penalty_;
}
inline double DpStSpeedOptimizerConfig::spatial_potential_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.spatial_potential_penalty)
  return _internal_spatial_potential_penalty();
}
inline void DpStSpeedOptimizerConfig::_internal_set_spatial_potential_penalty(double value) {
  
  spatial_potential_penalty_ = value;
}
inline void DpStSpeedOptimizerConfig::set_spatial_potential_penalty(double value) {
  _internal_set_spatial_potential_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.spatial_potential_penalty)
}

// bool is_lane_changing = 81;
inline void DpStSpeedOptimizerConfig::clear_is_lane_changing() {
  is_lane_changing_ = false;
}
inline bool DpStSpeedOptimizerConfig::_internal_is_lane_changing() const {
  return is_lane_changing_;
}
inline bool DpStSpeedOptimizerConfig::is_lane_changing() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.DpStSpeedOptimizerConfig.is_lane_changing)
  return _internal_is_lane_changing();
}
inline void DpStSpeedOptimizerConfig::_internal_set_is_lane_changing(bool value) {
  
  is_lane_changing_ = value;
}
inline void DpStSpeedOptimizerConfig::set_is_lane_changing(bool value) {
  _internal_set_is_lane_changing(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.DpStSpeedOptimizerConfig.is_lane_changing)
}

// -------------------------------------------------------------------

// PiecewiseJerkSpeedOptimizerConfig

// double acc_weight = 1;
inline void PiecewiseJerkSpeedOptimizerConfig::clear_acc_weight() {
  acc_weight_ = 0;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_acc_weight() const {
  return acc_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::acc_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
  return _internal_acc_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_acc_weight(double value) {
  
  acc_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_acc_weight(double value) {
  _internal_set_acc_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.acc_weight)
}

// double jerk_weight = 2;
inline void PiecewiseJerkSpeedOptimizerConfig::clear_jerk_weight() {
  jerk_weight_ = 0;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_jerk_weight() const {
  return jerk_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::jerk_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
  return _internal_jerk_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_jerk_weight(double value) {
  
  jerk_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_jerk_weight(double value) {
  _internal_set_jerk_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.jerk_weight)
}

// double kappa_penalty_weight = 3;
inline void PiecewiseJerkSpeedOptimizerConfig::clear_kappa_penalty_weight() {
  kappa_penalty_weight_ = 0;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_kappa_penalty_weight() const {
  return kappa_penalty_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::kappa_penalty_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
  return _internal_kappa_penalty_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_kappa_penalty_weight(double value) {
  
  kappa_penalty_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_kappa_penalty_weight(double value) {
  _internal_set_kappa_penalty_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.kappa_penalty_weight)
}

// double ref_s_weight = 4;
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_s_weight() {
  ref_s_weight_ = 0;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_ref_s_weight() const {
  return ref_s_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_s_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
  return _internal_ref_s_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_ref_s_weight(double value) {
  
  ref_s_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_s_weight(double value) {
  _internal_set_ref_s_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.ref_s_weight)
}

// double ref_v_weight = 5;
inline void PiecewiseJerkSpeedOptimizerConfig::clear_ref_v_weight() {
  ref_v_weight_ = 0;
}
inline double PiecewiseJerkSpeedOptimizerConfig::_internal_ref_v_weight() const {
  return ref_v_weight_;
}
inline double PiecewiseJerkSpeedOptimizerConfig::ref_v_weight() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
  return _internal_ref_v_weight();
}
inline void PiecewiseJerkSpeedOptimizerConfig::_internal_set_ref_v_weight(double value) {
  
  ref_v_weight_ = value;
}
inline void PiecewiseJerkSpeedOptimizerConfig::set_ref_v_weight(double value) {
  _internal_set_ref_v_weight(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PiecewiseJerkSpeedOptimizerConfig.ref_v_weight)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2ftask_5fconfig_2eproto
