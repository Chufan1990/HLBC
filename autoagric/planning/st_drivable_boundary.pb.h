// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/st_drivable_boundary.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto;
namespace autoagric {
namespace planning {
class STDrivableBoundary;
struct STDrivableBoundaryDefaultTypeInternal;
extern STDrivableBoundaryDefaultTypeInternal _STDrivableBoundary_default_instance_;
class STDrivableBoundaryInstance;
struct STDrivableBoundaryInstanceDefaultTypeInternal;
extern STDrivableBoundaryInstanceDefaultTypeInternal _STDrivableBoundaryInstance_default_instance_;
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::planning::STDrivableBoundary* Arena::CreateMaybeMessage<::autoagric::planning::STDrivableBoundary>(Arena*);
template<> ::autoagric::planning::STDrivableBoundaryInstance* Arena::CreateMaybeMessage<::autoagric::planning::STDrivableBoundaryInstance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace planning {

// ===================================================================

class STDrivableBoundaryInstance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.STDrivableBoundaryInstance) */ {
 public:
  inline STDrivableBoundaryInstance() : STDrivableBoundaryInstance(nullptr) {}
  ~STDrivableBoundaryInstance() override;
  explicit constexpr STDrivableBoundaryInstance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STDrivableBoundaryInstance(const STDrivableBoundaryInstance& from);
  STDrivableBoundaryInstance(STDrivableBoundaryInstance&& from) noexcept
    : STDrivableBoundaryInstance() {
    *this = ::std::move(from);
  }

  inline STDrivableBoundaryInstance& operator=(const STDrivableBoundaryInstance& from) {
    CopyFrom(from);
    return *this;
  }
  inline STDrivableBoundaryInstance& operator=(STDrivableBoundaryInstance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STDrivableBoundaryInstance& default_instance() {
    return *internal_default_instance();
  }
  static inline const STDrivableBoundaryInstance* internal_default_instance() {
    return reinterpret_cast<const STDrivableBoundaryInstance*>(
               &_STDrivableBoundaryInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(STDrivableBoundaryInstance& a, STDrivableBoundaryInstance& b) {
    a.Swap(&b);
  }
  inline void Swap(STDrivableBoundaryInstance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STDrivableBoundaryInstance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STDrivableBoundaryInstance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STDrivableBoundaryInstance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STDrivableBoundaryInstance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const STDrivableBoundaryInstance& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STDrivableBoundaryInstance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.STDrivableBoundaryInstance";
  }
  protected:
  explicit STDrivableBoundaryInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 1,
    kSLowerFieldNumber = 2,
    kSUpperFieldNumber = 3,
    kVObsLowerFieldNumber = 4,
    kVObsUpperFieldNumber = 5,
  };
  // double t = 1;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // double s_lower = 2;
  void clear_s_lower();
  double s_lower() const;
  void set_s_lower(double value);
  private:
  double _internal_s_lower() const;
  void _internal_set_s_lower(double value);
  public:

  // double s_upper = 3;
  void clear_s_upper();
  double s_upper() const;
  void set_s_upper(double value);
  private:
  double _internal_s_upper() const;
  void _internal_set_s_upper(double value);
  public:

  // double v_obs_lower = 4;
  void clear_v_obs_lower();
  double v_obs_lower() const;
  void set_v_obs_lower(double value);
  private:
  double _internal_v_obs_lower() const;
  void _internal_set_v_obs_lower(double value);
  public:

  // double v_obs_upper = 5;
  void clear_v_obs_upper();
  double v_obs_upper() const;
  void set_v_obs_upper(double value);
  private:
  double _internal_v_obs_upper() const;
  void _internal_set_v_obs_upper(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.STDrivableBoundaryInstance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double t_;
  double s_lower_;
  double s_upper_;
  double v_obs_lower_;
  double v_obs_upper_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto;
};
// -------------------------------------------------------------------

class STDrivableBoundary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.STDrivableBoundary) */ {
 public:
  inline STDrivableBoundary() : STDrivableBoundary(nullptr) {}
  ~STDrivableBoundary() override;
  explicit constexpr STDrivableBoundary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  STDrivableBoundary(const STDrivableBoundary& from);
  STDrivableBoundary(STDrivableBoundary&& from) noexcept
    : STDrivableBoundary() {
    *this = ::std::move(from);
  }

  inline STDrivableBoundary& operator=(const STDrivableBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline STDrivableBoundary& operator=(STDrivableBoundary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const STDrivableBoundary& default_instance() {
    return *internal_default_instance();
  }
  static inline const STDrivableBoundary* internal_default_instance() {
    return reinterpret_cast<const STDrivableBoundary*>(
               &_STDrivableBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(STDrivableBoundary& a, STDrivableBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(STDrivableBoundary* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(STDrivableBoundary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  STDrivableBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<STDrivableBoundary>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const STDrivableBoundary& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const STDrivableBoundary& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(STDrivableBoundary* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.STDrivableBoundary";
  }
  protected:
  explicit STDrivableBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStBoundaryFieldNumber = 1,
  };
  // repeated .autoagric.planning.STDrivableBoundaryInstance st_boundary = 1;
  int st_boundary_size() const;
  private:
  int _internal_st_boundary_size() const;
  public:
  void clear_st_boundary();
  ::autoagric::planning::STDrivableBoundaryInstance* mutable_st_boundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::planning::STDrivableBoundaryInstance >*
      mutable_st_boundary();
  private:
  const ::autoagric::planning::STDrivableBoundaryInstance& _internal_st_boundary(int index) const;
  ::autoagric::planning::STDrivableBoundaryInstance* _internal_add_st_boundary();
  public:
  const ::autoagric::planning::STDrivableBoundaryInstance& st_boundary(int index) const;
  ::autoagric::planning::STDrivableBoundaryInstance* add_st_boundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::planning::STDrivableBoundaryInstance >&
      st_boundary() const;

  // @@protoc_insertion_point(class_scope:autoagric.planning.STDrivableBoundary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::planning::STDrivableBoundaryInstance > st_boundary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// STDrivableBoundaryInstance

// double t = 1;
inline void STDrivableBoundaryInstance::clear_t() {
  t_ = 0;
}
inline double STDrivableBoundaryInstance::_internal_t() const {
  return t_;
}
inline double STDrivableBoundaryInstance::t() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.STDrivableBoundaryInstance.t)
  return _internal_t();
}
inline void STDrivableBoundaryInstance::_internal_set_t(double value) {
  
  t_ = value;
}
inline void STDrivableBoundaryInstance::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.STDrivableBoundaryInstance.t)
}

// double s_lower = 2;
inline void STDrivableBoundaryInstance::clear_s_lower() {
  s_lower_ = 0;
}
inline double STDrivableBoundaryInstance::_internal_s_lower() const {
  return s_lower_;
}
inline double STDrivableBoundaryInstance::s_lower() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.STDrivableBoundaryInstance.s_lower)
  return _internal_s_lower();
}
inline void STDrivableBoundaryInstance::_internal_set_s_lower(double value) {
  
  s_lower_ = value;
}
inline void STDrivableBoundaryInstance::set_s_lower(double value) {
  _internal_set_s_lower(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.STDrivableBoundaryInstance.s_lower)
}

// double s_upper = 3;
inline void STDrivableBoundaryInstance::clear_s_upper() {
  s_upper_ = 0;
}
inline double STDrivableBoundaryInstance::_internal_s_upper() const {
  return s_upper_;
}
inline double STDrivableBoundaryInstance::s_upper() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.STDrivableBoundaryInstance.s_upper)
  return _internal_s_upper();
}
inline void STDrivableBoundaryInstance::_internal_set_s_upper(double value) {
  
  s_upper_ = value;
}
inline void STDrivableBoundaryInstance::set_s_upper(double value) {
  _internal_set_s_upper(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.STDrivableBoundaryInstance.s_upper)
}

// double v_obs_lower = 4;
inline void STDrivableBoundaryInstance::clear_v_obs_lower() {
  v_obs_lower_ = 0;
}
inline double STDrivableBoundaryInstance::_internal_v_obs_lower() const {
  return v_obs_lower_;
}
inline double STDrivableBoundaryInstance::v_obs_lower() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.STDrivableBoundaryInstance.v_obs_lower)
  return _internal_v_obs_lower();
}
inline void STDrivableBoundaryInstance::_internal_set_v_obs_lower(double value) {
  
  v_obs_lower_ = value;
}
inline void STDrivableBoundaryInstance::set_v_obs_lower(double value) {
  _internal_set_v_obs_lower(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.STDrivableBoundaryInstance.v_obs_lower)
}

// double v_obs_upper = 5;
inline void STDrivableBoundaryInstance::clear_v_obs_upper() {
  v_obs_upper_ = 0;
}
inline double STDrivableBoundaryInstance::_internal_v_obs_upper() const {
  return v_obs_upper_;
}
inline double STDrivableBoundaryInstance::v_obs_upper() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.STDrivableBoundaryInstance.v_obs_upper)
  return _internal_v_obs_upper();
}
inline void STDrivableBoundaryInstance::_internal_set_v_obs_upper(double value) {
  
  v_obs_upper_ = value;
}
inline void STDrivableBoundaryInstance::set_v_obs_upper(double value) {
  _internal_set_v_obs_upper(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.STDrivableBoundaryInstance.v_obs_upper)
}

// -------------------------------------------------------------------

// STDrivableBoundary

// repeated .autoagric.planning.STDrivableBoundaryInstance st_boundary = 1;
inline int STDrivableBoundary::_internal_st_boundary_size() const {
  return st_boundary_.size();
}
inline int STDrivableBoundary::st_boundary_size() const {
  return _internal_st_boundary_size();
}
inline void STDrivableBoundary::clear_st_boundary() {
  st_boundary_.Clear();
}
inline ::autoagric::planning::STDrivableBoundaryInstance* STDrivableBoundary::mutable_st_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:autoagric.planning.STDrivableBoundary.st_boundary)
  return st_boundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::planning::STDrivableBoundaryInstance >*
STDrivableBoundary::mutable_st_boundary() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.planning.STDrivableBoundary.st_boundary)
  return &st_boundary_;
}
inline const ::autoagric::planning::STDrivableBoundaryInstance& STDrivableBoundary::_internal_st_boundary(int index) const {
  return st_boundary_.Get(index);
}
inline const ::autoagric::planning::STDrivableBoundaryInstance& STDrivableBoundary::st_boundary(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.planning.STDrivableBoundary.st_boundary)
  return _internal_st_boundary(index);
}
inline ::autoagric::planning::STDrivableBoundaryInstance* STDrivableBoundary::_internal_add_st_boundary() {
  return st_boundary_.Add();
}
inline ::autoagric::planning::STDrivableBoundaryInstance* STDrivableBoundary::add_st_boundary() {
  ::autoagric::planning::STDrivableBoundaryInstance* _add = _internal_add_st_boundary();
  // @@protoc_insertion_point(field_add:autoagric.planning.STDrivableBoundary.st_boundary)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::planning::STDrivableBoundaryInstance >&
STDrivableBoundary::st_boundary() const {
  // @@protoc_insertion_point(field_list:autoagric.planning.STDrivableBoundary.st_boundary)
  return st_boundary_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto
