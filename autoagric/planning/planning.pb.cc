// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/planning.proto

#include "autoagric/planning/planning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace planning {
constexpr ADCTrajectory::ADCTrajectory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trajectory_point_()
  , path_point_()
  , replan_reason_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , routing_header_(nullptr)
  , total_path_length_(0)
  , total_path_time_(0)
  , gear_(0)

  , is_replan_(false)
  , car_in_dead_end_(false)
  , right_of_way_status_(0)

  , trajectory_type_(0)
{}
struct ADCTrajectoryDefaultTypeInternal {
  constexpr ADCTrajectoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ADCTrajectoryDefaultTypeInternal() {}
  union {
    ADCTrajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
}  // namespace planning
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fplanning_2fplanning_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fplanning_2fplanning_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fplanning_2fplanning_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fplanning_2fplanning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, header_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, total_path_length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, total_path_time_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, is_replan_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, gear_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, trajectory_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, path_point_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, routing_header_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, right_of_way_status_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, trajectory_type_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, replan_reason_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ADCTrajectory, car_in_dead_end_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::planning::ADCTrajectory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_ADCTrajectory_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fplanning_2fplanning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!autoagric/planning/planning.proto\022\022aut"
  "oagric.planning\032\035autoagric/common/header"
  ".proto\032 autoagric/common/pnc_point.proto"
  "\032\036autoagric/canbus/chassis.proto\"\271\005\n\rADC"
  "Trajectory\022(\n\006header\030\001 \001(\0132\030.autoagric.c"
  "ommon.Header\022\031\n\021total_path_length\030\002 \001(\001\022"
  "\027\n\017total_path_time\030\003 \001(\001\022\021\n\tis_replan\030\t "
  "\001(\010\0224\n\004gear\030\n \001(\0162&.autoagric.canbus.Cha"
  "ssis.GearPosition\022;\n\020trajectory_point\030\014 "
  "\003(\0132!.autoagric.common.TrajectoryPoint\022/"
  "\n\npath_point\030\r \003(\0132\033.autoagric.common.Pa"
  "thPoint\0220\n\016routing_header\030\020 \001(\0132\030.autoag"
  "ric.common.Header\022O\n\023right_of_way_status"
  "\030\021 \001(\01622.autoagric.planning.ADCTrajector"
  "y.RightOfWayStatus\022I\n\017trajectory_type\030\025 "
  "\001(\01620.autoagric.planning.ADCTrajectory.T"
  "rajectoryType\022\025\n\rreplan_reason\030\026 \001(\t\022\027\n\017"
  "car_in_dead_end\030\030 \001(\010\"2\n\020RightOfWayStatu"
  "s\022\017\n\013UNPROTECTED\020\000\022\r\n\tPROTECTED\020\001\"a\n\016Tra"
  "jectoryType\022\013\n\007UNKNOWN\020\000\022\n\n\006NORMAL\020\001\022\021\n\r"
  "PATH_FALLBACK\020\002\022\022\n\016SPEED_FALLBACK\020\003\022\017\n\013P"
  "ATH_REUSED\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fplanning_2fplanning_2eproto_deps[3] = {
  &::descriptor_table_autoagric_2fcanbus_2fchassis_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fheader_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fpnc_5fpoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fplanning_2fplanning_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fplanning_2eproto = {
  false, false, 860, descriptor_table_protodef_autoagric_2fplanning_2fplanning_2eproto, "autoagric/planning/planning.proto", 
  &descriptor_table_autoagric_2fplanning_2fplanning_2eproto_once, descriptor_table_autoagric_2fplanning_2fplanning_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fplanning_2fplanning_2eproto::offsets,
  file_level_metadata_autoagric_2fplanning_2fplanning_2eproto, file_level_enum_descriptors_autoagric_2fplanning_2fplanning_2eproto, file_level_service_descriptors_autoagric_2fplanning_2fplanning_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fplanning_2fplanning_2eproto_getter() {
  return &descriptor_table_autoagric_2fplanning_2fplanning_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fplanning_2fplanning_2eproto(&descriptor_table_autoagric_2fplanning_2fplanning_2eproto);
namespace autoagric {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fplanning_2fplanning_2eproto);
  return file_level_enum_descriptors_autoagric_2fplanning_2fplanning_2eproto[0];
}
bool ADCTrajectory_RightOfWayStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::UNPROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::PROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MIN;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory::RightOfWayStatus_MAX;
constexpr int ADCTrajectory::RightOfWayStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fplanning_2fplanning_2eproto);
  return file_level_enum_descriptors_autoagric_2fplanning_2fplanning_2eproto[1];
}
bool ADCTrajectory_TrajectoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::UNKNOWN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::NORMAL;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::PATH_FALLBACK;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::SPEED_FALLBACK;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::PATH_REUSED;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MIN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory::TrajectoryType_MAX;
constexpr int ADCTrajectory::TrajectoryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ADCTrajectory::_Internal {
 public:
  static const ::autoagric::common::Header& header(const ADCTrajectory* msg);
  static const ::autoagric::common::Header& routing_header(const ADCTrajectory* msg);
};

const ::autoagric::common::Header&
ADCTrajectory::_Internal::header(const ADCTrajectory* msg) {
  return *msg->header_;
}
const ::autoagric::common::Header&
ADCTrajectory::_Internal::routing_header(const ADCTrajectory* msg) {
  return *msg->routing_header_;
}
void ADCTrajectory::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void ADCTrajectory::clear_trajectory_point() {
  trajectory_point_.Clear();
}
void ADCTrajectory::clear_path_point() {
  path_point_.Clear();
}
void ADCTrajectory::clear_routing_header() {
  if (GetArenaForAllocation() == nullptr && routing_header_ != nullptr) {
    delete routing_header_;
  }
  routing_header_ = nullptr;
}
ADCTrajectory::ADCTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  trajectory_point_(arena),
  path_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.ADCTrajectory)
}
ADCTrajectory::ADCTrajectory(const ADCTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trajectory_point_(from.trajectory_point_),
      path_point_(from.path_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  replan_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    replan_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_replan_reason().empty()) {
    replan_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_replan_reason(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::autoagric::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_routing_header()) {
    routing_header_ = new ::autoagric::common::Header(*from.routing_header_);
  } else {
    routing_header_ = nullptr;
  }
  ::memcpy(&total_path_length_, &from.total_path_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&trajectory_type_) -
    reinterpret_cast<char*>(&total_path_length_)) + sizeof(trajectory_type_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.ADCTrajectory)
}

inline void ADCTrajectory::SharedCtor() {
replan_reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  replan_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trajectory_type_) -
    reinterpret_cast<char*>(&header_)) + sizeof(trajectory_type_));
}

ADCTrajectory::~ADCTrajectory() {
  // @@protoc_insertion_point(destructor:autoagric.planning.ADCTrajectory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ADCTrajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  replan_reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete routing_header_;
}

void ADCTrajectory::ArenaDtor(void* object) {
  ADCTrajectory* _this = reinterpret_cast< ADCTrajectory* >(object);
  (void)_this;
}
void ADCTrajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ADCTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ADCTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.ADCTrajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trajectory_point_.Clear();
  path_point_.Clear();
  replan_reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && routing_header_ != nullptr) {
    delete routing_header_;
  }
  routing_header_ = nullptr;
  ::memset(&total_path_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_type_) -
      reinterpret_cast<char*>(&total_path_length_)) + sizeof(trajectory_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ADCTrajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double total_path_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          total_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double total_path_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          total_path_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool is_replan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          is_replan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.canbus.Chassis.GearPosition gear = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear(static_cast<::autoagric::canbus::Chassis_GearPosition>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.common.TrajectoryPoint trajectory_point = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trajectory_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .autoagric.common.PathPoint path_point = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_path_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Header routing_header = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_right_of_way_status(static_cast<::autoagric::planning::ADCTrajectory_RightOfWayStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.ADCTrajectory.TrajectoryType trajectory_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trajectory_type(static_cast<::autoagric::planning::ADCTrajectory_TrajectoryType>(val));
        } else
          goto handle_unusual;
        continue;
      // string replan_reason = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_replan_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.planning.ADCTrajectory.replan_reason"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool car_in_dead_end = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          car_in_dead_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ADCTrajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.ADCTrajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // double total_path_length = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_path_length = this->_internal_total_path_length();
  uint64_t raw_total_path_length;
  memcpy(&raw_total_path_length, &tmp_total_path_length, sizeof(tmp_total_path_length));
  if (raw_total_path_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_total_path_length(), target);
  }

  // double total_path_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_path_time = this->_internal_total_path_time();
  uint64_t raw_total_path_time;
  memcpy(&raw_total_path_time, &tmp_total_path_time, sizeof(tmp_total_path_time));
  if (raw_total_path_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_path_time(), target);
  }

  // bool is_replan = 9;
  if (this->_internal_is_replan() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_replan(), target);
  }

  // .autoagric.canbus.Chassis.GearPosition gear = 10;
  if (this->_internal_gear() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_gear(), target);
  }

  // repeated .autoagric.common.TrajectoryPoint trajectory_point = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trajectory_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_trajectory_point(i), target, stream);
  }

  // repeated .autoagric.common.PathPoint path_point = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_path_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_path_point(i), target, stream);
  }

  // .autoagric.common.Header routing_header = 16;
  if (this->_internal_has_routing_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::routing_header(this), target, stream);
  }

  // .autoagric.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (this->_internal_right_of_way_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_right_of_way_status(), target);
  }

  // .autoagric.planning.ADCTrajectory.TrajectoryType trajectory_type = 21;
  if (this->_internal_trajectory_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_trajectory_type(), target);
  }

  // string replan_reason = 22;
  if (!this->_internal_replan_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_replan_reason().data(), static_cast<int>(this->_internal_replan_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.planning.ADCTrajectory.replan_reason");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_replan_reason(), target);
  }

  // bool car_in_dead_end = 24;
  if (this->_internal_car_in_dead_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_car_in_dead_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.ADCTrajectory)
  return target;
}

size_t ADCTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.ADCTrajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.common.TrajectoryPoint trajectory_point = 12;
  total_size += 1UL * this->_internal_trajectory_point_size();
  for (const auto& msg : this->trajectory_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .autoagric.common.PathPoint path_point = 13;
  total_size += 1UL * this->_internal_path_point_size();
  for (const auto& msg : this->path_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string replan_reason = 22;
  if (!this->_internal_replan_reason().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_replan_reason());
  }

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .autoagric.common.Header routing_header = 16;
  if (this->_internal_has_routing_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_header_);
  }

  // double total_path_length = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_path_length = this->_internal_total_path_length();
  uint64_t raw_total_path_length;
  memcpy(&raw_total_path_length, &tmp_total_path_length, sizeof(tmp_total_path_length));
  if (raw_total_path_length != 0) {
    total_size += 1 + 8;
  }

  // double total_path_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_path_time = this->_internal_total_path_time();
  uint64_t raw_total_path_time;
  memcpy(&raw_total_path_time, &tmp_total_path_time, sizeof(tmp_total_path_time));
  if (raw_total_path_time != 0) {
    total_size += 1 + 8;
  }

  // .autoagric.canbus.Chassis.GearPosition gear = 10;
  if (this->_internal_gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear());
  }

  // bool is_replan = 9;
  if (this->_internal_is_replan() != 0) {
    total_size += 1 + 1;
  }

  // bool car_in_dead_end = 24;
  if (this->_internal_car_in_dead_end() != 0) {
    total_size += 2 + 1;
  }

  // .autoagric.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  if (this->_internal_right_of_way_status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_right_of_way_status());
  }

  // .autoagric.planning.ADCTrajectory.TrajectoryType trajectory_type = 21;
  if (this->_internal_trajectory_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trajectory_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ADCTrajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ADCTrajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ADCTrajectory::GetClassData() const { return &_class_data_; }

void ADCTrajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ADCTrajectory *>(to)->MergeFrom(
      static_cast<const ADCTrajectory &>(from));
}


void ADCTrajectory::MergeFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.ADCTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  path_point_.MergeFrom(from.path_point_);
  if (!from._internal_replan_reason().empty()) {
    _internal_set_replan_reason(from._internal_replan_reason());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::autoagric::common::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_routing_header()) {
    _internal_mutable_routing_header()->::autoagric::common::Header::MergeFrom(from._internal_routing_header());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_path_length = from._internal_total_path_length();
  uint64_t raw_total_path_length;
  memcpy(&raw_total_path_length, &tmp_total_path_length, sizeof(tmp_total_path_length));
  if (raw_total_path_length != 0) {
    _internal_set_total_path_length(from._internal_total_path_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_total_path_time = from._internal_total_path_time();
  uint64_t raw_total_path_time;
  memcpy(&raw_total_path_time, &tmp_total_path_time, sizeof(tmp_total_path_time));
  if (raw_total_path_time != 0) {
    _internal_set_total_path_time(from._internal_total_path_time());
  }
  if (from._internal_gear() != 0) {
    _internal_set_gear(from._internal_gear());
  }
  if (from._internal_is_replan() != 0) {
    _internal_set_is_replan(from._internal_is_replan());
  }
  if (from._internal_car_in_dead_end() != 0) {
    _internal_set_car_in_dead_end(from._internal_car_in_dead_end());
  }
  if (from._internal_right_of_way_status() != 0) {
    _internal_set_right_of_way_status(from._internal_right_of_way_status());
  }
  if (from._internal_trajectory_type() != 0) {
    _internal_set_trajectory_type(from._internal_trajectory_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ADCTrajectory::CopyFrom(const ADCTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.ADCTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADCTrajectory::IsInitialized() const {
  return true;
}

void ADCTrajectory::InternalSwap(ADCTrajectory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  path_point_.InternalSwap(&other->path_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &replan_reason_, lhs_arena,
      &other->replan_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ADCTrajectory, trajectory_type_)
      + sizeof(ADCTrajectory::trajectory_type_)
      - PROTOBUF_FIELD_OFFSET(ADCTrajectory, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ADCTrajectory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fplanning_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fplanning_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fplanning_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::planning::ADCTrajectory* Arena::CreateMaybeMessage< ::autoagric::planning::ADCTrajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::ADCTrajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
