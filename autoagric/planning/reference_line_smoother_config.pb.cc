// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/reference_line_smoother_config.proto

#include "autoagric/planning/reference_line_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace planning {
constexpr QpSplineSmootherConfig::QpSplineSmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_spline_length_(0)
  , regularization_weight_(0)
  , second_derivative_weight_(0)
  , third_derivative_weight_(0)
  , spline_order_(0u){}
struct QpSplineSmootherConfigDefaultTypeInternal {
  constexpr QpSplineSmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QpSplineSmootherConfigDefaultTypeInternal() {}
  union {
    QpSplineSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QpSplineSmootherConfigDefaultTypeInternal _QpSplineSmootherConfig_default_instance_;
constexpr SpiralSmootherConfig::SpiralSmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_deviation_(0)
  , piecewise_length_(0)
  , opt_tol_(0)
  , max_iteration_(0u)
  , opt_acceptable_iteration_(0u)
  , opt_acceptable_tol_(0)
  , weight_curve_length_(0)
  , weight_kappa_(0)
  , weight_dkappa_(0){}
struct SpiralSmootherConfigDefaultTypeInternal {
  constexpr SpiralSmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpiralSmootherConfigDefaultTypeInternal() {}
  union {
    SpiralSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpiralSmootherConfigDefaultTypeInternal _SpiralSmootherConfig_default_instance_;
constexpr DiscretePointsSmootherConfig::DiscretePointsSmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : smoothing_method_(0)

  , _oneof_case_{}{}
struct DiscretePointsSmootherConfigDefaultTypeInternal {
  constexpr DiscretePointsSmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiscretePointsSmootherConfigDefaultTypeInternal() {}
  union {
    DiscretePointsSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiscretePointsSmootherConfigDefaultTypeInternal _DiscretePointsSmootherConfig_default_instance_;
constexpr ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_constraint_interval_(0)
  , longitudinal_boundary_bound_(0)
  , max_lateral_boundary_bound_(0)
  , min_lateral_boundary_bound_(0)
  , curb_shift_(0)
  , lateral_buffer_(0)
  , resolution_(0)
  , num_of_total_points_(0u)
  , _oneof_case_{}{}
struct ReferenceLineSmootherConfigDefaultTypeInternal {
  constexpr ReferenceLineSmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReferenceLineSmootherConfigDefaultTypeInternal() {}
  union {
    ReferenceLineSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReferenceLineSmootherConfigDefaultTypeInternal _ReferenceLineSmootherConfig_default_instance_;
constexpr TrajectorySmootherConfig::TrajectorySmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : max_constraint_interval_(0)
  , longitudinal_boundary_bound_(0)
  , max_lateral_boundary_bound_(0)
  , min_lateral_boundary_bound_(0)
  , curb_shift_(0)
  , lateral_buffer_(0)
  , resolution_(0)
  , num_of_total_points_(0u)
  , _oneof_case_{}{}
struct TrajectorySmootherConfigDefaultTypeInternal {
  constexpr TrajectorySmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectorySmootherConfigDefaultTypeInternal() {}
  union {
    TrajectorySmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectorySmootherConfigDefaultTypeInternal _TrajectorySmootherConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::QpSplineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::QpSplineSmootherConfig, spline_order_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::QpSplineSmootherConfig, max_spline_length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::QpSplineSmootherConfig, regularization_weight_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::QpSplineSmootherConfig, second_derivative_weight_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::QpSplineSmootherConfig, third_derivative_weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, max_deviation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, piecewise_length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, max_iteration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, opt_tol_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, opt_acceptable_tol_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, opt_acceptable_iteration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, weight_curve_length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, weight_kappa_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::SpiralSmootherConfig, weight_dkappa_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::DiscretePointsSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::DiscretePointsSmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::DiscretePointsSmootherConfig, smoothing_method_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::DiscretePointsSmootherConfig, SmootherConfig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, max_constraint_interval_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, longitudinal_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, max_lateral_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, min_lateral_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, num_of_total_points_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, curb_shift_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, lateral_buffer_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, resolution_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ReferenceLineSmootherConfig, SmootherConfig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, max_constraint_interval_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, longitudinal_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, max_lateral_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, min_lateral_boundary_bound_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, num_of_total_points_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, curb_shift_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, lateral_buffer_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, resolution_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::TrajectorySmootherConfig, SmootherConfig_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::planning::QpSplineSmootherConfig)},
  { 11, -1, -1, sizeof(::autoagric::planning::SpiralSmootherConfig)},
  { 26, -1, -1, sizeof(::autoagric::planning::DiscretePointsSmootherConfig)},
  { 36, -1, -1, sizeof(::autoagric::planning::ReferenceLineSmootherConfig)},
  { 54, -1, -1, sizeof(::autoagric::planning::TrajectorySmootherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_QpSplineSmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_SpiralSmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_DiscretePointsSmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_ReferenceLineSmootherConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_TrajectorySmootherConfig_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7autoagric/planning/reference_line_smoo"
  "ther_config.proto\022\022autoagric.planning\0327a"
  "utoagric/planning/math/cos_theta_smoothe"
  "r_config.proto\032\?autoagric/planning/math/"
  "fem_pos_deviation_smoother_config.proto\""
  "\253\001\n\026QpSplineSmootherConfig\022\024\n\014spline_ord"
  "er\030\001 \001(\r\022\031\n\021max_spline_length\030\002 \001(\001\022\035\n\025r"
  "egularization_weight\030\003 \001(\001\022 \n\030second_der"
  "ivative_weight\030\004 \001(\001\022\037\n\027third_derivative"
  "_weight\030\005 \001(\001\"\367\001\n\024SpiralSmootherConfig\022\025"
  "\n\rmax_deviation\030\001 \001(\001\022\030\n\020piecewise_lengt"
  "h\030\002 \001(\001\022\025\n\rmax_iteration\030\003 \001(\r\022\017\n\007opt_to"
  "l\030\004 \001(\001\022\032\n\022opt_acceptable_tol\030\005 \001(\001\022 \n\030o"
  "pt_acceptable_iteration\030\006 \001(\r\022\033\n\023weight_"
  "curve_length\030\007 \001(\001\022\024\n\014weight_kappa\030\010 \001(\001"
  "\022\025\n\rweight_dkappa\030\t \001(\001\"\217\003\n\034DiscretePoin"
  "tsSmootherConfig\022Z\n\020smoothing_method\030\003 \001"
  "(\0162@.autoagric.planning.DiscretePointsSm"
  "ootherConfig.SmoothingMethod\022I\n\023cos_thet"
  "a_smoothing\030\004 \001(\0132*.autoagric.planning.C"
  "osThetaSmootherConfigH\000\022X\n\033fem_pos_devia"
  "tion_smoothing\030\005 \001(\01321.autoagric.plannin"
  "g.FemPosDeviationSmootherConfigH\000\"\\\n\017Smo"
  "othingMethod\022\017\n\013NOT_DEFINED\020\000\022\027\n\023COS_THE"
  "TA_SMOOTHING\020\001\022\037\n\033FEM_POS_DEVIATION_SMOO"
  "THING\020\002B\020\n\016SmootherConfig\"\344\003\n\033ReferenceL"
  "ineSmootherConfig\022\037\n\027max_constraint_inte"
  "rval\030\001 \001(\001\022#\n\033longitudinal_boundary_boun"
  "d\030\002 \001(\001\022\"\n\032max_lateral_boundary_bound\030\003 "
  "\001(\001\022\"\n\032min_lateral_boundary_bound\030\004 \001(\001\022"
  "\033\n\023num_of_total_points\030\005 \001(\r\022\022\n\ncurb_shi"
  "ft\030\006 \001(\001\022\026\n\016lateral_buffer\030\007 \001(\001\022\022\n\nreso"
  "lution\030\010 \001(\001\022\?\n\tqp_spline\030\024 \001(\0132*.autoag"
  "ric.planning.QpSplineSmootherConfigH\000\022:\n"
  "\006spiral\030\025 \001(\0132(.autoagric.planning.Spira"
  "lSmootherConfigH\000\022K\n\017discrete_points\030\026 \001"
  "(\01320.autoagric.planning.DiscretePointsSm"
  "ootherConfigH\000B\020\n\016SmootherConfig\"\341\003\n\030Tra"
  "jectorySmootherConfig\022\037\n\027max_constraint_"
  "interval\030\001 \001(\001\022#\n\033longitudinal_boundary_"
  "bound\030\002 \001(\001\022\"\n\032max_lateral_boundary_boun"
  "d\030\003 \001(\001\022\"\n\032min_lateral_boundary_bound\030\004 "
  "\001(\001\022\033\n\023num_of_total_points\030\005 \001(\r\022\022\n\ncurb"
  "_shift\030\006 \001(\001\022\026\n\016lateral_buffer\030\007 \001(\001\022\022\n\n"
  "resolution\030\010 \001(\001\022\?\n\tqp_spline\030\024 \001(\0132*.au"
  "toagric.planning.QpSplineSmootherConfigH"
  "\000\022:\n\006spiral\030\025 \001(\0132(.autoagric.planning.S"
  "piralSmootherConfigH\000\022K\n\017discrete_points"
  "\030\026 \001(\01320.autoagric.planning.DiscretePoin"
  "tsSmootherConfigH\000B\020\n\016SmootherConfigb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto,
  &::descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto = {
  false, false, 2004, descriptor_table_protodef_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto, "autoagric/planning/reference_line_smoother_config.proto", 
  &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_once, descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto::offsets,
  file_level_metadata_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto, file_level_enum_descriptors_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto, file_level_service_descriptors_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_getter() {
  return &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto(&descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto);
namespace autoagric {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DiscretePointsSmootherConfig_SmoothingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto);
  return file_level_enum_descriptors_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[0];
}
bool DiscretePointsSmootherConfig_SmoothingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::NOT_DEFINED;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::COS_THETA_SMOOTHING;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::FEM_POS_DEVIATION_SMOOTHING;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::SmoothingMethod_MIN;
constexpr DiscretePointsSmootherConfig_SmoothingMethod DiscretePointsSmootherConfig::SmoothingMethod_MAX;
constexpr int DiscretePointsSmootherConfig::SmoothingMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class QpSplineSmootherConfig::_Internal {
 public:
};

QpSplineSmootherConfig::QpSplineSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.QpSplineSmootherConfig)
}
QpSplineSmootherConfig::QpSplineSmootherConfig(const QpSplineSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_spline_length_, &from.max_spline_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&spline_order_) -
    reinterpret_cast<char*>(&max_spline_length_)) + sizeof(spline_order_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.QpSplineSmootherConfig)
}

inline void QpSplineSmootherConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_spline_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&spline_order_) -
    reinterpret_cast<char*>(&max_spline_length_)) + sizeof(spline_order_));
}

QpSplineSmootherConfig::~QpSplineSmootherConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.QpSplineSmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QpSplineSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QpSplineSmootherConfig::ArenaDtor(void* object) {
  QpSplineSmootherConfig* _this = reinterpret_cast< QpSplineSmootherConfig* >(object);
  (void)_this;
}
void QpSplineSmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QpSplineSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QpSplineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.QpSplineSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_spline_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spline_order_) -
      reinterpret_cast<char*>(&max_spline_length_)) + sizeof(spline_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QpSplineSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 spline_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          spline_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double max_spline_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          max_spline_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double regularization_weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          regularization_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double second_derivative_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          second_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double third_derivative_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          third_derivative_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QpSplineSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.QpSplineSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 spline_order = 1;
  if (this->_internal_spline_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_spline_order(), target);
  }

  // double max_spline_length = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_spline_length = this->_internal_max_spline_length();
  uint64_t raw_max_spline_length;
  memcpy(&raw_max_spline_length, &tmp_max_spline_length, sizeof(tmp_max_spline_length));
  if (raw_max_spline_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_spline_length(), target);
  }

  // double regularization_weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_regularization_weight = this->_internal_regularization_weight();
  uint64_t raw_regularization_weight;
  memcpy(&raw_regularization_weight, &tmp_regularization_weight, sizeof(tmp_regularization_weight));
  if (raw_regularization_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_regularization_weight(), target);
  }

  // double second_derivative_weight = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_second_derivative_weight = this->_internal_second_derivative_weight();
  uint64_t raw_second_derivative_weight;
  memcpy(&raw_second_derivative_weight, &tmp_second_derivative_weight, sizeof(tmp_second_derivative_weight));
  if (raw_second_derivative_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_second_derivative_weight(), target);
  }

  // double third_derivative_weight = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_third_derivative_weight = this->_internal_third_derivative_weight();
  uint64_t raw_third_derivative_weight;
  memcpy(&raw_third_derivative_weight, &tmp_third_derivative_weight, sizeof(tmp_third_derivative_weight));
  if (raw_third_derivative_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_third_derivative_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.QpSplineSmootherConfig)
  return target;
}

size_t QpSplineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.QpSplineSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_spline_length = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_spline_length = this->_internal_max_spline_length();
  uint64_t raw_max_spline_length;
  memcpy(&raw_max_spline_length, &tmp_max_spline_length, sizeof(tmp_max_spline_length));
  if (raw_max_spline_length != 0) {
    total_size += 1 + 8;
  }

  // double regularization_weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_regularization_weight = this->_internal_regularization_weight();
  uint64_t raw_regularization_weight;
  memcpy(&raw_regularization_weight, &tmp_regularization_weight, sizeof(tmp_regularization_weight));
  if (raw_regularization_weight != 0) {
    total_size += 1 + 8;
  }

  // double second_derivative_weight = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_second_derivative_weight = this->_internal_second_derivative_weight();
  uint64_t raw_second_derivative_weight;
  memcpy(&raw_second_derivative_weight, &tmp_second_derivative_weight, sizeof(tmp_second_derivative_weight));
  if (raw_second_derivative_weight != 0) {
    total_size += 1 + 8;
  }

  // double third_derivative_weight = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_third_derivative_weight = this->_internal_third_derivative_weight();
  uint64_t raw_third_derivative_weight;
  memcpy(&raw_third_derivative_weight, &tmp_third_derivative_weight, sizeof(tmp_third_derivative_weight));
  if (raw_third_derivative_weight != 0) {
    total_size += 1 + 8;
  }

  // uint32 spline_order = 1;
  if (this->_internal_spline_order() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_spline_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QpSplineSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QpSplineSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QpSplineSmootherConfig::GetClassData() const { return &_class_data_; }

void QpSplineSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QpSplineSmootherConfig *>(to)->MergeFrom(
      static_cast<const QpSplineSmootherConfig &>(from));
}


void QpSplineSmootherConfig::MergeFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.QpSplineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_spline_length = from._internal_max_spline_length();
  uint64_t raw_max_spline_length;
  memcpy(&raw_max_spline_length, &tmp_max_spline_length, sizeof(tmp_max_spline_length));
  if (raw_max_spline_length != 0) {
    _internal_set_max_spline_length(from._internal_max_spline_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_regularization_weight = from._internal_regularization_weight();
  uint64_t raw_regularization_weight;
  memcpy(&raw_regularization_weight, &tmp_regularization_weight, sizeof(tmp_regularization_weight));
  if (raw_regularization_weight != 0) {
    _internal_set_regularization_weight(from._internal_regularization_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_second_derivative_weight = from._internal_second_derivative_weight();
  uint64_t raw_second_derivative_weight;
  memcpy(&raw_second_derivative_weight, &tmp_second_derivative_weight, sizeof(tmp_second_derivative_weight));
  if (raw_second_derivative_weight != 0) {
    _internal_set_second_derivative_weight(from._internal_second_derivative_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_third_derivative_weight = from._internal_third_derivative_weight();
  uint64_t raw_third_derivative_weight;
  memcpy(&raw_third_derivative_weight, &tmp_third_derivative_weight, sizeof(tmp_third_derivative_weight));
  if (raw_third_derivative_weight != 0) {
    _internal_set_third_derivative_weight(from._internal_third_derivative_weight());
  }
  if (from._internal_spline_order() != 0) {
    _internal_set_spline_order(from._internal_spline_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QpSplineSmootherConfig::CopyFrom(const QpSplineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.QpSplineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpSplineSmootherConfig::IsInitialized() const {
  return true;
}

void QpSplineSmootherConfig::InternalSwap(QpSplineSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QpSplineSmootherConfig, spline_order_)
      + sizeof(QpSplineSmootherConfig::spline_order_)
      - PROTOBUF_FIELD_OFFSET(QpSplineSmootherConfig, max_spline_length_)>(
          reinterpret_cast<char*>(&max_spline_length_),
          reinterpret_cast<char*>(&other->max_spline_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QpSplineSmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[0]);
}

// ===================================================================

class SpiralSmootherConfig::_Internal {
 public:
};

SpiralSmootherConfig::SpiralSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.SpiralSmootherConfig)
}
SpiralSmootherConfig::SpiralSmootherConfig(const SpiralSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_deviation_, &from.max_deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_dkappa_) -
    reinterpret_cast<char*>(&max_deviation_)) + sizeof(weight_dkappa_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.SpiralSmootherConfig)
}

inline void SpiralSmootherConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_deviation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_dkappa_) -
    reinterpret_cast<char*>(&max_deviation_)) + sizeof(weight_dkappa_));
}

SpiralSmootherConfig::~SpiralSmootherConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.SpiralSmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpiralSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpiralSmootherConfig::ArenaDtor(void* object) {
  SpiralSmootherConfig* _this = reinterpret_cast< SpiralSmootherConfig* >(object);
  (void)_this;
}
void SpiralSmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpiralSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpiralSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.SpiralSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_deviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_dkappa_) -
      reinterpret_cast<char*>(&max_deviation_)) + sizeof(weight_dkappa_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpiralSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double max_deviation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          max_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double piecewise_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          piecewise_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_iteration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          max_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double opt_tol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          opt_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double opt_acceptable_tol = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          opt_acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 opt_acceptable_iteration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          opt_acceptable_iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight_curve_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          weight_curve_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_kappa = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          weight_kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_dkappa = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          weight_dkappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpiralSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.SpiralSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_deviation = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_deviation = this->_internal_max_deviation();
  uint64_t raw_max_deviation;
  memcpy(&raw_max_deviation, &tmp_max_deviation, sizeof(tmp_max_deviation));
  if (raw_max_deviation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_deviation(), target);
  }

  // double piecewise_length = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_piecewise_length = this->_internal_piecewise_length();
  uint64_t raw_piecewise_length;
  memcpy(&raw_piecewise_length, &tmp_piecewise_length, sizeof(tmp_piecewise_length));
  if (raw_piecewise_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_piecewise_length(), target);
  }

  // uint32 max_iteration = 3;
  if (this->_internal_max_iteration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_iteration(), target);
  }

  // double opt_tol = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opt_tol = this->_internal_opt_tol();
  uint64_t raw_opt_tol;
  memcpy(&raw_opt_tol, &tmp_opt_tol, sizeof(tmp_opt_tol));
  if (raw_opt_tol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_opt_tol(), target);
  }

  // double opt_acceptable_tol = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opt_acceptable_tol = this->_internal_opt_acceptable_tol();
  uint64_t raw_opt_acceptable_tol;
  memcpy(&raw_opt_acceptable_tol, &tmp_opt_acceptable_tol, sizeof(tmp_opt_acceptable_tol));
  if (raw_opt_acceptable_tol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_opt_acceptable_tol(), target);
  }

  // uint32 opt_acceptable_iteration = 6;
  if (this->_internal_opt_acceptable_iteration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_opt_acceptable_iteration(), target);
  }

  // double weight_curve_length = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_curve_length = this->_internal_weight_curve_length();
  uint64_t raw_weight_curve_length;
  memcpy(&raw_weight_curve_length, &tmp_weight_curve_length, sizeof(tmp_weight_curve_length));
  if (raw_weight_curve_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_weight_curve_length(), target);
  }

  // double weight_kappa = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_kappa = this->_internal_weight_kappa();
  uint64_t raw_weight_kappa;
  memcpy(&raw_weight_kappa, &tmp_weight_kappa, sizeof(tmp_weight_kappa));
  if (raw_weight_kappa != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_weight_kappa(), target);
  }

  // double weight_dkappa = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_dkappa = this->_internal_weight_dkappa();
  uint64_t raw_weight_dkappa;
  memcpy(&raw_weight_dkappa, &tmp_weight_dkappa, sizeof(tmp_weight_dkappa));
  if (raw_weight_dkappa != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_weight_dkappa(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.SpiralSmootherConfig)
  return target;
}

size_t SpiralSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.SpiralSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_deviation = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_deviation = this->_internal_max_deviation();
  uint64_t raw_max_deviation;
  memcpy(&raw_max_deviation, &tmp_max_deviation, sizeof(tmp_max_deviation));
  if (raw_max_deviation != 0) {
    total_size += 1 + 8;
  }

  // double piecewise_length = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_piecewise_length = this->_internal_piecewise_length();
  uint64_t raw_piecewise_length;
  memcpy(&raw_piecewise_length, &tmp_piecewise_length, sizeof(tmp_piecewise_length));
  if (raw_piecewise_length != 0) {
    total_size += 1 + 8;
  }

  // double opt_tol = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opt_tol = this->_internal_opt_tol();
  uint64_t raw_opt_tol;
  memcpy(&raw_opt_tol, &tmp_opt_tol, sizeof(tmp_opt_tol));
  if (raw_opt_tol != 0) {
    total_size += 1 + 8;
  }

  // uint32 max_iteration = 3;
  if (this->_internal_max_iteration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_iteration());
  }

  // uint32 opt_acceptable_iteration = 6;
  if (this->_internal_opt_acceptable_iteration() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_opt_acceptable_iteration());
  }

  // double opt_acceptable_tol = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opt_acceptable_tol = this->_internal_opt_acceptable_tol();
  uint64_t raw_opt_acceptable_tol;
  memcpy(&raw_opt_acceptable_tol, &tmp_opt_acceptable_tol, sizeof(tmp_opt_acceptable_tol));
  if (raw_opt_acceptable_tol != 0) {
    total_size += 1 + 8;
  }

  // double weight_curve_length = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_curve_length = this->_internal_weight_curve_length();
  uint64_t raw_weight_curve_length;
  memcpy(&raw_weight_curve_length, &tmp_weight_curve_length, sizeof(tmp_weight_curve_length));
  if (raw_weight_curve_length != 0) {
    total_size += 1 + 8;
  }

  // double weight_kappa = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_kappa = this->_internal_weight_kappa();
  uint64_t raw_weight_kappa;
  memcpy(&raw_weight_kappa, &tmp_weight_kappa, sizeof(tmp_weight_kappa));
  if (raw_weight_kappa != 0) {
    total_size += 1 + 8;
  }

  // double weight_dkappa = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_dkappa = this->_internal_weight_dkappa();
  uint64_t raw_weight_dkappa;
  memcpy(&raw_weight_dkappa, &tmp_weight_dkappa, sizeof(tmp_weight_dkappa));
  if (raw_weight_dkappa != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpiralSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpiralSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpiralSmootherConfig::GetClassData() const { return &_class_data_; }

void SpiralSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpiralSmootherConfig *>(to)->MergeFrom(
      static_cast<const SpiralSmootherConfig &>(from));
}


void SpiralSmootherConfig::MergeFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.SpiralSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_deviation = from._internal_max_deviation();
  uint64_t raw_max_deviation;
  memcpy(&raw_max_deviation, &tmp_max_deviation, sizeof(tmp_max_deviation));
  if (raw_max_deviation != 0) {
    _internal_set_max_deviation(from._internal_max_deviation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_piecewise_length = from._internal_piecewise_length();
  uint64_t raw_piecewise_length;
  memcpy(&raw_piecewise_length, &tmp_piecewise_length, sizeof(tmp_piecewise_length));
  if (raw_piecewise_length != 0) {
    _internal_set_piecewise_length(from._internal_piecewise_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opt_tol = from._internal_opt_tol();
  uint64_t raw_opt_tol;
  memcpy(&raw_opt_tol, &tmp_opt_tol, sizeof(tmp_opt_tol));
  if (raw_opt_tol != 0) {
    _internal_set_opt_tol(from._internal_opt_tol());
  }
  if (from._internal_max_iteration() != 0) {
    _internal_set_max_iteration(from._internal_max_iteration());
  }
  if (from._internal_opt_acceptable_iteration() != 0) {
    _internal_set_opt_acceptable_iteration(from._internal_opt_acceptable_iteration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opt_acceptable_tol = from._internal_opt_acceptable_tol();
  uint64_t raw_opt_acceptable_tol;
  memcpy(&raw_opt_acceptable_tol, &tmp_opt_acceptable_tol, sizeof(tmp_opt_acceptable_tol));
  if (raw_opt_acceptable_tol != 0) {
    _internal_set_opt_acceptable_tol(from._internal_opt_acceptable_tol());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_curve_length = from._internal_weight_curve_length();
  uint64_t raw_weight_curve_length;
  memcpy(&raw_weight_curve_length, &tmp_weight_curve_length, sizeof(tmp_weight_curve_length));
  if (raw_weight_curve_length != 0) {
    _internal_set_weight_curve_length(from._internal_weight_curve_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_kappa = from._internal_weight_kappa();
  uint64_t raw_weight_kappa;
  memcpy(&raw_weight_kappa, &tmp_weight_kappa, sizeof(tmp_weight_kappa));
  if (raw_weight_kappa != 0) {
    _internal_set_weight_kappa(from._internal_weight_kappa());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_dkappa = from._internal_weight_dkappa();
  uint64_t raw_weight_dkappa;
  memcpy(&raw_weight_dkappa, &tmp_weight_dkappa, sizeof(tmp_weight_dkappa));
  if (raw_weight_dkappa != 0) {
    _internal_set_weight_dkappa(from._internal_weight_dkappa());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpiralSmootherConfig::CopyFrom(const SpiralSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.SpiralSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiralSmootherConfig::IsInitialized() const {
  return true;
}

void SpiralSmootherConfig::InternalSwap(SpiralSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpiralSmootherConfig, weight_dkappa_)
      + sizeof(SpiralSmootherConfig::weight_dkappa_)
      - PROTOBUF_FIELD_OFFSET(SpiralSmootherConfig, max_deviation_)>(
          reinterpret_cast<char*>(&max_deviation_),
          reinterpret_cast<char*>(&other->max_deviation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpiralSmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[1]);
}

// ===================================================================

class DiscretePointsSmootherConfig::_Internal {
 public:
  static const ::autoagric::planning::CosThetaSmootherConfig& cos_theta_smoothing(const DiscretePointsSmootherConfig* msg);
  static const ::autoagric::planning::FemPosDeviationSmootherConfig& fem_pos_deviation_smoothing(const DiscretePointsSmootherConfig* msg);
};

const ::autoagric::planning::CosThetaSmootherConfig&
DiscretePointsSmootherConfig::_Internal::cos_theta_smoothing(const DiscretePointsSmootherConfig* msg) {
  return *msg->SmootherConfig_.cos_theta_smoothing_;
}
const ::autoagric::planning::FemPosDeviationSmootherConfig&
DiscretePointsSmootherConfig::_Internal::fem_pos_deviation_smoothing(const DiscretePointsSmootherConfig* msg) {
  return *msg->SmootherConfig_.fem_pos_deviation_smoothing_;
}
void DiscretePointsSmootherConfig::set_allocated_cos_theta_smoothing(::autoagric::planning::CosThetaSmootherConfig* cos_theta_smoothing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (cos_theta_smoothing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cos_theta_smoothing));
    if (message_arena != submessage_arena) {
      cos_theta_smoothing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cos_theta_smoothing, submessage_arena);
    }
    set_has_cos_theta_smoothing();
    SmootherConfig_.cos_theta_smoothing_ = cos_theta_smoothing;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.DiscretePointsSmootherConfig.cos_theta_smoothing)
}
void DiscretePointsSmootherConfig::clear_cos_theta_smoothing() {
  if (_internal_has_cos_theta_smoothing()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SmootherConfig_.cos_theta_smoothing_;
    }
    clear_has_SmootherConfig();
  }
}
void DiscretePointsSmootherConfig::set_allocated_fem_pos_deviation_smoothing(::autoagric::planning::FemPosDeviationSmootherConfig* fem_pos_deviation_smoothing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (fem_pos_deviation_smoothing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fem_pos_deviation_smoothing));
    if (message_arena != submessage_arena) {
      fem_pos_deviation_smoothing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fem_pos_deviation_smoothing, submessage_arena);
    }
    set_has_fem_pos_deviation_smoothing();
    SmootherConfig_.fem_pos_deviation_smoothing_ = fem_pos_deviation_smoothing;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.DiscretePointsSmootherConfig.fem_pos_deviation_smoothing)
}
void DiscretePointsSmootherConfig::clear_fem_pos_deviation_smoothing() {
  if (_internal_has_fem_pos_deviation_smoothing()) {
    if (GetArenaForAllocation() == nullptr) {
      delete SmootherConfig_.fem_pos_deviation_smoothing_;
    }
    clear_has_SmootherConfig();
  }
}
DiscretePointsSmootherConfig::DiscretePointsSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.DiscretePointsSmootherConfig)
}
DiscretePointsSmootherConfig::DiscretePointsSmootherConfig(const DiscretePointsSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  smoothing_method_ = from.smoothing_method_;
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      _internal_mutable_cos_theta_smoothing()->::autoagric::planning::CosThetaSmootherConfig::MergeFrom(from._internal_cos_theta_smoothing());
      break;
    }
    case kFemPosDeviationSmoothing: {
      _internal_mutable_fem_pos_deviation_smoothing()->::autoagric::planning::FemPosDeviationSmootherConfig::MergeFrom(from._internal_fem_pos_deviation_smoothing());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.DiscretePointsSmootherConfig)
}

inline void DiscretePointsSmootherConfig::SharedCtor() {
smoothing_method_ = 0;
clear_has_SmootherConfig();
}

DiscretePointsSmootherConfig::~DiscretePointsSmootherConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.DiscretePointsSmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiscretePointsSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void DiscretePointsSmootherConfig::ArenaDtor(void* object) {
  DiscretePointsSmootherConfig* _this = reinterpret_cast< DiscretePointsSmootherConfig* >(object);
  (void)_this;
}
void DiscretePointsSmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiscretePointsSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscretePointsSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:autoagric.planning.DiscretePointsSmootherConfig)
  switch (SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.cos_theta_smoothing_;
      }
      break;
    }
    case kFemPosDeviationSmoothing: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.fem_pos_deviation_smoothing_;
      }
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void DiscretePointsSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.DiscretePointsSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  smoothing_method_ = 0;
  clear_SmootherConfig();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiscretePointsSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_smoothing_method(static_cast<::autoagric::planning::DiscretePointsSmootherConfig_SmoothingMethod>(val));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cos_theta_smoothing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fem_pos_deviation_smoothing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscretePointsSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.DiscretePointsSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3;
  if (this->_internal_smoothing_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_smoothing_method(), target);
  }

  // .autoagric.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
  if (_internal_has_cos_theta_smoothing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cos_theta_smoothing(this), target, stream);
  }

  // .autoagric.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
  if (_internal_has_fem_pos_deviation_smoothing()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fem_pos_deviation_smoothing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.DiscretePointsSmootherConfig)
  return target;
}

size_t DiscretePointsSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.DiscretePointsSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.planning.DiscretePointsSmootherConfig.SmoothingMethod smoothing_method = 3;
  if (this->_internal_smoothing_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_smoothing_method());
  }

  switch (SmootherConfig_case()) {
    // .autoagric.planning.CosThetaSmootherConfig cos_theta_smoothing = 4;
    case kCosThetaSmoothing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.cos_theta_smoothing_);
      break;
    }
    // .autoagric.planning.FemPosDeviationSmootherConfig fem_pos_deviation_smoothing = 5;
    case kFemPosDeviationSmoothing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.fem_pos_deviation_smoothing_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiscretePointsSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiscretePointsSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiscretePointsSmootherConfig::GetClassData() const { return &_class_data_; }

void DiscretePointsSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiscretePointsSmootherConfig *>(to)->MergeFrom(
      static_cast<const DiscretePointsSmootherConfig &>(from));
}


void DiscretePointsSmootherConfig::MergeFrom(const DiscretePointsSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.DiscretePointsSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_smoothing_method() != 0) {
    _internal_set_smoothing_method(from._internal_smoothing_method());
  }
  switch (from.SmootherConfig_case()) {
    case kCosThetaSmoothing: {
      _internal_mutable_cos_theta_smoothing()->::autoagric::planning::CosThetaSmootherConfig::MergeFrom(from._internal_cos_theta_smoothing());
      break;
    }
    case kFemPosDeviationSmoothing: {
      _internal_mutable_fem_pos_deviation_smoothing()->::autoagric::planning::FemPosDeviationSmootherConfig::MergeFrom(from._internal_fem_pos_deviation_smoothing());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiscretePointsSmootherConfig::CopyFrom(const DiscretePointsSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.DiscretePointsSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscretePointsSmootherConfig::IsInitialized() const {
  return true;
}

void DiscretePointsSmootherConfig::InternalSwap(DiscretePointsSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(smoothing_method_, other->smoothing_method_);
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DiscretePointsSmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[2]);
}

// ===================================================================

class ReferenceLineSmootherConfig::_Internal {
 public:
  static const ::autoagric::planning::QpSplineSmootherConfig& qp_spline(const ReferenceLineSmootherConfig* msg);
  static const ::autoagric::planning::SpiralSmootherConfig& spiral(const ReferenceLineSmootherConfig* msg);
  static const ::autoagric::planning::DiscretePointsSmootherConfig& discrete_points(const ReferenceLineSmootherConfig* msg);
};

const ::autoagric::planning::QpSplineSmootherConfig&
ReferenceLineSmootherConfig::_Internal::qp_spline(const ReferenceLineSmootherConfig* msg) {
  return *msg->SmootherConfig_.qp_spline_;
}
const ::autoagric::planning::SpiralSmootherConfig&
ReferenceLineSmootherConfig::_Internal::spiral(const ReferenceLineSmootherConfig* msg) {
  return *msg->SmootherConfig_.spiral_;
}
const ::autoagric::planning::DiscretePointsSmootherConfig&
ReferenceLineSmootherConfig::_Internal::discrete_points(const ReferenceLineSmootherConfig* msg) {
  return *msg->SmootherConfig_.discrete_points_;
}
void ReferenceLineSmootherConfig::set_allocated_qp_spline(::autoagric::planning::QpSplineSmootherConfig* qp_spline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (qp_spline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::QpSplineSmootherConfig>::GetOwningArena(qp_spline);
    if (message_arena != submessage_arena) {
      qp_spline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_spline, submessage_arena);
    }
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.ReferenceLineSmootherConfig.qp_spline)
}
void ReferenceLineSmootherConfig::set_allocated_spiral(::autoagric::planning::SpiralSmootherConfig* spiral) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (spiral) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::SpiralSmootherConfig>::GetOwningArena(spiral);
    if (message_arena != submessage_arena) {
      spiral = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spiral, submessage_arena);
    }
    set_has_spiral();
    SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.ReferenceLineSmootherConfig.spiral)
}
void ReferenceLineSmootherConfig::set_allocated_discrete_points(::autoagric::planning::DiscretePointsSmootherConfig* discrete_points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (discrete_points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::DiscretePointsSmootherConfig>::GetOwningArena(discrete_points);
    if (message_arena != submessage_arena) {
      discrete_points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete_points, submessage_arena);
    }
    set_has_discrete_points();
    SmootherConfig_.discrete_points_ = discrete_points;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.ReferenceLineSmootherConfig.discrete_points)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.ReferenceLineSmootherConfig)
}
ReferenceLineSmootherConfig::ReferenceLineSmootherConfig(const ReferenceLineSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_constraint_interval_, &from.max_constraint_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_of_total_points_) -
    reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::autoagric::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::autoagric::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case kDiscretePoints: {
      _internal_mutable_discrete_points()->::autoagric::planning::DiscretePointsSmootherConfig::MergeFrom(from._internal_discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.ReferenceLineSmootherConfig)
}

inline void ReferenceLineSmootherConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_constraint_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_of_total_points_) -
    reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
clear_has_SmootherConfig();
}

ReferenceLineSmootherConfig::~ReferenceLineSmootherConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.ReferenceLineSmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ReferenceLineSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void ReferenceLineSmootherConfig::ArenaDtor(void* object) {
  ReferenceLineSmootherConfig* _this = reinterpret_cast< ReferenceLineSmootherConfig* >(object);
  (void)_this;
}
void ReferenceLineSmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReferenceLineSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReferenceLineSmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:autoagric.planning.ReferenceLineSmootherConfig)
  switch (SmootherConfig_case()) {
    case kQpSpline: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.qp_spline_;
      }
      break;
    }
    case kSpiral: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.spiral_;
      }
      break;
    }
    case kDiscretePoints: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.discrete_points_;
      }
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void ReferenceLineSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.ReferenceLineSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_constraint_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_total_points_) -
      reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
  clear_SmootherConfig();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double max_constraint_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          max_constraint_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitudinal_boundary_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          longitudinal_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_lateral_boundary_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          max_lateral_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_lateral_boundary_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          min_lateral_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_of_total_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          num_of_total_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double curb_shift = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          curb_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_buffer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          lateral_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double resolution = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.QpSplineSmootherConfig qp_spline = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_spline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.SpiralSmootherConfig spiral = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_spiral(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.DiscretePointsSmootherConfig discrete_points = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLineSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.ReferenceLineSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_constraint_interval = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_interval = this->_internal_max_constraint_interval();
  uint64_t raw_max_constraint_interval;
  memcpy(&raw_max_constraint_interval, &tmp_max_constraint_interval, sizeof(tmp_max_constraint_interval));
  if (raw_max_constraint_interval != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_constraint_interval(), target);
  }

  // double longitudinal_boundary_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitudinal_boundary_bound = this->_internal_longitudinal_boundary_bound();
  uint64_t raw_longitudinal_boundary_bound;
  memcpy(&raw_longitudinal_boundary_bound, &tmp_longitudinal_boundary_bound, sizeof(tmp_longitudinal_boundary_bound));
  if (raw_longitudinal_boundary_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitudinal_boundary_bound(), target);
  }

  // double max_lateral_boundary_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_boundary_bound = this->_internal_max_lateral_boundary_bound();
  uint64_t raw_max_lateral_boundary_bound;
  memcpy(&raw_max_lateral_boundary_bound, &tmp_max_lateral_boundary_bound, sizeof(tmp_max_lateral_boundary_bound));
  if (raw_max_lateral_boundary_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_lateral_boundary_bound(), target);
  }

  // double min_lateral_boundary_bound = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_lateral_boundary_bound = this->_internal_min_lateral_boundary_bound();
  uint64_t raw_min_lateral_boundary_bound;
  memcpy(&raw_min_lateral_boundary_bound, &tmp_min_lateral_boundary_bound, sizeof(tmp_min_lateral_boundary_bound));
  if (raw_min_lateral_boundary_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_lateral_boundary_bound(), target);
  }

  // uint32 num_of_total_points = 5;
  if (this->_internal_num_of_total_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_of_total_points(), target);
  }

  // double curb_shift = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curb_shift = this->_internal_curb_shift();
  uint64_t raw_curb_shift;
  memcpy(&raw_curb_shift, &tmp_curb_shift, sizeof(tmp_curb_shift));
  if (raw_curb_shift != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_curb_shift(), target);
  }

  // double lateral_buffer = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_buffer = this->_internal_lateral_buffer();
  uint64_t raw_lateral_buffer;
  memcpy(&raw_lateral_buffer, &tmp_lateral_buffer, sizeof(tmp_lateral_buffer));
  if (raw_lateral_buffer != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lateral_buffer(), target);
  }

  // double resolution = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_resolution(), target);
  }

  // .autoagric.planning.QpSplineSmootherConfig qp_spline = 20;
  if (_internal_has_qp_spline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::qp_spline(this), target, stream);
  }

  // .autoagric.planning.SpiralSmootherConfig spiral = 21;
  if (_internal_has_spiral()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::spiral(this), target, stream);
  }

  // .autoagric.planning.DiscretePointsSmootherConfig discrete_points = 22;
  if (_internal_has_discrete_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::discrete_points(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.ReferenceLineSmootherConfig)
  return target;
}

size_t ReferenceLineSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.ReferenceLineSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_constraint_interval = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_interval = this->_internal_max_constraint_interval();
  uint64_t raw_max_constraint_interval;
  memcpy(&raw_max_constraint_interval, &tmp_max_constraint_interval, sizeof(tmp_max_constraint_interval));
  if (raw_max_constraint_interval != 0) {
    total_size += 1 + 8;
  }

  // double longitudinal_boundary_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitudinal_boundary_bound = this->_internal_longitudinal_boundary_bound();
  uint64_t raw_longitudinal_boundary_bound;
  memcpy(&raw_longitudinal_boundary_bound, &tmp_longitudinal_boundary_bound, sizeof(tmp_longitudinal_boundary_bound));
  if (raw_longitudinal_boundary_bound != 0) {
    total_size += 1 + 8;
  }

  // double max_lateral_boundary_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_boundary_bound = this->_internal_max_lateral_boundary_bound();
  uint64_t raw_max_lateral_boundary_bound;
  memcpy(&raw_max_lateral_boundary_bound, &tmp_max_lateral_boundary_bound, sizeof(tmp_max_lateral_boundary_bound));
  if (raw_max_lateral_boundary_bound != 0) {
    total_size += 1 + 8;
  }

  // double min_lateral_boundary_bound = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_lateral_boundary_bound = this->_internal_min_lateral_boundary_bound();
  uint64_t raw_min_lateral_boundary_bound;
  memcpy(&raw_min_lateral_boundary_bound, &tmp_min_lateral_boundary_bound, sizeof(tmp_min_lateral_boundary_bound));
  if (raw_min_lateral_boundary_bound != 0) {
    total_size += 1 + 8;
  }

  // double curb_shift = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curb_shift = this->_internal_curb_shift();
  uint64_t raw_curb_shift;
  memcpy(&raw_curb_shift, &tmp_curb_shift, sizeof(tmp_curb_shift));
  if (raw_curb_shift != 0) {
    total_size += 1 + 8;
  }

  // double lateral_buffer = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_buffer = this->_internal_lateral_buffer();
  uint64_t raw_lateral_buffer;
  memcpy(&raw_lateral_buffer, &tmp_lateral_buffer, sizeof(tmp_lateral_buffer));
  if (raw_lateral_buffer != 0) {
    total_size += 1 + 8;
  }

  // double resolution = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 8;
  }

  // uint32 num_of_total_points = 5;
  if (this->_internal_num_of_total_points() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_of_total_points());
  }

  switch (SmootherConfig_case()) {
    // .autoagric.planning.QpSplineSmootherConfig qp_spline = 20;
    case kQpSpline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.qp_spline_);
      break;
    }
    // .autoagric.planning.SpiralSmootherConfig spiral = 21;
    case kSpiral: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.spiral_);
      break;
    }
    // .autoagric.planning.DiscretePointsSmootherConfig discrete_points = 22;
    case kDiscretePoints: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.discrete_points_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ReferenceLineSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineSmootherConfig::GetClassData() const { return &_class_data_; }

void ReferenceLineSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ReferenceLineSmootherConfig *>(to)->MergeFrom(
      static_cast<const ReferenceLineSmootherConfig &>(from));
}


void ReferenceLineSmootherConfig::MergeFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.ReferenceLineSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_interval = from._internal_max_constraint_interval();
  uint64_t raw_max_constraint_interval;
  memcpy(&raw_max_constraint_interval, &tmp_max_constraint_interval, sizeof(tmp_max_constraint_interval));
  if (raw_max_constraint_interval != 0) {
    _internal_set_max_constraint_interval(from._internal_max_constraint_interval());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitudinal_boundary_bound = from._internal_longitudinal_boundary_bound();
  uint64_t raw_longitudinal_boundary_bound;
  memcpy(&raw_longitudinal_boundary_bound, &tmp_longitudinal_boundary_bound, sizeof(tmp_longitudinal_boundary_bound));
  if (raw_longitudinal_boundary_bound != 0) {
    _internal_set_longitudinal_boundary_bound(from._internal_longitudinal_boundary_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_boundary_bound = from._internal_max_lateral_boundary_bound();
  uint64_t raw_max_lateral_boundary_bound;
  memcpy(&raw_max_lateral_boundary_bound, &tmp_max_lateral_boundary_bound, sizeof(tmp_max_lateral_boundary_bound));
  if (raw_max_lateral_boundary_bound != 0) {
    _internal_set_max_lateral_boundary_bound(from._internal_max_lateral_boundary_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_lateral_boundary_bound = from._internal_min_lateral_boundary_bound();
  uint64_t raw_min_lateral_boundary_bound;
  memcpy(&raw_min_lateral_boundary_bound, &tmp_min_lateral_boundary_bound, sizeof(tmp_min_lateral_boundary_bound));
  if (raw_min_lateral_boundary_bound != 0) {
    _internal_set_min_lateral_boundary_bound(from._internal_min_lateral_boundary_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curb_shift = from._internal_curb_shift();
  uint64_t raw_curb_shift;
  memcpy(&raw_curb_shift, &tmp_curb_shift, sizeof(tmp_curb_shift));
  if (raw_curb_shift != 0) {
    _internal_set_curb_shift(from._internal_curb_shift());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_buffer = from._internal_lateral_buffer();
  uint64_t raw_lateral_buffer;
  memcpy(&raw_lateral_buffer, &tmp_lateral_buffer, sizeof(tmp_lateral_buffer));
  if (raw_lateral_buffer != 0) {
    _internal_set_lateral_buffer(from._internal_lateral_buffer());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = from._internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _internal_set_resolution(from._internal_resolution());
  }
  if (from._internal_num_of_total_points() != 0) {
    _internal_set_num_of_total_points(from._internal_num_of_total_points());
  }
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::autoagric::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::autoagric::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case kDiscretePoints: {
      _internal_mutable_discrete_points()->::autoagric::planning::DiscretePointsSmootherConfig::MergeFrom(from._internal_discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineSmootherConfig::CopyFrom(const ReferenceLineSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.ReferenceLineSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineSmootherConfig::IsInitialized() const {
  return true;
}

void ReferenceLineSmootherConfig::InternalSwap(ReferenceLineSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineSmootherConfig, num_of_total_points_)
      + sizeof(ReferenceLineSmootherConfig::num_of_total_points_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineSmootherConfig, max_constraint_interval_)>(
          reinterpret_cast<char*>(&max_constraint_interval_),
          reinterpret_cast<char*>(&other->max_constraint_interval_));
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineSmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[3]);
}

// ===================================================================

class TrajectorySmootherConfig::_Internal {
 public:
  static const ::autoagric::planning::QpSplineSmootherConfig& qp_spline(const TrajectorySmootherConfig* msg);
  static const ::autoagric::planning::SpiralSmootherConfig& spiral(const TrajectorySmootherConfig* msg);
  static const ::autoagric::planning::DiscretePointsSmootherConfig& discrete_points(const TrajectorySmootherConfig* msg);
};

const ::autoagric::planning::QpSplineSmootherConfig&
TrajectorySmootherConfig::_Internal::qp_spline(const TrajectorySmootherConfig* msg) {
  return *msg->SmootherConfig_.qp_spline_;
}
const ::autoagric::planning::SpiralSmootherConfig&
TrajectorySmootherConfig::_Internal::spiral(const TrajectorySmootherConfig* msg) {
  return *msg->SmootherConfig_.spiral_;
}
const ::autoagric::planning::DiscretePointsSmootherConfig&
TrajectorySmootherConfig::_Internal::discrete_points(const TrajectorySmootherConfig* msg) {
  return *msg->SmootherConfig_.discrete_points_;
}
void TrajectorySmootherConfig::set_allocated_qp_spline(::autoagric::planning::QpSplineSmootherConfig* qp_spline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (qp_spline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::QpSplineSmootherConfig>::GetOwningArena(qp_spline);
    if (message_arena != submessage_arena) {
      qp_spline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qp_spline, submessage_arena);
    }
    set_has_qp_spline();
    SmootherConfig_.qp_spline_ = qp_spline;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.TrajectorySmootherConfig.qp_spline)
}
void TrajectorySmootherConfig::set_allocated_spiral(::autoagric::planning::SpiralSmootherConfig* spiral) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (spiral) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::SpiralSmootherConfig>::GetOwningArena(spiral);
    if (message_arena != submessage_arena) {
      spiral = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spiral, submessage_arena);
    }
    set_has_spiral();
    SmootherConfig_.spiral_ = spiral;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.TrajectorySmootherConfig.spiral)
}
void TrajectorySmootherConfig::set_allocated_discrete_points(::autoagric::planning::DiscretePointsSmootherConfig* discrete_points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_SmootherConfig();
  if (discrete_points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::DiscretePointsSmootherConfig>::GetOwningArena(discrete_points);
    if (message_arena != submessage_arena) {
      discrete_points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discrete_points, submessage_arena);
    }
    set_has_discrete_points();
    SmootherConfig_.discrete_points_ = discrete_points;
  }
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.TrajectorySmootherConfig.discrete_points)
}
TrajectorySmootherConfig::TrajectorySmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.TrajectorySmootherConfig)
}
TrajectorySmootherConfig::TrajectorySmootherConfig(const TrajectorySmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_constraint_interval_, &from.max_constraint_interval_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_of_total_points_) -
    reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
  clear_has_SmootherConfig();
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::autoagric::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::autoagric::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case kDiscretePoints: {
      _internal_mutable_discrete_points()->::autoagric::planning::DiscretePointsSmootherConfig::MergeFrom(from._internal_discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.TrajectorySmootherConfig)
}

inline void TrajectorySmootherConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_constraint_interval_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_of_total_points_) -
    reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
clear_has_SmootherConfig();
}

TrajectorySmootherConfig::~TrajectorySmootherConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.TrajectorySmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrajectorySmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_SmootherConfig()) {
    clear_SmootherConfig();
  }
}

void TrajectorySmootherConfig::ArenaDtor(void* object) {
  TrajectorySmootherConfig* _this = reinterpret_cast< TrajectorySmootherConfig* >(object);
  (void)_this;
}
void TrajectorySmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectorySmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrajectorySmootherConfig::clear_SmootherConfig() {
// @@protoc_insertion_point(one_of_clear_start:autoagric.planning.TrajectorySmootherConfig)
  switch (SmootherConfig_case()) {
    case kQpSpline: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.qp_spline_;
      }
      break;
    }
    case kSpiral: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.spiral_;
      }
      break;
    }
    case kDiscretePoints: {
      if (GetArenaForAllocation() == nullptr) {
        delete SmootherConfig_.discrete_points_;
      }
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SMOOTHERCONFIG_NOT_SET;
}


void TrajectorySmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.TrajectorySmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_constraint_interval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_total_points_) -
      reinterpret_cast<char*>(&max_constraint_interval_)) + sizeof(num_of_total_points_));
  clear_SmootherConfig();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectorySmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double max_constraint_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          max_constraint_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitudinal_boundary_bound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          longitudinal_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_lateral_boundary_bound = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          max_lateral_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_lateral_boundary_bound = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          min_lateral_boundary_bound_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 num_of_total_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          num_of_total_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double curb_shift = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          curb_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lateral_buffer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          lateral_buffer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double resolution = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.QpSplineSmootherConfig qp_spline = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_qp_spline(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.SpiralSmootherConfig spiral = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_spiral(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.DiscretePointsSmootherConfig discrete_points = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_discrete_points(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrajectorySmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.TrajectorySmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_constraint_interval = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_interval = this->_internal_max_constraint_interval();
  uint64_t raw_max_constraint_interval;
  memcpy(&raw_max_constraint_interval, &tmp_max_constraint_interval, sizeof(tmp_max_constraint_interval));
  if (raw_max_constraint_interval != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_constraint_interval(), target);
  }

  // double longitudinal_boundary_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitudinal_boundary_bound = this->_internal_longitudinal_boundary_bound();
  uint64_t raw_longitudinal_boundary_bound;
  memcpy(&raw_longitudinal_boundary_bound, &tmp_longitudinal_boundary_bound, sizeof(tmp_longitudinal_boundary_bound));
  if (raw_longitudinal_boundary_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitudinal_boundary_bound(), target);
  }

  // double max_lateral_boundary_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_boundary_bound = this->_internal_max_lateral_boundary_bound();
  uint64_t raw_max_lateral_boundary_bound;
  memcpy(&raw_max_lateral_boundary_bound, &tmp_max_lateral_boundary_bound, sizeof(tmp_max_lateral_boundary_bound));
  if (raw_max_lateral_boundary_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_lateral_boundary_bound(), target);
  }

  // double min_lateral_boundary_bound = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_lateral_boundary_bound = this->_internal_min_lateral_boundary_bound();
  uint64_t raw_min_lateral_boundary_bound;
  memcpy(&raw_min_lateral_boundary_bound, &tmp_min_lateral_boundary_bound, sizeof(tmp_min_lateral_boundary_bound));
  if (raw_min_lateral_boundary_bound != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_min_lateral_boundary_bound(), target);
  }

  // uint32 num_of_total_points = 5;
  if (this->_internal_num_of_total_points() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_of_total_points(), target);
  }

  // double curb_shift = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curb_shift = this->_internal_curb_shift();
  uint64_t raw_curb_shift;
  memcpy(&raw_curb_shift, &tmp_curb_shift, sizeof(tmp_curb_shift));
  if (raw_curb_shift != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_curb_shift(), target);
  }

  // double lateral_buffer = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_buffer = this->_internal_lateral_buffer();
  uint64_t raw_lateral_buffer;
  memcpy(&raw_lateral_buffer, &tmp_lateral_buffer, sizeof(tmp_lateral_buffer));
  if (raw_lateral_buffer != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lateral_buffer(), target);
  }

  // double resolution = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_resolution(), target);
  }

  // .autoagric.planning.QpSplineSmootherConfig qp_spline = 20;
  if (_internal_has_qp_spline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::qp_spline(this), target, stream);
  }

  // .autoagric.planning.SpiralSmootherConfig spiral = 21;
  if (_internal_has_spiral()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::spiral(this), target, stream);
  }

  // .autoagric.planning.DiscretePointsSmootherConfig discrete_points = 22;
  if (_internal_has_discrete_points()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::discrete_points(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.TrajectorySmootherConfig)
  return target;
}

size_t TrajectorySmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.TrajectorySmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_constraint_interval = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_interval = this->_internal_max_constraint_interval();
  uint64_t raw_max_constraint_interval;
  memcpy(&raw_max_constraint_interval, &tmp_max_constraint_interval, sizeof(tmp_max_constraint_interval));
  if (raw_max_constraint_interval != 0) {
    total_size += 1 + 8;
  }

  // double longitudinal_boundary_bound = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitudinal_boundary_bound = this->_internal_longitudinal_boundary_bound();
  uint64_t raw_longitudinal_boundary_bound;
  memcpy(&raw_longitudinal_boundary_bound, &tmp_longitudinal_boundary_bound, sizeof(tmp_longitudinal_boundary_bound));
  if (raw_longitudinal_boundary_bound != 0) {
    total_size += 1 + 8;
  }

  // double max_lateral_boundary_bound = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_boundary_bound = this->_internal_max_lateral_boundary_bound();
  uint64_t raw_max_lateral_boundary_bound;
  memcpy(&raw_max_lateral_boundary_bound, &tmp_max_lateral_boundary_bound, sizeof(tmp_max_lateral_boundary_bound));
  if (raw_max_lateral_boundary_bound != 0) {
    total_size += 1 + 8;
  }

  // double min_lateral_boundary_bound = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_lateral_boundary_bound = this->_internal_min_lateral_boundary_bound();
  uint64_t raw_min_lateral_boundary_bound;
  memcpy(&raw_min_lateral_boundary_bound, &tmp_min_lateral_boundary_bound, sizeof(tmp_min_lateral_boundary_bound));
  if (raw_min_lateral_boundary_bound != 0) {
    total_size += 1 + 8;
  }

  // double curb_shift = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curb_shift = this->_internal_curb_shift();
  uint64_t raw_curb_shift;
  memcpy(&raw_curb_shift, &tmp_curb_shift, sizeof(tmp_curb_shift));
  if (raw_curb_shift != 0) {
    total_size += 1 + 8;
  }

  // double lateral_buffer = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_buffer = this->_internal_lateral_buffer();
  uint64_t raw_lateral_buffer;
  memcpy(&raw_lateral_buffer, &tmp_lateral_buffer, sizeof(tmp_lateral_buffer));
  if (raw_lateral_buffer != 0) {
    total_size += 1 + 8;
  }

  // double resolution = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 8;
  }

  // uint32 num_of_total_points = 5;
  if (this->_internal_num_of_total_points() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_num_of_total_points());
  }

  switch (SmootherConfig_case()) {
    // .autoagric.planning.QpSplineSmootherConfig qp_spline = 20;
    case kQpSpline: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.qp_spline_);
      break;
    }
    // .autoagric.planning.SpiralSmootherConfig spiral = 21;
    case kSpiral: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.spiral_);
      break;
    }
    // .autoagric.planning.DiscretePointsSmootherConfig discrete_points = 22;
    case kDiscretePoints: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *SmootherConfig_.discrete_points_);
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectorySmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectorySmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectorySmootherConfig::GetClassData() const { return &_class_data_; }

void TrajectorySmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrajectorySmootherConfig *>(to)->MergeFrom(
      static_cast<const TrajectorySmootherConfig &>(from));
}


void TrajectorySmootherConfig::MergeFrom(const TrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.TrajectorySmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_constraint_interval = from._internal_max_constraint_interval();
  uint64_t raw_max_constraint_interval;
  memcpy(&raw_max_constraint_interval, &tmp_max_constraint_interval, sizeof(tmp_max_constraint_interval));
  if (raw_max_constraint_interval != 0) {
    _internal_set_max_constraint_interval(from._internal_max_constraint_interval());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitudinal_boundary_bound = from._internal_longitudinal_boundary_bound();
  uint64_t raw_longitudinal_boundary_bound;
  memcpy(&raw_longitudinal_boundary_bound, &tmp_longitudinal_boundary_bound, sizeof(tmp_longitudinal_boundary_bound));
  if (raw_longitudinal_boundary_bound != 0) {
    _internal_set_longitudinal_boundary_bound(from._internal_longitudinal_boundary_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_lateral_boundary_bound = from._internal_max_lateral_boundary_bound();
  uint64_t raw_max_lateral_boundary_bound;
  memcpy(&raw_max_lateral_boundary_bound, &tmp_max_lateral_boundary_bound, sizeof(tmp_max_lateral_boundary_bound));
  if (raw_max_lateral_boundary_bound != 0) {
    _internal_set_max_lateral_boundary_bound(from._internal_max_lateral_boundary_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_lateral_boundary_bound = from._internal_min_lateral_boundary_bound();
  uint64_t raw_min_lateral_boundary_bound;
  memcpy(&raw_min_lateral_boundary_bound, &tmp_min_lateral_boundary_bound, sizeof(tmp_min_lateral_boundary_bound));
  if (raw_min_lateral_boundary_bound != 0) {
    _internal_set_min_lateral_boundary_bound(from._internal_min_lateral_boundary_bound());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curb_shift = from._internal_curb_shift();
  uint64_t raw_curb_shift;
  memcpy(&raw_curb_shift, &tmp_curb_shift, sizeof(tmp_curb_shift));
  if (raw_curb_shift != 0) {
    _internal_set_curb_shift(from._internal_curb_shift());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lateral_buffer = from._internal_lateral_buffer();
  uint64_t raw_lateral_buffer;
  memcpy(&raw_lateral_buffer, &tmp_lateral_buffer, sizeof(tmp_lateral_buffer));
  if (raw_lateral_buffer != 0) {
    _internal_set_lateral_buffer(from._internal_lateral_buffer());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = from._internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _internal_set_resolution(from._internal_resolution());
  }
  if (from._internal_num_of_total_points() != 0) {
    _internal_set_num_of_total_points(from._internal_num_of_total_points());
  }
  switch (from.SmootherConfig_case()) {
    case kQpSpline: {
      _internal_mutable_qp_spline()->::autoagric::planning::QpSplineSmootherConfig::MergeFrom(from._internal_qp_spline());
      break;
    }
    case kSpiral: {
      _internal_mutable_spiral()->::autoagric::planning::SpiralSmootherConfig::MergeFrom(from._internal_spiral());
      break;
    }
    case kDiscretePoints: {
      _internal_mutable_discrete_points()->::autoagric::planning::DiscretePointsSmootherConfig::MergeFrom(from._internal_discrete_points());
      break;
    }
    case SMOOTHERCONFIG_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectorySmootherConfig::CopyFrom(const TrajectorySmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.TrajectorySmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectorySmootherConfig::IsInitialized() const {
  return true;
}

void TrajectorySmootherConfig::InternalSwap(TrajectorySmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectorySmootherConfig, num_of_total_points_)
      + sizeof(TrajectorySmootherConfig::num_of_total_points_)
      - PROTOBUF_FIELD_OFFSET(TrajectorySmootherConfig, max_constraint_interval_)>(
          reinterpret_cast<char*>(&max_constraint_interval_),
          reinterpret_cast<char*>(&other->max_constraint_interval_));
  swap(SmootherConfig_, other->SmootherConfig_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectorySmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2freference_5fline_5fsmoother_5fconfig_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::planning::QpSplineSmootherConfig* Arena::CreateMaybeMessage< ::autoagric::planning::QpSplineSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::QpSplineSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::planning::SpiralSmootherConfig* Arena::CreateMaybeMessage< ::autoagric::planning::SpiralSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::SpiralSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::planning::DiscretePointsSmootherConfig* Arena::CreateMaybeMessage< ::autoagric::planning::DiscretePointsSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::DiscretePointsSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::planning::ReferenceLineSmootherConfig* Arena::CreateMaybeMessage< ::autoagric::planning::ReferenceLineSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::ReferenceLineSmootherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::planning::TrajectorySmootherConfig* Arena::CreateMaybeMessage< ::autoagric::planning::TrajectorySmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::TrajectorySmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
