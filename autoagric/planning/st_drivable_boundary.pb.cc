// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/st_drivable_boundary.proto

#include "autoagric/planning/st_drivable_boundary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace planning {
constexpr STDrivableBoundaryInstance::STDrivableBoundaryInstance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : t_(0)
  , s_lower_(0)
  , s_upper_(0)
  , v_obs_lower_(0)
  , v_obs_upper_(0){}
struct STDrivableBoundaryInstanceDefaultTypeInternal {
  constexpr STDrivableBoundaryInstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~STDrivableBoundaryInstanceDefaultTypeInternal() {}
  union {
    STDrivableBoundaryInstance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT STDrivableBoundaryInstanceDefaultTypeInternal _STDrivableBoundaryInstance_default_instance_;
constexpr STDrivableBoundary::STDrivableBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : st_boundary_(){}
struct STDrivableBoundaryDefaultTypeInternal {
  constexpr STDrivableBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~STDrivableBoundaryDefaultTypeInternal() {}
  union {
    STDrivableBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT STDrivableBoundaryDefaultTypeInternal _STDrivableBoundary_default_instance_;
}  // namespace planning
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundaryInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundaryInstance, t_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundaryInstance, s_lower_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundaryInstance, s_upper_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundaryInstance, v_obs_lower_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundaryInstance, v_obs_upper_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::STDrivableBoundary, st_boundary_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::planning::STDrivableBoundaryInstance)},
  { 11, -1, -1, sizeof(::autoagric::planning::STDrivableBoundary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_STDrivableBoundaryInstance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_STDrivableBoundary_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-autoagric/planning/st_drivable_boundar"
  "y.proto\022\022autoagric.planning\"s\n\032STDrivabl"
  "eBoundaryInstance\022\t\n\001t\030\001 \001(\001\022\017\n\007s_lower\030"
  "\002 \001(\001\022\017\n\007s_upper\030\003 \001(\001\022\023\n\013v_obs_lower\030\004 "
  "\001(\001\022\023\n\013v_obs_upper\030\005 \001(\001\"Y\n\022STDrivableBo"
  "undary\022C\n\013st_boundary\030\001 \003(\0132..autoagric."
  "planning.STDrivableBoundaryInstanceb\006pro"
  "to3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto = {
  false, false, 283, descriptor_table_protodef_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto, "autoagric/planning/st_drivable_boundary.proto", 
  &descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto::offsets,
  file_level_metadata_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto, file_level_enum_descriptors_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto, file_level_service_descriptors_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto_getter() {
  return &descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto(&descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto);
namespace autoagric {
namespace planning {

// ===================================================================

class STDrivableBoundaryInstance::_Internal {
 public:
};

STDrivableBoundaryInstance::STDrivableBoundaryInstance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.STDrivableBoundaryInstance)
}
STDrivableBoundaryInstance::STDrivableBoundaryInstance(const STDrivableBoundaryInstance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_obs_upper_) -
    reinterpret_cast<char*>(&t_)) + sizeof(v_obs_upper_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.STDrivableBoundaryInstance)
}

inline void STDrivableBoundaryInstance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&v_obs_upper_) -
    reinterpret_cast<char*>(&t_)) + sizeof(v_obs_upper_));
}

STDrivableBoundaryInstance::~STDrivableBoundaryInstance() {
  // @@protoc_insertion_point(destructor:autoagric.planning.STDrivableBoundaryInstance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void STDrivableBoundaryInstance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STDrivableBoundaryInstance::ArenaDtor(void* object) {
  STDrivableBoundaryInstance* _this = reinterpret_cast< STDrivableBoundaryInstance* >(object);
  (void)_this;
}
void STDrivableBoundaryInstance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STDrivableBoundaryInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STDrivableBoundaryInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.STDrivableBoundaryInstance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_obs_upper_) -
      reinterpret_cast<char*>(&t_)) + sizeof(v_obs_upper_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STDrivableBoundaryInstance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double s_lower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          s_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double s_upper = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          s_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double v_obs_lower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          v_obs_lower_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double v_obs_upper = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          v_obs_upper_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STDrivableBoundaryInstance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.STDrivableBoundaryInstance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t = this->_internal_t();
  uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(), target);
  }

  // double s_lower = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s_lower = this->_internal_s_lower();
  uint64_t raw_s_lower;
  memcpy(&raw_s_lower, &tmp_s_lower, sizeof(tmp_s_lower));
  if (raw_s_lower != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_s_lower(), target);
  }

  // double s_upper = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s_upper = this->_internal_s_upper();
  uint64_t raw_s_upper;
  memcpy(&raw_s_upper, &tmp_s_upper, sizeof(tmp_s_upper));
  if (raw_s_upper != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_s_upper(), target);
  }

  // double v_obs_lower = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v_obs_lower = this->_internal_v_obs_lower();
  uint64_t raw_v_obs_lower;
  memcpy(&raw_v_obs_lower, &tmp_v_obs_lower, sizeof(tmp_v_obs_lower));
  if (raw_v_obs_lower != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_v_obs_lower(), target);
  }

  // double v_obs_upper = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v_obs_upper = this->_internal_v_obs_upper();
  uint64_t raw_v_obs_upper;
  memcpy(&raw_v_obs_upper, &tmp_v_obs_upper, sizeof(tmp_v_obs_upper));
  if (raw_v_obs_upper != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_v_obs_upper(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.STDrivableBoundaryInstance)
  return target;
}

size_t STDrivableBoundaryInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.STDrivableBoundaryInstance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double t = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t = this->_internal_t();
  uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    total_size += 1 + 8;
  }

  // double s_lower = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s_lower = this->_internal_s_lower();
  uint64_t raw_s_lower;
  memcpy(&raw_s_lower, &tmp_s_lower, sizeof(tmp_s_lower));
  if (raw_s_lower != 0) {
    total_size += 1 + 8;
  }

  // double s_upper = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s_upper = this->_internal_s_upper();
  uint64_t raw_s_upper;
  memcpy(&raw_s_upper, &tmp_s_upper, sizeof(tmp_s_upper));
  if (raw_s_upper != 0) {
    total_size += 1 + 8;
  }

  // double v_obs_lower = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v_obs_lower = this->_internal_v_obs_lower();
  uint64_t raw_v_obs_lower;
  memcpy(&raw_v_obs_lower, &tmp_v_obs_lower, sizeof(tmp_v_obs_lower));
  if (raw_v_obs_lower != 0) {
    total_size += 1 + 8;
  }

  // double v_obs_upper = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v_obs_upper = this->_internal_v_obs_upper();
  uint64_t raw_v_obs_upper;
  memcpy(&raw_v_obs_upper, &tmp_v_obs_upper, sizeof(tmp_v_obs_upper));
  if (raw_v_obs_upper != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STDrivableBoundaryInstance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STDrivableBoundaryInstance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STDrivableBoundaryInstance::GetClassData() const { return &_class_data_; }

void STDrivableBoundaryInstance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STDrivableBoundaryInstance *>(to)->MergeFrom(
      static_cast<const STDrivableBoundaryInstance &>(from));
}


void STDrivableBoundaryInstance::MergeFrom(const STDrivableBoundaryInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.STDrivableBoundaryInstance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_t = from._internal_t();
  uint64_t raw_t;
  memcpy(&raw_t, &tmp_t, sizeof(tmp_t));
  if (raw_t != 0) {
    _internal_set_t(from._internal_t());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s_lower = from._internal_s_lower();
  uint64_t raw_s_lower;
  memcpy(&raw_s_lower, &tmp_s_lower, sizeof(tmp_s_lower));
  if (raw_s_lower != 0) {
    _internal_set_s_lower(from._internal_s_lower());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_s_upper = from._internal_s_upper();
  uint64_t raw_s_upper;
  memcpy(&raw_s_upper, &tmp_s_upper, sizeof(tmp_s_upper));
  if (raw_s_upper != 0) {
    _internal_set_s_upper(from._internal_s_upper());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v_obs_lower = from._internal_v_obs_lower();
  uint64_t raw_v_obs_lower;
  memcpy(&raw_v_obs_lower, &tmp_v_obs_lower, sizeof(tmp_v_obs_lower));
  if (raw_v_obs_lower != 0) {
    _internal_set_v_obs_lower(from._internal_v_obs_lower());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_v_obs_upper = from._internal_v_obs_upper();
  uint64_t raw_v_obs_upper;
  memcpy(&raw_v_obs_upper, &tmp_v_obs_upper, sizeof(tmp_v_obs_upper));
  if (raw_v_obs_upper != 0) {
    _internal_set_v_obs_upper(from._internal_v_obs_upper());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STDrivableBoundaryInstance::CopyFrom(const STDrivableBoundaryInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.STDrivableBoundaryInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STDrivableBoundaryInstance::IsInitialized() const {
  return true;
}

void STDrivableBoundaryInstance::InternalSwap(STDrivableBoundaryInstance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(STDrivableBoundaryInstance, v_obs_upper_)
      + sizeof(STDrivableBoundaryInstance::v_obs_upper_)
      - PROTOBUF_FIELD_OFFSET(STDrivableBoundaryInstance, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata STDrivableBoundaryInstance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto[0]);
}

// ===================================================================

class STDrivableBoundary::_Internal {
 public:
};

STDrivableBoundary::STDrivableBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  st_boundary_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.STDrivableBoundary)
}
STDrivableBoundary::STDrivableBoundary(const STDrivableBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      st_boundary_(from.st_boundary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.STDrivableBoundary)
}

inline void STDrivableBoundary::SharedCtor() {
}

STDrivableBoundary::~STDrivableBoundary() {
  // @@protoc_insertion_point(destructor:autoagric.planning.STDrivableBoundary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void STDrivableBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void STDrivableBoundary::ArenaDtor(void* object) {
  STDrivableBoundary* _this = reinterpret_cast< STDrivableBoundary* >(object);
  (void)_this;
}
void STDrivableBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void STDrivableBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void STDrivableBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.STDrivableBoundary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  st_boundary_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* STDrivableBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .autoagric.planning.STDrivableBoundaryInstance st_boundary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_st_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* STDrivableBoundary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.STDrivableBoundary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autoagric.planning.STDrivableBoundaryInstance st_boundary = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_st_boundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_st_boundary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.STDrivableBoundary)
  return target;
}

size_t STDrivableBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.STDrivableBoundary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.planning.STDrivableBoundaryInstance st_boundary = 1;
  total_size += 1UL * this->_internal_st_boundary_size();
  for (const auto& msg : this->st_boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData STDrivableBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    STDrivableBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*STDrivableBoundary::GetClassData() const { return &_class_data_; }

void STDrivableBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<STDrivableBoundary *>(to)->MergeFrom(
      static_cast<const STDrivableBoundary &>(from));
}


void STDrivableBoundary::MergeFrom(const STDrivableBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.STDrivableBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  st_boundary_.MergeFrom(from.st_boundary_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void STDrivableBoundary::CopyFrom(const STDrivableBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.STDrivableBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STDrivableBoundary::IsInitialized() const {
  return true;
}

void STDrivableBoundary::InternalSwap(STDrivableBoundary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  st_boundary_.InternalSwap(&other->st_boundary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata STDrivableBoundary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fst_5fdrivable_5fboundary_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::planning::STDrivableBoundaryInstance* Arena::CreateMaybeMessage< ::autoagric::planning::STDrivableBoundaryInstance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::STDrivableBoundaryInstance >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::planning::STDrivableBoundary* Arena::CreateMaybeMessage< ::autoagric::planning::STDrivableBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::STDrivableBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
