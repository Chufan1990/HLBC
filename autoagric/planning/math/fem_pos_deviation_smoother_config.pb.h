// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/math/fem_pos_deviation_smoother_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto;
namespace autoagric {
namespace planning {
class FemPosDeviationSmootherConfig;
struct FemPosDeviationSmootherConfigDefaultTypeInternal;
extern FemPosDeviationSmootherConfigDefaultTypeInternal _FemPosDeviationSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::planning::FemPosDeviationSmootherConfig* Arena::CreateMaybeMessage<::autoagric::planning::FemPosDeviationSmootherConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace planning {

// ===================================================================

class FemPosDeviationSmootherConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.FemPosDeviationSmootherConfig) */ {
 public:
  inline FemPosDeviationSmootherConfig() : FemPosDeviationSmootherConfig(nullptr) {}
  ~FemPosDeviationSmootherConfig() override;
  explicit constexpr FemPosDeviationSmootherConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FemPosDeviationSmootherConfig(const FemPosDeviationSmootherConfig& from);
  FemPosDeviationSmootherConfig(FemPosDeviationSmootherConfig&& from) noexcept
    : FemPosDeviationSmootherConfig() {
    *this = ::std::move(from);
  }

  inline FemPosDeviationSmootherConfig& operator=(const FemPosDeviationSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline FemPosDeviationSmootherConfig& operator=(FemPosDeviationSmootherConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FemPosDeviationSmootherConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const FemPosDeviationSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const FemPosDeviationSmootherConfig*>(
               &_FemPosDeviationSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FemPosDeviationSmootherConfig& a, FemPosDeviationSmootherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(FemPosDeviationSmootherConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FemPosDeviationSmootherConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FemPosDeviationSmootherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FemPosDeviationSmootherConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FemPosDeviationSmootherConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FemPosDeviationSmootherConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FemPosDeviationSmootherConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.FemPosDeviationSmootherConfig";
  }
  protected:
  explicit FemPosDeviationSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFemPosDeviationFieldNumber = 2,
    kWeightRefDeviationFieldNumber = 3,
    kWeightPathLengthFieldNumber = 4,
    kWeightCurvatureConstraintSlackVarFieldNumber = 6,
    kCurvatureConstraintFieldNumber = 7,
    kSqpFtolFieldNumber = 9,
    kSqpCtolFieldNumber = 10,
    kSqpPenMaxIterFieldNumber = 11,
    kSqpSubMaxIterFieldNumber = 12,
    kApplyCurvatureConstraintFieldNumber = 5,
    kUseSqpFieldNumber = 8,
    kVerboseFieldNumber = 102,
    kScaledTerminationFieldNumber = 103,
    kMaxIterFieldNumber = 100,
    kTimeLimitFieldNumber = 101,
    kWarmStartFieldNumber = 104,
    kPrintLevelFieldNumber = 200,
    kMaxNumOfIterationsFieldNumber = 201,
    kAcceptableNumOfIterationsFieldNumber = 202,
    kTolFieldNumber = 203,
    kAcceptableTolFieldNumber = 204,
  };
  // double weight_fem_pos_deviation = 2;
  void clear_weight_fem_pos_deviation();
  double weight_fem_pos_deviation() const;
  void set_weight_fem_pos_deviation(double value);
  private:
  double _internal_weight_fem_pos_deviation() const;
  void _internal_set_weight_fem_pos_deviation(double value);
  public:

  // double weight_ref_deviation = 3;
  void clear_weight_ref_deviation();
  double weight_ref_deviation() const;
  void set_weight_ref_deviation(double value);
  private:
  double _internal_weight_ref_deviation() const;
  void _internal_set_weight_ref_deviation(double value);
  public:

  // double weight_path_length = 4;
  void clear_weight_path_length();
  double weight_path_length() const;
  void set_weight_path_length(double value);
  private:
  double _internal_weight_path_length() const;
  void _internal_set_weight_path_length(double value);
  public:

  // double weight_curvature_constraint_slack_var = 6;
  void clear_weight_curvature_constraint_slack_var();
  double weight_curvature_constraint_slack_var() const;
  void set_weight_curvature_constraint_slack_var(double value);
  private:
  double _internal_weight_curvature_constraint_slack_var() const;
  void _internal_set_weight_curvature_constraint_slack_var(double value);
  public:

  // double curvature_constraint = 7;
  void clear_curvature_constraint();
  double curvature_constraint() const;
  void set_curvature_constraint(double value);
  private:
  double _internal_curvature_constraint() const;
  void _internal_set_curvature_constraint(double value);
  public:

  // double sqp_ftol = 9;
  void clear_sqp_ftol();
  double sqp_ftol() const;
  void set_sqp_ftol(double value);
  private:
  double _internal_sqp_ftol() const;
  void _internal_set_sqp_ftol(double value);
  public:

  // double sqp_ctol = 10;
  void clear_sqp_ctol();
  double sqp_ctol() const;
  void set_sqp_ctol(double value);
  private:
  double _internal_sqp_ctol() const;
  void _internal_set_sqp_ctol(double value);
  public:

  // int32 sqp_pen_max_iter = 11;
  void clear_sqp_pen_max_iter();
  int32_t sqp_pen_max_iter() const;
  void set_sqp_pen_max_iter(int32_t value);
  private:
  int32_t _internal_sqp_pen_max_iter() const;
  void _internal_set_sqp_pen_max_iter(int32_t value);
  public:

  // int32 sqp_sub_max_iter = 12;
  void clear_sqp_sub_max_iter();
  int32_t sqp_sub_max_iter() const;
  void set_sqp_sub_max_iter(int32_t value);
  private:
  int32_t _internal_sqp_sub_max_iter() const;
  void _internal_set_sqp_sub_max_iter(int32_t value);
  public:

  // bool apply_curvature_constraint = 5;
  void clear_apply_curvature_constraint();
  bool apply_curvature_constraint() const;
  void set_apply_curvature_constraint(bool value);
  private:
  bool _internal_apply_curvature_constraint() const;
  void _internal_set_apply_curvature_constraint(bool value);
  public:

  // bool use_sqp = 8;
  void clear_use_sqp();
  bool use_sqp() const;
  void set_use_sqp(bool value);
  private:
  bool _internal_use_sqp() const;
  void _internal_set_use_sqp(bool value);
  public:

  // bool verbose = 102;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // bool scaled_termination = 103;
  void clear_scaled_termination();
  bool scaled_termination() const;
  void set_scaled_termination(bool value);
  private:
  bool _internal_scaled_termination() const;
  void _internal_set_scaled_termination(bool value);
  public:

  // int32 max_iter = 100;
  void clear_max_iter();
  int32_t max_iter() const;
  void set_max_iter(int32_t value);
  private:
  int32_t _internal_max_iter() const;
  void _internal_set_max_iter(int32_t value);
  public:

  // double time_limit = 101;
  void clear_time_limit();
  double time_limit() const;
  void set_time_limit(double value);
  private:
  double _internal_time_limit() const;
  void _internal_set_time_limit(double value);
  public:

  // bool warm_start = 104;
  void clear_warm_start();
  bool warm_start() const;
  void set_warm_start(bool value);
  private:
  bool _internal_warm_start() const;
  void _internal_set_warm_start(bool value);
  public:

  // int32 print_level = 200;
  void clear_print_level();
  int32_t print_level() const;
  void set_print_level(int32_t value);
  private:
  int32_t _internal_print_level() const;
  void _internal_set_print_level(int32_t value);
  public:

  // int32 max_num_of_iterations = 201;
  void clear_max_num_of_iterations();
  int32_t max_num_of_iterations() const;
  void set_max_num_of_iterations(int32_t value);
  private:
  int32_t _internal_max_num_of_iterations() const;
  void _internal_set_max_num_of_iterations(int32_t value);
  public:

  // int32 acceptable_num_of_iterations = 202;
  void clear_acceptable_num_of_iterations();
  int32_t acceptable_num_of_iterations() const;
  void set_acceptable_num_of_iterations(int32_t value);
  private:
  int32_t _internal_acceptable_num_of_iterations() const;
  void _internal_set_acceptable_num_of_iterations(int32_t value);
  public:

  // double tol = 203;
  void clear_tol();
  double tol() const;
  void set_tol(double value);
  private:
  double _internal_tol() const;
  void _internal_set_tol(double value);
  public:

  // double acceptable_tol = 204;
  void clear_acceptable_tol();
  double acceptable_tol() const;
  void set_acceptable_tol(double value);
  private:
  double _internal_acceptable_tol() const;
  void _internal_set_acceptable_tol(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.FemPosDeviationSmootherConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_fem_pos_deviation_;
  double weight_ref_deviation_;
  double weight_path_length_;
  double weight_curvature_constraint_slack_var_;
  double curvature_constraint_;
  double sqp_ftol_;
  double sqp_ctol_;
  int32_t sqp_pen_max_iter_;
  int32_t sqp_sub_max_iter_;
  bool apply_curvature_constraint_;
  bool use_sqp_;
  bool verbose_;
  bool scaled_termination_;
  int32_t max_iter_;
  double time_limit_;
  bool warm_start_;
  int32_t print_level_;
  int32_t max_num_of_iterations_;
  int32_t acceptable_num_of_iterations_;
  double tol_;
  double acceptable_tol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FemPosDeviationSmootherConfig

// double weight_fem_pos_deviation = 2;
inline void FemPosDeviationSmootherConfig::clear_weight_fem_pos_deviation() {
  weight_fem_pos_deviation_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_weight_fem_pos_deviation() const {
  return weight_fem_pos_deviation_;
}
inline double FemPosDeviationSmootherConfig::weight_fem_pos_deviation() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.weight_fem_pos_deviation)
  return _internal_weight_fem_pos_deviation();
}
inline void FemPosDeviationSmootherConfig::_internal_set_weight_fem_pos_deviation(double value) {
  
  weight_fem_pos_deviation_ = value;
}
inline void FemPosDeviationSmootherConfig::set_weight_fem_pos_deviation(double value) {
  _internal_set_weight_fem_pos_deviation(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.weight_fem_pos_deviation)
}

// double weight_ref_deviation = 3;
inline void FemPosDeviationSmootherConfig::clear_weight_ref_deviation() {
  weight_ref_deviation_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_weight_ref_deviation() const {
  return weight_ref_deviation_;
}
inline double FemPosDeviationSmootherConfig::weight_ref_deviation() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.weight_ref_deviation)
  return _internal_weight_ref_deviation();
}
inline void FemPosDeviationSmootherConfig::_internal_set_weight_ref_deviation(double value) {
  
  weight_ref_deviation_ = value;
}
inline void FemPosDeviationSmootherConfig::set_weight_ref_deviation(double value) {
  _internal_set_weight_ref_deviation(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.weight_ref_deviation)
}

// double weight_path_length = 4;
inline void FemPosDeviationSmootherConfig::clear_weight_path_length() {
  weight_path_length_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_weight_path_length() const {
  return weight_path_length_;
}
inline double FemPosDeviationSmootherConfig::weight_path_length() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.weight_path_length)
  return _internal_weight_path_length();
}
inline void FemPosDeviationSmootherConfig::_internal_set_weight_path_length(double value) {
  
  weight_path_length_ = value;
}
inline void FemPosDeviationSmootherConfig::set_weight_path_length(double value) {
  _internal_set_weight_path_length(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.weight_path_length)
}

// bool apply_curvature_constraint = 5;
inline void FemPosDeviationSmootherConfig::clear_apply_curvature_constraint() {
  apply_curvature_constraint_ = false;
}
inline bool FemPosDeviationSmootherConfig::_internal_apply_curvature_constraint() const {
  return apply_curvature_constraint_;
}
inline bool FemPosDeviationSmootherConfig::apply_curvature_constraint() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.apply_curvature_constraint)
  return _internal_apply_curvature_constraint();
}
inline void FemPosDeviationSmootherConfig::_internal_set_apply_curvature_constraint(bool value) {
  
  apply_curvature_constraint_ = value;
}
inline void FemPosDeviationSmootherConfig::set_apply_curvature_constraint(bool value) {
  _internal_set_apply_curvature_constraint(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.apply_curvature_constraint)
}

// double weight_curvature_constraint_slack_var = 6;
inline void FemPosDeviationSmootherConfig::clear_weight_curvature_constraint_slack_var() {
  weight_curvature_constraint_slack_var_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_weight_curvature_constraint_slack_var() const {
  return weight_curvature_constraint_slack_var_;
}
inline double FemPosDeviationSmootherConfig::weight_curvature_constraint_slack_var() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.weight_curvature_constraint_slack_var)
  return _internal_weight_curvature_constraint_slack_var();
}
inline void FemPosDeviationSmootherConfig::_internal_set_weight_curvature_constraint_slack_var(double value) {
  
  weight_curvature_constraint_slack_var_ = value;
}
inline void FemPosDeviationSmootherConfig::set_weight_curvature_constraint_slack_var(double value) {
  _internal_set_weight_curvature_constraint_slack_var(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.weight_curvature_constraint_slack_var)
}

// double curvature_constraint = 7;
inline void FemPosDeviationSmootherConfig::clear_curvature_constraint() {
  curvature_constraint_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_curvature_constraint() const {
  return curvature_constraint_;
}
inline double FemPosDeviationSmootherConfig::curvature_constraint() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.curvature_constraint)
  return _internal_curvature_constraint();
}
inline void FemPosDeviationSmootherConfig::_internal_set_curvature_constraint(double value) {
  
  curvature_constraint_ = value;
}
inline void FemPosDeviationSmootherConfig::set_curvature_constraint(double value) {
  _internal_set_curvature_constraint(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.curvature_constraint)
}

// bool use_sqp = 8;
inline void FemPosDeviationSmootherConfig::clear_use_sqp() {
  use_sqp_ = false;
}
inline bool FemPosDeviationSmootherConfig::_internal_use_sqp() const {
  return use_sqp_;
}
inline bool FemPosDeviationSmootherConfig::use_sqp() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.use_sqp)
  return _internal_use_sqp();
}
inline void FemPosDeviationSmootherConfig::_internal_set_use_sqp(bool value) {
  
  use_sqp_ = value;
}
inline void FemPosDeviationSmootherConfig::set_use_sqp(bool value) {
  _internal_set_use_sqp(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.use_sqp)
}

// double sqp_ftol = 9;
inline void FemPosDeviationSmootherConfig::clear_sqp_ftol() {
  sqp_ftol_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_sqp_ftol() const {
  return sqp_ftol_;
}
inline double FemPosDeviationSmootherConfig::sqp_ftol() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.sqp_ftol)
  return _internal_sqp_ftol();
}
inline void FemPosDeviationSmootherConfig::_internal_set_sqp_ftol(double value) {
  
  sqp_ftol_ = value;
}
inline void FemPosDeviationSmootherConfig::set_sqp_ftol(double value) {
  _internal_set_sqp_ftol(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.sqp_ftol)
}

// double sqp_ctol = 10;
inline void FemPosDeviationSmootherConfig::clear_sqp_ctol() {
  sqp_ctol_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_sqp_ctol() const {
  return sqp_ctol_;
}
inline double FemPosDeviationSmootherConfig::sqp_ctol() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.sqp_ctol)
  return _internal_sqp_ctol();
}
inline void FemPosDeviationSmootherConfig::_internal_set_sqp_ctol(double value) {
  
  sqp_ctol_ = value;
}
inline void FemPosDeviationSmootherConfig::set_sqp_ctol(double value) {
  _internal_set_sqp_ctol(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.sqp_ctol)
}

// int32 sqp_pen_max_iter = 11;
inline void FemPosDeviationSmootherConfig::clear_sqp_pen_max_iter() {
  sqp_pen_max_iter_ = 0;
}
inline int32_t FemPosDeviationSmootherConfig::_internal_sqp_pen_max_iter() const {
  return sqp_pen_max_iter_;
}
inline int32_t FemPosDeviationSmootherConfig::sqp_pen_max_iter() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.sqp_pen_max_iter)
  return _internal_sqp_pen_max_iter();
}
inline void FemPosDeviationSmootherConfig::_internal_set_sqp_pen_max_iter(int32_t value) {
  
  sqp_pen_max_iter_ = value;
}
inline void FemPosDeviationSmootherConfig::set_sqp_pen_max_iter(int32_t value) {
  _internal_set_sqp_pen_max_iter(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.sqp_pen_max_iter)
}

// int32 sqp_sub_max_iter = 12;
inline void FemPosDeviationSmootherConfig::clear_sqp_sub_max_iter() {
  sqp_sub_max_iter_ = 0;
}
inline int32_t FemPosDeviationSmootherConfig::_internal_sqp_sub_max_iter() const {
  return sqp_sub_max_iter_;
}
inline int32_t FemPosDeviationSmootherConfig::sqp_sub_max_iter() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.sqp_sub_max_iter)
  return _internal_sqp_sub_max_iter();
}
inline void FemPosDeviationSmootherConfig::_internal_set_sqp_sub_max_iter(int32_t value) {
  
  sqp_sub_max_iter_ = value;
}
inline void FemPosDeviationSmootherConfig::set_sqp_sub_max_iter(int32_t value) {
  _internal_set_sqp_sub_max_iter(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.sqp_sub_max_iter)
}

// int32 max_iter = 100;
inline void FemPosDeviationSmootherConfig::clear_max_iter() {
  max_iter_ = 0;
}
inline int32_t FemPosDeviationSmootherConfig::_internal_max_iter() const {
  return max_iter_;
}
inline int32_t FemPosDeviationSmootherConfig::max_iter() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.max_iter)
  return _internal_max_iter();
}
inline void FemPosDeviationSmootherConfig::_internal_set_max_iter(int32_t value) {
  
  max_iter_ = value;
}
inline void FemPosDeviationSmootherConfig::set_max_iter(int32_t value) {
  _internal_set_max_iter(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.max_iter)
}

// double time_limit = 101;
inline void FemPosDeviationSmootherConfig::clear_time_limit() {
  time_limit_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_time_limit() const {
  return time_limit_;
}
inline double FemPosDeviationSmootherConfig::time_limit() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.time_limit)
  return _internal_time_limit();
}
inline void FemPosDeviationSmootherConfig::_internal_set_time_limit(double value) {
  
  time_limit_ = value;
}
inline void FemPosDeviationSmootherConfig::set_time_limit(double value) {
  _internal_set_time_limit(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.time_limit)
}

// bool verbose = 102;
inline void FemPosDeviationSmootherConfig::clear_verbose() {
  verbose_ = false;
}
inline bool FemPosDeviationSmootherConfig::_internal_verbose() const {
  return verbose_;
}
inline bool FemPosDeviationSmootherConfig::verbose() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.verbose)
  return _internal_verbose();
}
inline void FemPosDeviationSmootherConfig::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void FemPosDeviationSmootherConfig::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.verbose)
}

// bool scaled_termination = 103;
inline void FemPosDeviationSmootherConfig::clear_scaled_termination() {
  scaled_termination_ = false;
}
inline bool FemPosDeviationSmootherConfig::_internal_scaled_termination() const {
  return scaled_termination_;
}
inline bool FemPosDeviationSmootherConfig::scaled_termination() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.scaled_termination)
  return _internal_scaled_termination();
}
inline void FemPosDeviationSmootherConfig::_internal_set_scaled_termination(bool value) {
  
  scaled_termination_ = value;
}
inline void FemPosDeviationSmootherConfig::set_scaled_termination(bool value) {
  _internal_set_scaled_termination(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.scaled_termination)
}

// bool warm_start = 104;
inline void FemPosDeviationSmootherConfig::clear_warm_start() {
  warm_start_ = false;
}
inline bool FemPosDeviationSmootherConfig::_internal_warm_start() const {
  return warm_start_;
}
inline bool FemPosDeviationSmootherConfig::warm_start() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.warm_start)
  return _internal_warm_start();
}
inline void FemPosDeviationSmootherConfig::_internal_set_warm_start(bool value) {
  
  warm_start_ = value;
}
inline void FemPosDeviationSmootherConfig::set_warm_start(bool value) {
  _internal_set_warm_start(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.warm_start)
}

// int32 print_level = 200;
inline void FemPosDeviationSmootherConfig::clear_print_level() {
  print_level_ = 0;
}
inline int32_t FemPosDeviationSmootherConfig::_internal_print_level() const {
  return print_level_;
}
inline int32_t FemPosDeviationSmootherConfig::print_level() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.print_level)
  return _internal_print_level();
}
inline void FemPosDeviationSmootherConfig::_internal_set_print_level(int32_t value) {
  
  print_level_ = value;
}
inline void FemPosDeviationSmootherConfig::set_print_level(int32_t value) {
  _internal_set_print_level(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.print_level)
}

// int32 max_num_of_iterations = 201;
inline void FemPosDeviationSmootherConfig::clear_max_num_of_iterations() {
  max_num_of_iterations_ = 0;
}
inline int32_t FemPosDeviationSmootherConfig::_internal_max_num_of_iterations() const {
  return max_num_of_iterations_;
}
inline int32_t FemPosDeviationSmootherConfig::max_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.max_num_of_iterations)
  return _internal_max_num_of_iterations();
}
inline void FemPosDeviationSmootherConfig::_internal_set_max_num_of_iterations(int32_t value) {
  
  max_num_of_iterations_ = value;
}
inline void FemPosDeviationSmootherConfig::set_max_num_of_iterations(int32_t value) {
  _internal_set_max_num_of_iterations(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.max_num_of_iterations)
}

// int32 acceptable_num_of_iterations = 202;
inline void FemPosDeviationSmootherConfig::clear_acceptable_num_of_iterations() {
  acceptable_num_of_iterations_ = 0;
}
inline int32_t FemPosDeviationSmootherConfig::_internal_acceptable_num_of_iterations() const {
  return acceptable_num_of_iterations_;
}
inline int32_t FemPosDeviationSmootherConfig::acceptable_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.acceptable_num_of_iterations)
  return _internal_acceptable_num_of_iterations();
}
inline void FemPosDeviationSmootherConfig::_internal_set_acceptable_num_of_iterations(int32_t value) {
  
  acceptable_num_of_iterations_ = value;
}
inline void FemPosDeviationSmootherConfig::set_acceptable_num_of_iterations(int32_t value) {
  _internal_set_acceptable_num_of_iterations(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.acceptable_num_of_iterations)
}

// double tol = 203;
inline void FemPosDeviationSmootherConfig::clear_tol() {
  tol_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_tol() const {
  return tol_;
}
inline double FemPosDeviationSmootherConfig::tol() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.tol)
  return _internal_tol();
}
inline void FemPosDeviationSmootherConfig::_internal_set_tol(double value) {
  
  tol_ = value;
}
inline void FemPosDeviationSmootherConfig::set_tol(double value) {
  _internal_set_tol(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.tol)
}

// double acceptable_tol = 204;
inline void FemPosDeviationSmootherConfig::clear_acceptable_tol() {
  acceptable_tol_ = 0;
}
inline double FemPosDeviationSmootherConfig::_internal_acceptable_tol() const {
  return acceptable_tol_;
}
inline double FemPosDeviationSmootherConfig::acceptable_tol() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.FemPosDeviationSmootherConfig.acceptable_tol)
  return _internal_acceptable_tol();
}
inline void FemPosDeviationSmootherConfig::_internal_set_acceptable_tol(double value) {
  
  acceptable_tol_ = value;
}
inline void FemPosDeviationSmootherConfig::set_acceptable_tol(double value) {
  _internal_set_acceptable_tol(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.FemPosDeviationSmootherConfig.acceptable_tol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto
