// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/math/cos_theta_smoother_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto;
namespace autoagric {
namespace planning {
class CosThetaSmootherConfig;
struct CosThetaSmootherConfigDefaultTypeInternal;
extern CosThetaSmootherConfigDefaultTypeInternal _CosThetaSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::planning::CosThetaSmootherConfig* Arena::CreateMaybeMessage<::autoagric::planning::CosThetaSmootherConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace planning {

// ===================================================================

class CosThetaSmootherConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.CosThetaSmootherConfig) */ {
 public:
  inline CosThetaSmootherConfig() : CosThetaSmootherConfig(nullptr) {}
  ~CosThetaSmootherConfig() override;
  explicit constexpr CosThetaSmootherConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CosThetaSmootherConfig(const CosThetaSmootherConfig& from);
  CosThetaSmootherConfig(CosThetaSmootherConfig&& from) noexcept
    : CosThetaSmootherConfig() {
    *this = ::std::move(from);
  }

  inline CosThetaSmootherConfig& operator=(const CosThetaSmootherConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosThetaSmootherConfig& operator=(CosThetaSmootherConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CosThetaSmootherConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CosThetaSmootherConfig* internal_default_instance() {
    return reinterpret_cast<const CosThetaSmootherConfig*>(
               &_CosThetaSmootherConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CosThetaSmootherConfig& a, CosThetaSmootherConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CosThetaSmootherConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosThetaSmootherConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CosThetaSmootherConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CosThetaSmootherConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CosThetaSmootherConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CosThetaSmootherConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosThetaSmootherConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.CosThetaSmootherConfig";
  }
  protected:
  explicit CosThetaSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightCosIncludedAngleFieldNumber = 1,
    kWeightAnchorPointsFieldNumber = 2,
    kWeightLengthFieldNumber = 3,
    kPrintLevelFieldNumber = 4,
    kMaxNumOfIterationsFieldNumber = 5,
    kTolFieldNumber = 7,
    kAcceptableNumOfIterationsFieldNumber = 6,
    kIpoptUseAutomaticDifferentiationFieldNumber = 9,
    kAcceptableTolFieldNumber = 8,
  };
  // double weight_cos_included_angle = 1;
  void clear_weight_cos_included_angle();
  double weight_cos_included_angle() const;
  void set_weight_cos_included_angle(double value);
  private:
  double _internal_weight_cos_included_angle() const;
  void _internal_set_weight_cos_included_angle(double value);
  public:

  // double weight_anchor_points = 2;
  void clear_weight_anchor_points();
  double weight_anchor_points() const;
  void set_weight_anchor_points(double value);
  private:
  double _internal_weight_anchor_points() const;
  void _internal_set_weight_anchor_points(double value);
  public:

  // double weight_length = 3;
  void clear_weight_length();
  double weight_length() const;
  void set_weight_length(double value);
  private:
  double _internal_weight_length() const;
  void _internal_set_weight_length(double value);
  public:

  // int32 print_level = 4;
  void clear_print_level();
  int32_t print_level() const;
  void set_print_level(int32_t value);
  private:
  int32_t _internal_print_level() const;
  void _internal_set_print_level(int32_t value);
  public:

  // int32 max_num_of_iterations = 5;
  void clear_max_num_of_iterations();
  int32_t max_num_of_iterations() const;
  void set_max_num_of_iterations(int32_t value);
  private:
  int32_t _internal_max_num_of_iterations() const;
  void _internal_set_max_num_of_iterations(int32_t value);
  public:

  // double tol = 7;
  void clear_tol();
  double tol() const;
  void set_tol(double value);
  private:
  double _internal_tol() const;
  void _internal_set_tol(double value);
  public:

  // int32 acceptable_num_of_iterations = 6;
  void clear_acceptable_num_of_iterations();
  int32_t acceptable_num_of_iterations() const;
  void set_acceptable_num_of_iterations(int32_t value);
  private:
  int32_t _internal_acceptable_num_of_iterations() const;
  void _internal_set_acceptable_num_of_iterations(int32_t value);
  public:

  // bool ipopt_use_automatic_differentiation = 9;
  void clear_ipopt_use_automatic_differentiation();
  bool ipopt_use_automatic_differentiation() const;
  void set_ipopt_use_automatic_differentiation(bool value);
  private:
  bool _internal_ipopt_use_automatic_differentiation() const;
  void _internal_set_ipopt_use_automatic_differentiation(bool value);
  public:

  // double acceptable_tol = 8;
  void clear_acceptable_tol();
  double acceptable_tol() const;
  void set_acceptable_tol(double value);
  private:
  double _internal_acceptable_tol() const;
  void _internal_set_acceptable_tol(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.CosThetaSmootherConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double weight_cos_included_angle_;
  double weight_anchor_points_;
  double weight_length_;
  int32_t print_level_;
  int32_t max_num_of_iterations_;
  double tol_;
  int32_t acceptable_num_of_iterations_;
  bool ipopt_use_automatic_differentiation_;
  double acceptable_tol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CosThetaSmootherConfig

// double weight_cos_included_angle = 1;
inline void CosThetaSmootherConfig::clear_weight_cos_included_angle() {
  weight_cos_included_angle_ = 0;
}
inline double CosThetaSmootherConfig::_internal_weight_cos_included_angle() const {
  return weight_cos_included_angle_;
}
inline double CosThetaSmootherConfig::weight_cos_included_angle() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.weight_cos_included_angle)
  return _internal_weight_cos_included_angle();
}
inline void CosThetaSmootherConfig::_internal_set_weight_cos_included_angle(double value) {
  
  weight_cos_included_angle_ = value;
}
inline void CosThetaSmootherConfig::set_weight_cos_included_angle(double value) {
  _internal_set_weight_cos_included_angle(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.weight_cos_included_angle)
}

// double weight_anchor_points = 2;
inline void CosThetaSmootherConfig::clear_weight_anchor_points() {
  weight_anchor_points_ = 0;
}
inline double CosThetaSmootherConfig::_internal_weight_anchor_points() const {
  return weight_anchor_points_;
}
inline double CosThetaSmootherConfig::weight_anchor_points() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.weight_anchor_points)
  return _internal_weight_anchor_points();
}
inline void CosThetaSmootherConfig::_internal_set_weight_anchor_points(double value) {
  
  weight_anchor_points_ = value;
}
inline void CosThetaSmootherConfig::set_weight_anchor_points(double value) {
  _internal_set_weight_anchor_points(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.weight_anchor_points)
}

// double weight_length = 3;
inline void CosThetaSmootherConfig::clear_weight_length() {
  weight_length_ = 0;
}
inline double CosThetaSmootherConfig::_internal_weight_length() const {
  return weight_length_;
}
inline double CosThetaSmootherConfig::weight_length() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.weight_length)
  return _internal_weight_length();
}
inline void CosThetaSmootherConfig::_internal_set_weight_length(double value) {
  
  weight_length_ = value;
}
inline void CosThetaSmootherConfig::set_weight_length(double value) {
  _internal_set_weight_length(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.weight_length)
}

// int32 print_level = 4;
inline void CosThetaSmootherConfig::clear_print_level() {
  print_level_ = 0;
}
inline int32_t CosThetaSmootherConfig::_internal_print_level() const {
  return print_level_;
}
inline int32_t CosThetaSmootherConfig::print_level() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.print_level)
  return _internal_print_level();
}
inline void CosThetaSmootherConfig::_internal_set_print_level(int32_t value) {
  
  print_level_ = value;
}
inline void CosThetaSmootherConfig::set_print_level(int32_t value) {
  _internal_set_print_level(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.print_level)
}

// int32 max_num_of_iterations = 5;
inline void CosThetaSmootherConfig::clear_max_num_of_iterations() {
  max_num_of_iterations_ = 0;
}
inline int32_t CosThetaSmootherConfig::_internal_max_num_of_iterations() const {
  return max_num_of_iterations_;
}
inline int32_t CosThetaSmootherConfig::max_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.max_num_of_iterations)
  return _internal_max_num_of_iterations();
}
inline void CosThetaSmootherConfig::_internal_set_max_num_of_iterations(int32_t value) {
  
  max_num_of_iterations_ = value;
}
inline void CosThetaSmootherConfig::set_max_num_of_iterations(int32_t value) {
  _internal_set_max_num_of_iterations(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.max_num_of_iterations)
}

// int32 acceptable_num_of_iterations = 6;
inline void CosThetaSmootherConfig::clear_acceptable_num_of_iterations() {
  acceptable_num_of_iterations_ = 0;
}
inline int32_t CosThetaSmootherConfig::_internal_acceptable_num_of_iterations() const {
  return acceptable_num_of_iterations_;
}
inline int32_t CosThetaSmootherConfig::acceptable_num_of_iterations() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.acceptable_num_of_iterations)
  return _internal_acceptable_num_of_iterations();
}
inline void CosThetaSmootherConfig::_internal_set_acceptable_num_of_iterations(int32_t value) {
  
  acceptable_num_of_iterations_ = value;
}
inline void CosThetaSmootherConfig::set_acceptable_num_of_iterations(int32_t value) {
  _internal_set_acceptable_num_of_iterations(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.acceptable_num_of_iterations)
}

// double tol = 7;
inline void CosThetaSmootherConfig::clear_tol() {
  tol_ = 0;
}
inline double CosThetaSmootherConfig::_internal_tol() const {
  return tol_;
}
inline double CosThetaSmootherConfig::tol() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.tol)
  return _internal_tol();
}
inline void CosThetaSmootherConfig::_internal_set_tol(double value) {
  
  tol_ = value;
}
inline void CosThetaSmootherConfig::set_tol(double value) {
  _internal_set_tol(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.tol)
}

// double acceptable_tol = 8;
inline void CosThetaSmootherConfig::clear_acceptable_tol() {
  acceptable_tol_ = 0;
}
inline double CosThetaSmootherConfig::_internal_acceptable_tol() const {
  return acceptable_tol_;
}
inline double CosThetaSmootherConfig::acceptable_tol() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.acceptable_tol)
  return _internal_acceptable_tol();
}
inline void CosThetaSmootherConfig::_internal_set_acceptable_tol(double value) {
  
  acceptable_tol_ = value;
}
inline void CosThetaSmootherConfig::set_acceptable_tol(double value) {
  _internal_set_acceptable_tol(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.acceptable_tol)
}

// bool ipopt_use_automatic_differentiation = 9;
inline void CosThetaSmootherConfig::clear_ipopt_use_automatic_differentiation() {
  ipopt_use_automatic_differentiation_ = false;
}
inline bool CosThetaSmootherConfig::_internal_ipopt_use_automatic_differentiation() const {
  return ipopt_use_automatic_differentiation_;
}
inline bool CosThetaSmootherConfig::ipopt_use_automatic_differentiation() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.CosThetaSmootherConfig.ipopt_use_automatic_differentiation)
  return _internal_ipopt_use_automatic_differentiation();
}
inline void CosThetaSmootherConfig::_internal_set_ipopt_use_automatic_differentiation(bool value) {
  
  ipopt_use_automatic_differentiation_ = value;
}
inline void CosThetaSmootherConfig::set_ipopt_use_automatic_differentiation(bool value) {
  _internal_set_ipopt_use_automatic_differentiation(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.CosThetaSmootherConfig.ipopt_use_automatic_differentiation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto
