// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/math/fem_pos_deviation_smoother_config.proto

#include "autoagric/planning/math/fem_pos_deviation_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace planning {
constexpr FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_fem_pos_deviation_(0)
  , weight_ref_deviation_(0)
  , weight_path_length_(0)
  , weight_curvature_constraint_slack_var_(0)
  , curvature_constraint_(0)
  , sqp_ftol_(0)
  , sqp_ctol_(0)
  , sqp_pen_max_iter_(0)
  , sqp_sub_max_iter_(0)
  , apply_curvature_constraint_(false)
  , use_sqp_(false)
  , verbose_(false)
  , scaled_termination_(false)
  , max_iter_(0)
  , time_limit_(0)
  , warm_start_(false)
  , print_level_(0)
  , max_num_of_iterations_(0)
  , acceptable_num_of_iterations_(0)
  , tol_(0)
  , acceptable_tol_(0){}
struct FemPosDeviationSmootherConfigDefaultTypeInternal {
  constexpr FemPosDeviationSmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FemPosDeviationSmootherConfigDefaultTypeInternal() {}
  union {
    FemPosDeviationSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FemPosDeviationSmootherConfigDefaultTypeInternal _FemPosDeviationSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, weight_fem_pos_deviation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, weight_ref_deviation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, weight_path_length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, apply_curvature_constraint_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, weight_curvature_constraint_slack_var_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, curvature_constraint_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, use_sqp_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, sqp_ftol_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, sqp_ctol_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, sqp_pen_max_iter_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, sqp_sub_max_iter_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, max_iter_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, time_limit_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, verbose_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, scaled_termination_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, warm_start_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, print_level_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, max_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, acceptable_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, tol_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::FemPosDeviationSmootherConfig, acceptable_tol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::planning::FemPosDeviationSmootherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_FemPosDeviationSmootherConfig_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\?autoagric/planning/math/fem_pos_deviat"
  "ion_smoother_config.proto\022\022autoagric.pla"
  "nning\"\300\004\n\035FemPosDeviationSmootherConfig\022"
  " \n\030weight_fem_pos_deviation\030\002 \001(\001\022\034\n\024wei"
  "ght_ref_deviation\030\003 \001(\001\022\032\n\022weight_path_l"
  "ength\030\004 \001(\001\022\"\n\032apply_curvature_constrain"
  "t\030\005 \001(\010\022-\n%weight_curvature_constraint_s"
  "lack_var\030\006 \001(\001\022\034\n\024curvature_constraint\030\007"
  " \001(\001\022\017\n\007use_sqp\030\010 \001(\010\022\020\n\010sqp_ftol\030\t \001(\001\022"
  "\020\n\010sqp_ctol\030\n \001(\001\022\030\n\020sqp_pen_max_iter\030\013 "
  "\001(\005\022\030\n\020sqp_sub_max_iter\030\014 \001(\005\022\020\n\010max_ite"
  "r\030d \001(\005\022\022\n\ntime_limit\030e \001(\001\022\017\n\007verbose\030f"
  " \001(\010\022\032\n\022scaled_termination\030g \001(\010\022\022\n\nwarm"
  "_start\030h \001(\010\022\024\n\013print_level\030\310\001 \001(\005\022\036\n\025ma"
  "x_num_of_iterations\030\311\001 \001(\005\022%\n\034acceptable"
  "_num_of_iterations\030\312\001 \001(\005\022\014\n\003tol\030\313\001 \001(\001\022"
  "\027\n\016acceptable_tol\030\314\001 \001(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto = {
  false, false, 672, descriptor_table_protodef_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, "autoagric/planning/math/fem_pos_deviation_smoother_config.proto", 
  &descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto::offsets,
  file_level_metadata_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, file_level_enum_descriptors_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto, file_level_service_descriptors_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_getter() {
  return &descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto(&descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto);
namespace autoagric {
namespace planning {

// ===================================================================

class FemPosDeviationSmootherConfig::_Internal {
 public:
};

FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.FemPosDeviationSmootherConfig)
}
FemPosDeviationSmootherConfig::FemPosDeviationSmootherConfig(const FemPosDeviationSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_fem_pos_deviation_, &from.weight_fem_pos_deviation_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&weight_fem_pos_deviation_)) + sizeof(acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.FemPosDeviationSmootherConfig)
}

inline void FemPosDeviationSmootherConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_fem_pos_deviation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&weight_fem_pos_deviation_)) + sizeof(acceptable_tol_));
}

FemPosDeviationSmootherConfig::~FemPosDeviationSmootherConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.FemPosDeviationSmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FemPosDeviationSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FemPosDeviationSmootherConfig::ArenaDtor(void* object) {
  FemPosDeviationSmootherConfig* _this = reinterpret_cast< FemPosDeviationSmootherConfig* >(object);
  (void)_this;
}
void FemPosDeviationSmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FemPosDeviationSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FemPosDeviationSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.FemPosDeviationSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weight_fem_pos_deviation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptable_tol_) -
      reinterpret_cast<char*>(&weight_fem_pos_deviation_)) + sizeof(acceptable_tol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FemPosDeviationSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double weight_fem_pos_deviation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          weight_fem_pos_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_ref_deviation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          weight_ref_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_path_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          weight_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool apply_curvature_constraint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          apply_curvature_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight_curvature_constraint_slack_var = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          weight_curvature_constraint_slack_var_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double curvature_constraint = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          curvature_constraint_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool use_sqp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          use_sqp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double sqp_ftol = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          sqp_ftol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sqp_ctol = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          sqp_ctol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 sqp_pen_max_iter = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          sqp_pen_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sqp_sub_max_iter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          sqp_sub_max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_iter = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_limit = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          time_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool verbose = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool scaled_termination = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          scaled_termination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool warm_start = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          warm_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 print_level = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_num_of_iterations = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          max_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 acceptable_num_of_iterations = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          acceptable_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double tol = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceptable_tol = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FemPosDeviationSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.FemPosDeviationSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight_fem_pos_deviation = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_fem_pos_deviation = this->_internal_weight_fem_pos_deviation();
  uint64_t raw_weight_fem_pos_deviation;
  memcpy(&raw_weight_fem_pos_deviation, &tmp_weight_fem_pos_deviation, sizeof(tmp_weight_fem_pos_deviation));
  if (raw_weight_fem_pos_deviation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_fem_pos_deviation(), target);
  }

  // double weight_ref_deviation = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_ref_deviation = this->_internal_weight_ref_deviation();
  uint64_t raw_weight_ref_deviation;
  memcpy(&raw_weight_ref_deviation, &tmp_weight_ref_deviation, sizeof(tmp_weight_ref_deviation));
  if (raw_weight_ref_deviation != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_ref_deviation(), target);
  }

  // double weight_path_length = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_path_length = this->_internal_weight_path_length();
  uint64_t raw_weight_path_length;
  memcpy(&raw_weight_path_length, &tmp_weight_path_length, sizeof(tmp_weight_path_length));
  if (raw_weight_path_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_weight_path_length(), target);
  }

  // bool apply_curvature_constraint = 5;
  if (this->_internal_apply_curvature_constraint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_apply_curvature_constraint(), target);
  }

  // double weight_curvature_constraint_slack_var = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_curvature_constraint_slack_var = this->_internal_weight_curvature_constraint_slack_var();
  uint64_t raw_weight_curvature_constraint_slack_var;
  memcpy(&raw_weight_curvature_constraint_slack_var, &tmp_weight_curvature_constraint_slack_var, sizeof(tmp_weight_curvature_constraint_slack_var));
  if (raw_weight_curvature_constraint_slack_var != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight_curvature_constraint_slack_var(), target);
  }

  // double curvature_constraint = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature_constraint = this->_internal_curvature_constraint();
  uint64_t raw_curvature_constraint;
  memcpy(&raw_curvature_constraint, &tmp_curvature_constraint, sizeof(tmp_curvature_constraint));
  if (raw_curvature_constraint != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_curvature_constraint(), target);
  }

  // bool use_sqp = 8;
  if (this->_internal_use_sqp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_use_sqp(), target);
  }

  // double sqp_ftol = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sqp_ftol = this->_internal_sqp_ftol();
  uint64_t raw_sqp_ftol;
  memcpy(&raw_sqp_ftol, &tmp_sqp_ftol, sizeof(tmp_sqp_ftol));
  if (raw_sqp_ftol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_sqp_ftol(), target);
  }

  // double sqp_ctol = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sqp_ctol = this->_internal_sqp_ctol();
  uint64_t raw_sqp_ctol;
  memcpy(&raw_sqp_ctol, &tmp_sqp_ctol, sizeof(tmp_sqp_ctol));
  if (raw_sqp_ctol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_sqp_ctol(), target);
  }

  // int32 sqp_pen_max_iter = 11;
  if (this->_internal_sqp_pen_max_iter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_sqp_pen_max_iter(), target);
  }

  // int32 sqp_sub_max_iter = 12;
  if (this->_internal_sqp_sub_max_iter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_sqp_sub_max_iter(), target);
  }

  // int32 max_iter = 100;
  if (this->_internal_max_iter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_max_iter(), target);
  }

  // double time_limit = 101;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_limit = this->_internal_time_limit();
  uint64_t raw_time_limit;
  memcpy(&raw_time_limit, &tmp_time_limit, sizeof(tmp_time_limit));
  if (raw_time_limit != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(101, this->_internal_time_limit(), target);
  }

  // bool verbose = 102;
  if (this->_internal_verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_verbose(), target);
  }

  // bool scaled_termination = 103;
  if (this->_internal_scaled_termination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(103, this->_internal_scaled_termination(), target);
  }

  // bool warm_start = 104;
  if (this->_internal_warm_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(104, this->_internal_warm_start(), target);
  }

  // int32 print_level = 200;
  if (this->_internal_print_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(200, this->_internal_print_level(), target);
  }

  // int32 max_num_of_iterations = 201;
  if (this->_internal_max_num_of_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(201, this->_internal_max_num_of_iterations(), target);
  }

  // int32 acceptable_num_of_iterations = 202;
  if (this->_internal_acceptable_num_of_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(202, this->_internal_acceptable_num_of_iterations(), target);
  }

  // double tol = 203;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tol = this->_internal_tol();
  uint64_t raw_tol;
  memcpy(&raw_tol, &tmp_tol, sizeof(tmp_tol));
  if (raw_tol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(203, this->_internal_tol(), target);
  }

  // double acceptable_tol = 204;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceptable_tol = this->_internal_acceptable_tol();
  uint64_t raw_acceptable_tol;
  memcpy(&raw_acceptable_tol, &tmp_acceptable_tol, sizeof(tmp_acceptable_tol));
  if (raw_acceptable_tol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(204, this->_internal_acceptable_tol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.FemPosDeviationSmootherConfig)
  return target;
}

size_t FemPosDeviationSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.FemPosDeviationSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight_fem_pos_deviation = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_fem_pos_deviation = this->_internal_weight_fem_pos_deviation();
  uint64_t raw_weight_fem_pos_deviation;
  memcpy(&raw_weight_fem_pos_deviation, &tmp_weight_fem_pos_deviation, sizeof(tmp_weight_fem_pos_deviation));
  if (raw_weight_fem_pos_deviation != 0) {
    total_size += 1 + 8;
  }

  // double weight_ref_deviation = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_ref_deviation = this->_internal_weight_ref_deviation();
  uint64_t raw_weight_ref_deviation;
  memcpy(&raw_weight_ref_deviation, &tmp_weight_ref_deviation, sizeof(tmp_weight_ref_deviation));
  if (raw_weight_ref_deviation != 0) {
    total_size += 1 + 8;
  }

  // double weight_path_length = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_path_length = this->_internal_weight_path_length();
  uint64_t raw_weight_path_length;
  memcpy(&raw_weight_path_length, &tmp_weight_path_length, sizeof(tmp_weight_path_length));
  if (raw_weight_path_length != 0) {
    total_size += 1 + 8;
  }

  // double weight_curvature_constraint_slack_var = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_curvature_constraint_slack_var = this->_internal_weight_curvature_constraint_slack_var();
  uint64_t raw_weight_curvature_constraint_slack_var;
  memcpy(&raw_weight_curvature_constraint_slack_var, &tmp_weight_curvature_constraint_slack_var, sizeof(tmp_weight_curvature_constraint_slack_var));
  if (raw_weight_curvature_constraint_slack_var != 0) {
    total_size += 1 + 8;
  }

  // double curvature_constraint = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature_constraint = this->_internal_curvature_constraint();
  uint64_t raw_curvature_constraint;
  memcpy(&raw_curvature_constraint, &tmp_curvature_constraint, sizeof(tmp_curvature_constraint));
  if (raw_curvature_constraint != 0) {
    total_size += 1 + 8;
  }

  // double sqp_ftol = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sqp_ftol = this->_internal_sqp_ftol();
  uint64_t raw_sqp_ftol;
  memcpy(&raw_sqp_ftol, &tmp_sqp_ftol, sizeof(tmp_sqp_ftol));
  if (raw_sqp_ftol != 0) {
    total_size += 1 + 8;
  }

  // double sqp_ctol = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sqp_ctol = this->_internal_sqp_ctol();
  uint64_t raw_sqp_ctol;
  memcpy(&raw_sqp_ctol, &tmp_sqp_ctol, sizeof(tmp_sqp_ctol));
  if (raw_sqp_ctol != 0) {
    total_size += 1 + 8;
  }

  // int32 sqp_pen_max_iter = 11;
  if (this->_internal_sqp_pen_max_iter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sqp_pen_max_iter());
  }

  // int32 sqp_sub_max_iter = 12;
  if (this->_internal_sqp_sub_max_iter() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sqp_sub_max_iter());
  }

  // bool apply_curvature_constraint = 5;
  if (this->_internal_apply_curvature_constraint() != 0) {
    total_size += 1 + 1;
  }

  // bool use_sqp = 8;
  if (this->_internal_use_sqp() != 0) {
    total_size += 1 + 1;
  }

  // bool verbose = 102;
  if (this->_internal_verbose() != 0) {
    total_size += 2 + 1;
  }

  // bool scaled_termination = 103;
  if (this->_internal_scaled_termination() != 0) {
    total_size += 2 + 1;
  }

  // int32 max_iter = 100;
  if (this->_internal_max_iter() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_iter());
  }

  // double time_limit = 101;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_limit = this->_internal_time_limit();
  uint64_t raw_time_limit;
  memcpy(&raw_time_limit, &tmp_time_limit, sizeof(tmp_time_limit));
  if (raw_time_limit != 0) {
    total_size += 2 + 8;
  }

  // bool warm_start = 104;
  if (this->_internal_warm_start() != 0) {
    total_size += 2 + 1;
  }

  // int32 print_level = 200;
  if (this->_internal_print_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_print_level());
  }

  // int32 max_num_of_iterations = 201;
  if (this->_internal_max_num_of_iterations() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_num_of_iterations());
  }

  // int32 acceptable_num_of_iterations = 202;
  if (this->_internal_acceptable_num_of_iterations() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_acceptable_num_of_iterations());
  }

  // double tol = 203;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tol = this->_internal_tol();
  uint64_t raw_tol;
  memcpy(&raw_tol, &tmp_tol, sizeof(tmp_tol));
  if (raw_tol != 0) {
    total_size += 2 + 8;
  }

  // double acceptable_tol = 204;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceptable_tol = this->_internal_acceptable_tol();
  uint64_t raw_acceptable_tol;
  memcpy(&raw_acceptable_tol, &tmp_acceptable_tol, sizeof(tmp_acceptable_tol));
  if (raw_acceptable_tol != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FemPosDeviationSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FemPosDeviationSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FemPosDeviationSmootherConfig::GetClassData() const { return &_class_data_; }

void FemPosDeviationSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FemPosDeviationSmootherConfig *>(to)->MergeFrom(
      static_cast<const FemPosDeviationSmootherConfig &>(from));
}


void FemPosDeviationSmootherConfig::MergeFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.FemPosDeviationSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_fem_pos_deviation = from._internal_weight_fem_pos_deviation();
  uint64_t raw_weight_fem_pos_deviation;
  memcpy(&raw_weight_fem_pos_deviation, &tmp_weight_fem_pos_deviation, sizeof(tmp_weight_fem_pos_deviation));
  if (raw_weight_fem_pos_deviation != 0) {
    _internal_set_weight_fem_pos_deviation(from._internal_weight_fem_pos_deviation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_ref_deviation = from._internal_weight_ref_deviation();
  uint64_t raw_weight_ref_deviation;
  memcpy(&raw_weight_ref_deviation, &tmp_weight_ref_deviation, sizeof(tmp_weight_ref_deviation));
  if (raw_weight_ref_deviation != 0) {
    _internal_set_weight_ref_deviation(from._internal_weight_ref_deviation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_path_length = from._internal_weight_path_length();
  uint64_t raw_weight_path_length;
  memcpy(&raw_weight_path_length, &tmp_weight_path_length, sizeof(tmp_weight_path_length));
  if (raw_weight_path_length != 0) {
    _internal_set_weight_path_length(from._internal_weight_path_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_curvature_constraint_slack_var = from._internal_weight_curvature_constraint_slack_var();
  uint64_t raw_weight_curvature_constraint_slack_var;
  memcpy(&raw_weight_curvature_constraint_slack_var, &tmp_weight_curvature_constraint_slack_var, sizeof(tmp_weight_curvature_constraint_slack_var));
  if (raw_weight_curvature_constraint_slack_var != 0) {
    _internal_set_weight_curvature_constraint_slack_var(from._internal_weight_curvature_constraint_slack_var());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_curvature_constraint = from._internal_curvature_constraint();
  uint64_t raw_curvature_constraint;
  memcpy(&raw_curvature_constraint, &tmp_curvature_constraint, sizeof(tmp_curvature_constraint));
  if (raw_curvature_constraint != 0) {
    _internal_set_curvature_constraint(from._internal_curvature_constraint());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sqp_ftol = from._internal_sqp_ftol();
  uint64_t raw_sqp_ftol;
  memcpy(&raw_sqp_ftol, &tmp_sqp_ftol, sizeof(tmp_sqp_ftol));
  if (raw_sqp_ftol != 0) {
    _internal_set_sqp_ftol(from._internal_sqp_ftol());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sqp_ctol = from._internal_sqp_ctol();
  uint64_t raw_sqp_ctol;
  memcpy(&raw_sqp_ctol, &tmp_sqp_ctol, sizeof(tmp_sqp_ctol));
  if (raw_sqp_ctol != 0) {
    _internal_set_sqp_ctol(from._internal_sqp_ctol());
  }
  if (from._internal_sqp_pen_max_iter() != 0) {
    _internal_set_sqp_pen_max_iter(from._internal_sqp_pen_max_iter());
  }
  if (from._internal_sqp_sub_max_iter() != 0) {
    _internal_set_sqp_sub_max_iter(from._internal_sqp_sub_max_iter());
  }
  if (from._internal_apply_curvature_constraint() != 0) {
    _internal_set_apply_curvature_constraint(from._internal_apply_curvature_constraint());
  }
  if (from._internal_use_sqp() != 0) {
    _internal_set_use_sqp(from._internal_use_sqp());
  }
  if (from._internal_verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
  if (from._internal_scaled_termination() != 0) {
    _internal_set_scaled_termination(from._internal_scaled_termination());
  }
  if (from._internal_max_iter() != 0) {
    _internal_set_max_iter(from._internal_max_iter());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_limit = from._internal_time_limit();
  uint64_t raw_time_limit;
  memcpy(&raw_time_limit, &tmp_time_limit, sizeof(tmp_time_limit));
  if (raw_time_limit != 0) {
    _internal_set_time_limit(from._internal_time_limit());
  }
  if (from._internal_warm_start() != 0) {
    _internal_set_warm_start(from._internal_warm_start());
  }
  if (from._internal_print_level() != 0) {
    _internal_set_print_level(from._internal_print_level());
  }
  if (from._internal_max_num_of_iterations() != 0) {
    _internal_set_max_num_of_iterations(from._internal_max_num_of_iterations());
  }
  if (from._internal_acceptable_num_of_iterations() != 0) {
    _internal_set_acceptable_num_of_iterations(from._internal_acceptable_num_of_iterations());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tol = from._internal_tol();
  uint64_t raw_tol;
  memcpy(&raw_tol, &tmp_tol, sizeof(tmp_tol));
  if (raw_tol != 0) {
    _internal_set_tol(from._internal_tol());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceptable_tol = from._internal_acceptable_tol();
  uint64_t raw_acceptable_tol;
  memcpy(&raw_acceptable_tol, &tmp_acceptable_tol, sizeof(tmp_acceptable_tol));
  if (raw_acceptable_tol != 0) {
    _internal_set_acceptable_tol(from._internal_acceptable_tol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FemPosDeviationSmootherConfig::CopyFrom(const FemPosDeviationSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.FemPosDeviationSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FemPosDeviationSmootherConfig::IsInitialized() const {
  return true;
}

void FemPosDeviationSmootherConfig::InternalSwap(FemPosDeviationSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FemPosDeviationSmootherConfig, acceptable_tol_)
      + sizeof(FemPosDeviationSmootherConfig::acceptable_tol_)
      - PROTOBUF_FIELD_OFFSET(FemPosDeviationSmootherConfig, weight_fem_pos_deviation_)>(
          reinterpret_cast<char*>(&weight_fem_pos_deviation_),
          reinterpret_cast<char*>(&other->weight_fem_pos_deviation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FemPosDeviationSmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fmath_2ffem_5fpos_5fdeviation_5fsmoother_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::planning::FemPosDeviationSmootherConfig* Arena::CreateMaybeMessage< ::autoagric::planning::FemPosDeviationSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::FemPosDeviationSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
