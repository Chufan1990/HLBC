// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/math/cos_theta_smoother_config.proto

#include "autoagric/planning/math/cos_theta_smoother_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace planning {
constexpr CosThetaSmootherConfig::CosThetaSmootherConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : weight_cos_included_angle_(0)
  , weight_anchor_points_(0)
  , weight_length_(0)
  , print_level_(0)
  , max_num_of_iterations_(0)
  , tol_(0)
  , acceptable_num_of_iterations_(0)
  , ipopt_use_automatic_differentiation_(false)
  , acceptable_tol_(0){}
struct CosThetaSmootherConfigDefaultTypeInternal {
  constexpr CosThetaSmootherConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CosThetaSmootherConfigDefaultTypeInternal() {}
  union {
    CosThetaSmootherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CosThetaSmootherConfigDefaultTypeInternal _CosThetaSmootherConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, weight_cos_included_angle_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, weight_anchor_points_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, weight_length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, print_level_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, max_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, acceptable_num_of_iterations_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, tol_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, acceptable_tol_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::CosThetaSmootherConfig, ipopt_use_automatic_differentiation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::planning::CosThetaSmootherConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_CosThetaSmootherConfig_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7autoagric/planning/math/cos_theta_smoo"
  "ther_config.proto\022\022autoagric.planning\"\234\002"
  "\n\026CosThetaSmootherConfig\022!\n\031weight_cos_i"
  "ncluded_angle\030\001 \001(\001\022\034\n\024weight_anchor_poi"
  "nts\030\002 \001(\001\022\025\n\rweight_length\030\003 \001(\001\022\023\n\013prin"
  "t_level\030\004 \001(\005\022\035\n\025max_num_of_iterations\030\005"
  " \001(\005\022$\n\034acceptable_num_of_iterations\030\006 \001"
  "(\005\022\013\n\003tol\030\007 \001(\001\022\026\n\016acceptable_tol\030\010 \001(\001\022"
  "+\n#ipopt_use_automatic_differentiation\030\t"
  " \001(\010b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto = {
  false, false, 372, descriptor_table_protodef_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto, "autoagric/planning/math/cos_theta_smoother_config.proto", 
  &descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto::offsets,
  file_level_metadata_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto, file_level_enum_descriptors_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto, file_level_service_descriptors_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_getter() {
  return &descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto(&descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto);
namespace autoagric {
namespace planning {

// ===================================================================

class CosThetaSmootherConfig::_Internal {
 public:
};

CosThetaSmootherConfig::CosThetaSmootherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.CosThetaSmootherConfig)
}
CosThetaSmootherConfig::CosThetaSmootherConfig(const CosThetaSmootherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&weight_cos_included_angle_, &from.weight_cos_included_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&weight_cos_included_angle_)) + sizeof(acceptable_tol_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.CosThetaSmootherConfig)
}

inline void CosThetaSmootherConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&weight_cos_included_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&acceptable_tol_) -
    reinterpret_cast<char*>(&weight_cos_included_angle_)) + sizeof(acceptable_tol_));
}

CosThetaSmootherConfig::~CosThetaSmootherConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.CosThetaSmootherConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CosThetaSmootherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CosThetaSmootherConfig::ArenaDtor(void* object) {
  CosThetaSmootherConfig* _this = reinterpret_cast< CosThetaSmootherConfig* >(object);
  (void)_this;
}
void CosThetaSmootherConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CosThetaSmootherConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CosThetaSmootherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.CosThetaSmootherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&weight_cos_included_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceptable_tol_) -
      reinterpret_cast<char*>(&weight_cos_included_angle_)) + sizeof(acceptable_tol_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CosThetaSmootherConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double weight_cos_included_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          weight_cos_included_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_anchor_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          weight_anchor_points_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double weight_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          weight_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 print_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          print_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_num_of_iterations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          max_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 acceptable_num_of_iterations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          acceptable_num_of_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double tol = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceptable_tol = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          acceptable_tol_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool ipopt_use_automatic_differentiation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ipopt_use_automatic_differentiation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CosThetaSmootherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.CosThetaSmootherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight_cos_included_angle = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_cos_included_angle = this->_internal_weight_cos_included_angle();
  uint64_t raw_weight_cos_included_angle;
  memcpy(&raw_weight_cos_included_angle, &tmp_weight_cos_included_angle, sizeof(tmp_weight_cos_included_angle));
  if (raw_weight_cos_included_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight_cos_included_angle(), target);
  }

  // double weight_anchor_points = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_anchor_points = this->_internal_weight_anchor_points();
  uint64_t raw_weight_anchor_points;
  memcpy(&raw_weight_anchor_points, &tmp_weight_anchor_points, sizeof(tmp_weight_anchor_points));
  if (raw_weight_anchor_points != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_weight_anchor_points(), target);
  }

  // double weight_length = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_length = this->_internal_weight_length();
  uint64_t raw_weight_length;
  memcpy(&raw_weight_length, &tmp_weight_length, sizeof(tmp_weight_length));
  if (raw_weight_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight_length(), target);
  }

  // int32 print_level = 4;
  if (this->_internal_print_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_print_level(), target);
  }

  // int32 max_num_of_iterations = 5;
  if (this->_internal_max_num_of_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_max_num_of_iterations(), target);
  }

  // int32 acceptable_num_of_iterations = 6;
  if (this->_internal_acceptable_num_of_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_acceptable_num_of_iterations(), target);
  }

  // double tol = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tol = this->_internal_tol();
  uint64_t raw_tol;
  memcpy(&raw_tol, &tmp_tol, sizeof(tmp_tol));
  if (raw_tol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_tol(), target);
  }

  // double acceptable_tol = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceptable_tol = this->_internal_acceptable_tol();
  uint64_t raw_acceptable_tol;
  memcpy(&raw_acceptable_tol, &tmp_acceptable_tol, sizeof(tmp_acceptable_tol));
  if (raw_acceptable_tol != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_acceptable_tol(), target);
  }

  // bool ipopt_use_automatic_differentiation = 9;
  if (this->_internal_ipopt_use_automatic_differentiation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_ipopt_use_automatic_differentiation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.CosThetaSmootherConfig)
  return target;
}

size_t CosThetaSmootherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.CosThetaSmootherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight_cos_included_angle = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_cos_included_angle = this->_internal_weight_cos_included_angle();
  uint64_t raw_weight_cos_included_angle;
  memcpy(&raw_weight_cos_included_angle, &tmp_weight_cos_included_angle, sizeof(tmp_weight_cos_included_angle));
  if (raw_weight_cos_included_angle != 0) {
    total_size += 1 + 8;
  }

  // double weight_anchor_points = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_anchor_points = this->_internal_weight_anchor_points();
  uint64_t raw_weight_anchor_points;
  memcpy(&raw_weight_anchor_points, &tmp_weight_anchor_points, sizeof(tmp_weight_anchor_points));
  if (raw_weight_anchor_points != 0) {
    total_size += 1 + 8;
  }

  // double weight_length = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_length = this->_internal_weight_length();
  uint64_t raw_weight_length;
  memcpy(&raw_weight_length, &tmp_weight_length, sizeof(tmp_weight_length));
  if (raw_weight_length != 0) {
    total_size += 1 + 8;
  }

  // int32 print_level = 4;
  if (this->_internal_print_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_print_level());
  }

  // int32 max_num_of_iterations = 5;
  if (this->_internal_max_num_of_iterations() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_num_of_iterations());
  }

  // double tol = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tol = this->_internal_tol();
  uint64_t raw_tol;
  memcpy(&raw_tol, &tmp_tol, sizeof(tmp_tol));
  if (raw_tol != 0) {
    total_size += 1 + 8;
  }

  // int32 acceptable_num_of_iterations = 6;
  if (this->_internal_acceptable_num_of_iterations() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_acceptable_num_of_iterations());
  }

  // bool ipopt_use_automatic_differentiation = 9;
  if (this->_internal_ipopt_use_automatic_differentiation() != 0) {
    total_size += 1 + 1;
  }

  // double acceptable_tol = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceptable_tol = this->_internal_acceptable_tol();
  uint64_t raw_acceptable_tol;
  memcpy(&raw_acceptable_tol, &tmp_acceptable_tol, sizeof(tmp_acceptable_tol));
  if (raw_acceptable_tol != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CosThetaSmootherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CosThetaSmootherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CosThetaSmootherConfig::GetClassData() const { return &_class_data_; }

void CosThetaSmootherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CosThetaSmootherConfig *>(to)->MergeFrom(
      static_cast<const CosThetaSmootherConfig &>(from));
}


void CosThetaSmootherConfig::MergeFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.CosThetaSmootherConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_cos_included_angle = from._internal_weight_cos_included_angle();
  uint64_t raw_weight_cos_included_angle;
  memcpy(&raw_weight_cos_included_angle, &tmp_weight_cos_included_angle, sizeof(tmp_weight_cos_included_angle));
  if (raw_weight_cos_included_angle != 0) {
    _internal_set_weight_cos_included_angle(from._internal_weight_cos_included_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_anchor_points = from._internal_weight_anchor_points();
  uint64_t raw_weight_anchor_points;
  memcpy(&raw_weight_anchor_points, &tmp_weight_anchor_points, sizeof(tmp_weight_anchor_points));
  if (raw_weight_anchor_points != 0) {
    _internal_set_weight_anchor_points(from._internal_weight_anchor_points());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight_length = from._internal_weight_length();
  uint64_t raw_weight_length;
  memcpy(&raw_weight_length, &tmp_weight_length, sizeof(tmp_weight_length));
  if (raw_weight_length != 0) {
    _internal_set_weight_length(from._internal_weight_length());
  }
  if (from._internal_print_level() != 0) {
    _internal_set_print_level(from._internal_print_level());
  }
  if (from._internal_max_num_of_iterations() != 0) {
    _internal_set_max_num_of_iterations(from._internal_max_num_of_iterations());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tol = from._internal_tol();
  uint64_t raw_tol;
  memcpy(&raw_tol, &tmp_tol, sizeof(tmp_tol));
  if (raw_tol != 0) {
    _internal_set_tol(from._internal_tol());
  }
  if (from._internal_acceptable_num_of_iterations() != 0) {
    _internal_set_acceptable_num_of_iterations(from._internal_acceptable_num_of_iterations());
  }
  if (from._internal_ipopt_use_automatic_differentiation() != 0) {
    _internal_set_ipopt_use_automatic_differentiation(from._internal_ipopt_use_automatic_differentiation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceptable_tol = from._internal_acceptable_tol();
  uint64_t raw_acceptable_tol;
  memcpy(&raw_acceptable_tol, &tmp_acceptable_tol, sizeof(tmp_acceptable_tol));
  if (raw_acceptable_tol != 0) {
    _internal_set_acceptable_tol(from._internal_acceptable_tol());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CosThetaSmootherConfig::CopyFrom(const CosThetaSmootherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.CosThetaSmootherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CosThetaSmootherConfig::IsInitialized() const {
  return true;
}

void CosThetaSmootherConfig::InternalSwap(CosThetaSmootherConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CosThetaSmootherConfig, acceptable_tol_)
      + sizeof(CosThetaSmootherConfig::acceptable_tol_)
      - PROTOBUF_FIELD_OFFSET(CosThetaSmootherConfig, weight_cos_included_angle_)>(
          reinterpret_cast<char*>(&weight_cos_included_angle_),
          reinterpret_cast<char*>(&other->weight_cos_included_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CosThetaSmootherConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fmath_2fcos_5ftheta_5fsmoother_5fconfig_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::planning::CosThetaSmootherConfig* Arena::CreateMaybeMessage< ::autoagric::planning::CosThetaSmootherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::CosThetaSmootherConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
