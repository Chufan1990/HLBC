// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/planning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fplanning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fplanning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/common/header.pb.h"
#include "autoagric/common/pnc_point.pb.h"
#include "autoagric/canbus/chassis.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fplanning_2fplanning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fplanning_2fplanning_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fplanning_2eproto;
namespace autoagric {
namespace planning {
class ADCTrajectory;
struct ADCTrajectoryDefaultTypeInternal;
extern ADCTrajectoryDefaultTypeInternal _ADCTrajectory_default_instance_;
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::planning::ADCTrajectory* Arena::CreateMaybeMessage<::autoagric::planning::ADCTrajectory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace planning {

enum ADCTrajectory_RightOfWayStatus : int {
  ADCTrajectory_RightOfWayStatus_UNPROTECTED = 0,
  ADCTrajectory_RightOfWayStatus_PROTECTED = 1,
  ADCTrajectory_RightOfWayStatus_ADCTrajectory_RightOfWayStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ADCTrajectory_RightOfWayStatus_ADCTrajectory_RightOfWayStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ADCTrajectory_RightOfWayStatus_IsValid(int value);
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN = ADCTrajectory_RightOfWayStatus_UNPROTECTED;
constexpr ADCTrajectory_RightOfWayStatus ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX = ADCTrajectory_RightOfWayStatus_PROTECTED;
constexpr int ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE = ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_RightOfWayStatus_descriptor();
template<typename T>
inline const std::string& ADCTrajectory_RightOfWayStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADCTrajectory_RightOfWayStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADCTrajectory_RightOfWayStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADCTrajectory_RightOfWayStatus_descriptor(), enum_t_value);
}
inline bool ADCTrajectory_RightOfWayStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ADCTrajectory_RightOfWayStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADCTrajectory_RightOfWayStatus>(
    ADCTrajectory_RightOfWayStatus_descriptor(), name, value);
}
enum ADCTrajectory_TrajectoryType : int {
  ADCTrajectory_TrajectoryType_UNKNOWN = 0,
  ADCTrajectory_TrajectoryType_NORMAL = 1,
  ADCTrajectory_TrajectoryType_PATH_FALLBACK = 2,
  ADCTrajectory_TrajectoryType_SPEED_FALLBACK = 3,
  ADCTrajectory_TrajectoryType_PATH_REUSED = 4,
  ADCTrajectory_TrajectoryType_ADCTrajectory_TrajectoryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ADCTrajectory_TrajectoryType_ADCTrajectory_TrajectoryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ADCTrajectory_TrajectoryType_IsValid(int value);
constexpr ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MIN = ADCTrajectory_TrajectoryType_UNKNOWN;
constexpr ADCTrajectory_TrajectoryType ADCTrajectory_TrajectoryType_TrajectoryType_MAX = ADCTrajectory_TrajectoryType_PATH_REUSED;
constexpr int ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE = ADCTrajectory_TrajectoryType_TrajectoryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ADCTrajectory_TrajectoryType_descriptor();
template<typename T>
inline const std::string& ADCTrajectory_TrajectoryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ADCTrajectory_TrajectoryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ADCTrajectory_TrajectoryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ADCTrajectory_TrajectoryType_descriptor(), enum_t_value);
}
inline bool ADCTrajectory_TrajectoryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ADCTrajectory_TrajectoryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ADCTrajectory_TrajectoryType>(
    ADCTrajectory_TrajectoryType_descriptor(), name, value);
}
// ===================================================================

class ADCTrajectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.ADCTrajectory) */ {
 public:
  inline ADCTrajectory() : ADCTrajectory(nullptr) {}
  ~ADCTrajectory() override;
  explicit constexpr ADCTrajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ADCTrajectory(const ADCTrajectory& from);
  ADCTrajectory(ADCTrajectory&& from) noexcept
    : ADCTrajectory() {
    *this = ::std::move(from);
  }

  inline ADCTrajectory& operator=(const ADCTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ADCTrajectory& operator=(ADCTrajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ADCTrajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const ADCTrajectory* internal_default_instance() {
    return reinterpret_cast<const ADCTrajectory*>(
               &_ADCTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ADCTrajectory& a, ADCTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(ADCTrajectory* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ADCTrajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ADCTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ADCTrajectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ADCTrajectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ADCTrajectory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ADCTrajectory* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.ADCTrajectory";
  }
  protected:
  explicit ADCTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ADCTrajectory_RightOfWayStatus RightOfWayStatus;
  static constexpr RightOfWayStatus UNPROTECTED =
    ADCTrajectory_RightOfWayStatus_UNPROTECTED;
  static constexpr RightOfWayStatus PROTECTED =
    ADCTrajectory_RightOfWayStatus_PROTECTED;
  static inline bool RightOfWayStatus_IsValid(int value) {
    return ADCTrajectory_RightOfWayStatus_IsValid(value);
  }
  static constexpr RightOfWayStatus RightOfWayStatus_MIN =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MIN;
  static constexpr RightOfWayStatus RightOfWayStatus_MAX =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_MAX;
  static constexpr int RightOfWayStatus_ARRAYSIZE =
    ADCTrajectory_RightOfWayStatus_RightOfWayStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RightOfWayStatus_descriptor() {
    return ADCTrajectory_RightOfWayStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& RightOfWayStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RightOfWayStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RightOfWayStatus_Name.");
    return ADCTrajectory_RightOfWayStatus_Name(enum_t_value);
  }
  static inline bool RightOfWayStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RightOfWayStatus* value) {
    return ADCTrajectory_RightOfWayStatus_Parse(name, value);
  }

  typedef ADCTrajectory_TrajectoryType TrajectoryType;
  static constexpr TrajectoryType UNKNOWN =
    ADCTrajectory_TrajectoryType_UNKNOWN;
  static constexpr TrajectoryType NORMAL =
    ADCTrajectory_TrajectoryType_NORMAL;
  static constexpr TrajectoryType PATH_FALLBACK =
    ADCTrajectory_TrajectoryType_PATH_FALLBACK;
  static constexpr TrajectoryType SPEED_FALLBACK =
    ADCTrajectory_TrajectoryType_SPEED_FALLBACK;
  static constexpr TrajectoryType PATH_REUSED =
    ADCTrajectory_TrajectoryType_PATH_REUSED;
  static inline bool TrajectoryType_IsValid(int value) {
    return ADCTrajectory_TrajectoryType_IsValid(value);
  }
  static constexpr TrajectoryType TrajectoryType_MIN =
    ADCTrajectory_TrajectoryType_TrajectoryType_MIN;
  static constexpr TrajectoryType TrajectoryType_MAX =
    ADCTrajectory_TrajectoryType_TrajectoryType_MAX;
  static constexpr int TrajectoryType_ARRAYSIZE =
    ADCTrajectory_TrajectoryType_TrajectoryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrajectoryType_descriptor() {
    return ADCTrajectory_TrajectoryType_descriptor();
  }
  template<typename T>
  static inline const std::string& TrajectoryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrajectoryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrajectoryType_Name.");
    return ADCTrajectory_TrajectoryType_Name(enum_t_value);
  }
  static inline bool TrajectoryType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrajectoryType* value) {
    return ADCTrajectory_TrajectoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 12,
    kPathPointFieldNumber = 13,
    kReplanReasonFieldNumber = 22,
    kHeaderFieldNumber = 1,
    kRoutingHeaderFieldNumber = 16,
    kTotalPathLengthFieldNumber = 2,
    kTotalPathTimeFieldNumber = 3,
    kGearFieldNumber = 10,
    kIsReplanFieldNumber = 9,
    kCarInDeadEndFieldNumber = 24,
    kRightOfWayStatusFieldNumber = 17,
    kTrajectoryTypeFieldNumber = 21,
  };
  // repeated .autoagric.common.TrajectoryPoint trajectory_point = 12;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::autoagric::common::TrajectoryPoint* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::TrajectoryPoint >*
      mutable_trajectory_point();
  private:
  const ::autoagric::common::TrajectoryPoint& _internal_trajectory_point(int index) const;
  ::autoagric::common::TrajectoryPoint* _internal_add_trajectory_point();
  public:
  const ::autoagric::common::TrajectoryPoint& trajectory_point(int index) const;
  ::autoagric::common::TrajectoryPoint* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::TrajectoryPoint >&
      trajectory_point() const;

  // repeated .autoagric.common.PathPoint path_point = 13;
  int path_point_size() const;
  private:
  int _internal_path_point_size() const;
  public:
  void clear_path_point();
  ::autoagric::common::PathPoint* mutable_path_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::PathPoint >*
      mutable_path_point();
  private:
  const ::autoagric::common::PathPoint& _internal_path_point(int index) const;
  ::autoagric::common::PathPoint* _internal_add_path_point();
  public:
  const ::autoagric::common::PathPoint& path_point(int index) const;
  ::autoagric::common::PathPoint* add_path_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::PathPoint >&
      path_point() const;

  // string replan_reason = 22;
  void clear_replan_reason();
  const std::string& replan_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_replan_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_replan_reason();
  PROTOBUF_NODISCARD std::string* release_replan_reason();
  void set_allocated_replan_reason(std::string* replan_reason);
  private:
  const std::string& _internal_replan_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_replan_reason(const std::string& value);
  std::string* _internal_mutable_replan_reason();
  public:

  // .autoagric.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::autoagric::common::Header& header() const;
  PROTOBUF_NODISCARD ::autoagric::common::Header* release_header();
  ::autoagric::common::Header* mutable_header();
  void set_allocated_header(::autoagric::common::Header* header);
  private:
  const ::autoagric::common::Header& _internal_header() const;
  ::autoagric::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::autoagric::common::Header* header);
  ::autoagric::common::Header* unsafe_arena_release_header();

  // .autoagric.common.Header routing_header = 16;
  bool has_routing_header() const;
  private:
  bool _internal_has_routing_header() const;
  public:
  void clear_routing_header();
  const ::autoagric::common::Header& routing_header() const;
  PROTOBUF_NODISCARD ::autoagric::common::Header* release_routing_header();
  ::autoagric::common::Header* mutable_routing_header();
  void set_allocated_routing_header(::autoagric::common::Header* routing_header);
  private:
  const ::autoagric::common::Header& _internal_routing_header() const;
  ::autoagric::common::Header* _internal_mutable_routing_header();
  public:
  void unsafe_arena_set_allocated_routing_header(
      ::autoagric::common::Header* routing_header);
  ::autoagric::common::Header* unsafe_arena_release_routing_header();

  // double total_path_length = 2;
  void clear_total_path_length();
  double total_path_length() const;
  void set_total_path_length(double value);
  private:
  double _internal_total_path_length() const;
  void _internal_set_total_path_length(double value);
  public:

  // double total_path_time = 3;
  void clear_total_path_time();
  double total_path_time() const;
  void set_total_path_time(double value);
  private:
  double _internal_total_path_time() const;
  void _internal_set_total_path_time(double value);
  public:

  // .autoagric.canbus.Chassis.GearPosition gear = 10;
  void clear_gear();
  ::autoagric::canbus::Chassis_GearPosition gear() const;
  void set_gear(::autoagric::canbus::Chassis_GearPosition value);
  private:
  ::autoagric::canbus::Chassis_GearPosition _internal_gear() const;
  void _internal_set_gear(::autoagric::canbus::Chassis_GearPosition value);
  public:

  // bool is_replan = 9;
  void clear_is_replan();
  bool is_replan() const;
  void set_is_replan(bool value);
  private:
  bool _internal_is_replan() const;
  void _internal_set_is_replan(bool value);
  public:

  // bool car_in_dead_end = 24;
  void clear_car_in_dead_end();
  bool car_in_dead_end() const;
  void set_car_in_dead_end(bool value);
  private:
  bool _internal_car_in_dead_end() const;
  void _internal_set_car_in_dead_end(bool value);
  public:

  // .autoagric.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
  void clear_right_of_way_status();
  ::autoagric::planning::ADCTrajectory_RightOfWayStatus right_of_way_status() const;
  void set_right_of_way_status(::autoagric::planning::ADCTrajectory_RightOfWayStatus value);
  private:
  ::autoagric::planning::ADCTrajectory_RightOfWayStatus _internal_right_of_way_status() const;
  void _internal_set_right_of_way_status(::autoagric::planning::ADCTrajectory_RightOfWayStatus value);
  public:

  // .autoagric.planning.ADCTrajectory.TrajectoryType trajectory_type = 21;
  void clear_trajectory_type();
  ::autoagric::planning::ADCTrajectory_TrajectoryType trajectory_type() const;
  void set_trajectory_type(::autoagric::planning::ADCTrajectory_TrajectoryType value);
  private:
  ::autoagric::planning::ADCTrajectory_TrajectoryType _internal_trajectory_type() const;
  void _internal_set_trajectory_type(::autoagric::planning::ADCTrajectory_TrajectoryType value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.ADCTrajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::TrajectoryPoint > trajectory_point_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::PathPoint > path_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr replan_reason_;
  ::autoagric::common::Header* header_;
  ::autoagric::common::Header* routing_header_;
  double total_path_length_;
  double total_path_time_;
  int gear_;
  bool is_replan_;
  bool car_in_dead_end_;
  int right_of_way_status_;
  int trajectory_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fplanning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ADCTrajectory

// .autoagric.common.Header header = 1;
inline bool ADCTrajectory::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ADCTrajectory::has_header() const {
  return _internal_has_header();
}
inline const ::autoagric::common::Header& ADCTrajectory::_internal_header() const {
  const ::autoagric::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::common::Header&>(
      ::autoagric::common::_Header_default_instance_);
}
inline const ::autoagric::common::Header& ADCTrajectory::header() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.header)
  return _internal_header();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_header(
    ::autoagric::common::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.planning.ADCTrajectory.header)
}
inline ::autoagric::common::Header* ADCTrajectory::release_header() {
  
  ::autoagric::common::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::common::Header* ADCTrajectory::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:autoagric.planning.ADCTrajectory.header)
  
  ::autoagric::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::autoagric::common::Header* ADCTrajectory::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::common::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::autoagric::common::Header* ADCTrajectory::mutable_header() {
  ::autoagric::common::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:autoagric.planning.ADCTrajectory.header)
  return _msg;
}
inline void ADCTrajectory::set_allocated_header(::autoagric::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.ADCTrajectory.header)
}

// double total_path_length = 2;
inline void ADCTrajectory::clear_total_path_length() {
  total_path_length_ = 0;
}
inline double ADCTrajectory::_internal_total_path_length() const {
  return total_path_length_;
}
inline double ADCTrajectory::total_path_length() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.total_path_length)
  return _internal_total_path_length();
}
inline void ADCTrajectory::_internal_set_total_path_length(double value) {
  
  total_path_length_ = value;
}
inline void ADCTrajectory::set_total_path_length(double value) {
  _internal_set_total_path_length(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.total_path_length)
}

// double total_path_time = 3;
inline void ADCTrajectory::clear_total_path_time() {
  total_path_time_ = 0;
}
inline double ADCTrajectory::_internal_total_path_time() const {
  return total_path_time_;
}
inline double ADCTrajectory::total_path_time() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.total_path_time)
  return _internal_total_path_time();
}
inline void ADCTrajectory::_internal_set_total_path_time(double value) {
  
  total_path_time_ = value;
}
inline void ADCTrajectory::set_total_path_time(double value) {
  _internal_set_total_path_time(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.total_path_time)
}

// bool is_replan = 9;
inline void ADCTrajectory::clear_is_replan() {
  is_replan_ = false;
}
inline bool ADCTrajectory::_internal_is_replan() const {
  return is_replan_;
}
inline bool ADCTrajectory::is_replan() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.is_replan)
  return _internal_is_replan();
}
inline void ADCTrajectory::_internal_set_is_replan(bool value) {
  
  is_replan_ = value;
}
inline void ADCTrajectory::set_is_replan(bool value) {
  _internal_set_is_replan(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.is_replan)
}

// .autoagric.canbus.Chassis.GearPosition gear = 10;
inline void ADCTrajectory::clear_gear() {
  gear_ = 0;
}
inline ::autoagric::canbus::Chassis_GearPosition ADCTrajectory::_internal_gear() const {
  return static_cast< ::autoagric::canbus::Chassis_GearPosition >(gear_);
}
inline ::autoagric::canbus::Chassis_GearPosition ADCTrajectory::gear() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.gear)
  return _internal_gear();
}
inline void ADCTrajectory::_internal_set_gear(::autoagric::canbus::Chassis_GearPosition value) {
  
  gear_ = value;
}
inline void ADCTrajectory::set_gear(::autoagric::canbus::Chassis_GearPosition value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.gear)
}

// repeated .autoagric.common.TrajectoryPoint trajectory_point = 12;
inline int ADCTrajectory::_internal_trajectory_point_size() const {
  return trajectory_point_.size();
}
inline int ADCTrajectory::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::autoagric::common::TrajectoryPoint* ADCTrajectory::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:autoagric.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::TrajectoryPoint >*
ADCTrajectory::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.planning.ADCTrajectory.trajectory_point)
  return &trajectory_point_;
}
inline const ::autoagric::common::TrajectoryPoint& ADCTrajectory::_internal_trajectory_point(int index) const {
  return trajectory_point_.Get(index);
}
inline const ::autoagric::common::TrajectoryPoint& ADCTrajectory::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::autoagric::common::TrajectoryPoint* ADCTrajectory::_internal_add_trajectory_point() {
  return trajectory_point_.Add();
}
inline ::autoagric::common::TrajectoryPoint* ADCTrajectory::add_trajectory_point() {
  ::autoagric::common::TrajectoryPoint* _add = _internal_add_trajectory_point();
  // @@protoc_insertion_point(field_add:autoagric.planning.ADCTrajectory.trajectory_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::TrajectoryPoint >&
ADCTrajectory::trajectory_point() const {
  // @@protoc_insertion_point(field_list:autoagric.planning.ADCTrajectory.trajectory_point)
  return trajectory_point_;
}

// repeated .autoagric.common.PathPoint path_point = 13;
inline int ADCTrajectory::_internal_path_point_size() const {
  return path_point_.size();
}
inline int ADCTrajectory::path_point_size() const {
  return _internal_path_point_size();
}
inline ::autoagric::common::PathPoint* ADCTrajectory::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:autoagric.planning.ADCTrajectory.path_point)
  return path_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::PathPoint >*
ADCTrajectory::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:autoagric.planning.ADCTrajectory.path_point)
  return &path_point_;
}
inline const ::autoagric::common::PathPoint& ADCTrajectory::_internal_path_point(int index) const {
  return path_point_.Get(index);
}
inline const ::autoagric::common::PathPoint& ADCTrajectory::path_point(int index) const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.path_point)
  return _internal_path_point(index);
}
inline ::autoagric::common::PathPoint* ADCTrajectory::_internal_add_path_point() {
  return path_point_.Add();
}
inline ::autoagric::common::PathPoint* ADCTrajectory::add_path_point() {
  ::autoagric::common::PathPoint* _add = _internal_add_path_point();
  // @@protoc_insertion_point(field_add:autoagric.planning.ADCTrajectory.path_point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autoagric::common::PathPoint >&
ADCTrajectory::path_point() const {
  // @@protoc_insertion_point(field_list:autoagric.planning.ADCTrajectory.path_point)
  return path_point_;
}

// .autoagric.common.Header routing_header = 16;
inline bool ADCTrajectory::_internal_has_routing_header() const {
  return this != internal_default_instance() && routing_header_ != nullptr;
}
inline bool ADCTrajectory::has_routing_header() const {
  return _internal_has_routing_header();
}
inline const ::autoagric::common::Header& ADCTrajectory::_internal_routing_header() const {
  const ::autoagric::common::Header* p = routing_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::common::Header&>(
      ::autoagric::common::_Header_default_instance_);
}
inline const ::autoagric::common::Header& ADCTrajectory::routing_header() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.routing_header)
  return _internal_routing_header();
}
inline void ADCTrajectory::unsafe_arena_set_allocated_routing_header(
    ::autoagric::common::Header* routing_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_header_);
  }
  routing_header_ = routing_header;
  if (routing_header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.planning.ADCTrajectory.routing_header)
}
inline ::autoagric::common::Header* ADCTrajectory::release_routing_header() {
  
  ::autoagric::common::Header* temp = routing_header_;
  routing_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::common::Header* ADCTrajectory::unsafe_arena_release_routing_header() {
  // @@protoc_insertion_point(field_release:autoagric.planning.ADCTrajectory.routing_header)
  
  ::autoagric::common::Header* temp = routing_header_;
  routing_header_ = nullptr;
  return temp;
}
inline ::autoagric::common::Header* ADCTrajectory::_internal_mutable_routing_header() {
  
  if (routing_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::common::Header>(GetArenaForAllocation());
    routing_header_ = p;
  }
  return routing_header_;
}
inline ::autoagric::common::Header* ADCTrajectory::mutable_routing_header() {
  ::autoagric::common::Header* _msg = _internal_mutable_routing_header();
  // @@protoc_insertion_point(field_mutable:autoagric.planning.ADCTrajectory.routing_header)
  return _msg;
}
inline void ADCTrajectory::set_allocated_routing_header(::autoagric::common::Header* routing_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_header_);
  }
  if (routing_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_header));
    if (message_arena != submessage_arena) {
      routing_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_header, submessage_arena);
    }
    
  } else {
    
  }
  routing_header_ = routing_header;
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.ADCTrajectory.routing_header)
}

// .autoagric.planning.ADCTrajectory.RightOfWayStatus right_of_way_status = 17;
inline void ADCTrajectory::clear_right_of_way_status() {
  right_of_way_status_ = 0;
}
inline ::autoagric::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::_internal_right_of_way_status() const {
  return static_cast< ::autoagric::planning::ADCTrajectory_RightOfWayStatus >(right_of_way_status_);
}
inline ::autoagric::planning::ADCTrajectory_RightOfWayStatus ADCTrajectory::right_of_way_status() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.right_of_way_status)
  return _internal_right_of_way_status();
}
inline void ADCTrajectory::_internal_set_right_of_way_status(::autoagric::planning::ADCTrajectory_RightOfWayStatus value) {
  
  right_of_way_status_ = value;
}
inline void ADCTrajectory::set_right_of_way_status(::autoagric::planning::ADCTrajectory_RightOfWayStatus value) {
  _internal_set_right_of_way_status(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.right_of_way_status)
}

// .autoagric.planning.ADCTrajectory.TrajectoryType trajectory_type = 21;
inline void ADCTrajectory::clear_trajectory_type() {
  trajectory_type_ = 0;
}
inline ::autoagric::planning::ADCTrajectory_TrajectoryType ADCTrajectory::_internal_trajectory_type() const {
  return static_cast< ::autoagric::planning::ADCTrajectory_TrajectoryType >(trajectory_type_);
}
inline ::autoagric::planning::ADCTrajectory_TrajectoryType ADCTrajectory::trajectory_type() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.trajectory_type)
  return _internal_trajectory_type();
}
inline void ADCTrajectory::_internal_set_trajectory_type(::autoagric::planning::ADCTrajectory_TrajectoryType value) {
  
  trajectory_type_ = value;
}
inline void ADCTrajectory::set_trajectory_type(::autoagric::planning::ADCTrajectory_TrajectoryType value) {
  _internal_set_trajectory_type(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.trajectory_type)
}

// string replan_reason = 22;
inline void ADCTrajectory::clear_replan_reason() {
  replan_reason_.ClearToEmpty();
}
inline const std::string& ADCTrajectory::replan_reason() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.replan_reason)
  return _internal_replan_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ADCTrajectory::set_replan_reason(ArgT0&& arg0, ArgT... args) {
 
 replan_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.replan_reason)
}
inline std::string* ADCTrajectory::mutable_replan_reason() {
  std::string* _s = _internal_mutable_replan_reason();
  // @@protoc_insertion_point(field_mutable:autoagric.planning.ADCTrajectory.replan_reason)
  return _s;
}
inline const std::string& ADCTrajectory::_internal_replan_reason() const {
  return replan_reason_.Get();
}
inline void ADCTrajectory::_internal_set_replan_reason(const std::string& value) {
  
  replan_reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ADCTrajectory::_internal_mutable_replan_reason() {
  
  return replan_reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ADCTrajectory::release_replan_reason() {
  // @@protoc_insertion_point(field_release:autoagric.planning.ADCTrajectory.replan_reason)
  return replan_reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ADCTrajectory::set_allocated_replan_reason(std::string* replan_reason) {
  if (replan_reason != nullptr) {
    
  } else {
    
  }
  replan_reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), replan_reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (replan_reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    replan_reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.ADCTrajectory.replan_reason)
}

// bool car_in_dead_end = 24;
inline void ADCTrajectory::clear_car_in_dead_end() {
  car_in_dead_end_ = false;
}
inline bool ADCTrajectory::_internal_car_in_dead_end() const {
  return car_in_dead_end_;
}
inline bool ADCTrajectory::car_in_dead_end() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ADCTrajectory.car_in_dead_end)
  return _internal_car_in_dead_end();
}
inline void ADCTrajectory::_internal_set_car_in_dead_end(bool value) {
  
  car_in_dead_end_ = value;
}
inline void ADCTrajectory::set_car_in_dead_end(bool value) {
  _internal_set_car_in_dead_end(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ADCTrajectory.car_in_dead_end)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace autoagric

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autoagric::planning::ADCTrajectory_RightOfWayStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::planning::ADCTrajectory_RightOfWayStatus>() {
  return ::autoagric::planning::ADCTrajectory_RightOfWayStatus_descriptor();
}
template <> struct is_proto_enum< ::autoagric::planning::ADCTrajectory_TrajectoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::planning::ADCTrajectory_TrajectoryType>() {
  return ::autoagric::planning::ADCTrajectory_TrajectoryType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fplanning_2eproto
