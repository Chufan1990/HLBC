// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/planner_open_space_config.proto

#include "autoagric/planning/planner_open_space_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace planning {
constexpr PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roi_config_(nullptr)
  , warm_start_config_(nullptr)
  , is_near_destination_threshold_(0)
  , delta_t_(0)
  , enable_check_parallel_trajectory_(false)
  , enable_linear_interpolation_(false)
  , is_near_destination_theta_threshold_(0){}
struct PlannerOpenSpaceConfigDefaultTypeInternal {
  constexpr PlannerOpenSpaceConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlannerOpenSpaceConfigDefaultTypeInternal() {}
  union {
    PlannerOpenSpaceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlannerOpenSpaceConfigDefaultTypeInternal _PlannerOpenSpaceConfig_default_instance_;
constexpr ROIConfig::ROIConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roi_longitudinal_range_start_(0)
  , roi_longitudinal_range_end_(0)
  , parking_start_range_(0)
  , parking_inwards_(false){}
struct ROIConfigDefaultTypeInternal {
  constexpr ROIConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ROIConfigDefaultTypeInternal() {}
  union {
    ROIConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ROIConfigDefaultTypeInternal _ROIConfig_default_instance_;
constexpr WarmStartConfig::WarmStartConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : s_curve_config_(nullptr)
  , xy_grid_resolution_(0)
  , phi_grid_resolution_(0)
  , next_node_num_(uint64_t{0u})
  , step_size_(0)
  , traj_forward_penalty_(0)
  , traj_backward_penalty_(0)
  , traj_gear_switch_penalty_(0)
  , traj_steer_penalty_(0)
  , traj_steer_change_penalty_(0)
  , grid_a_star_xy_resolution_(0)
  , node_radius_(0){}
struct WarmStartConfigDefaultTypeInternal {
  constexpr WarmStartConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WarmStartConfigDefaultTypeInternal() {}
  union {
    WarmStartConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WarmStartConfigDefaultTypeInternal _WarmStartConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, roi_config_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, warm_start_config_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, delta_t_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, is_near_destination_threshold_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, enable_check_parallel_trajectory_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, enable_linear_interpolation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::PlannerOpenSpaceConfig, is_near_destination_theta_threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ROIConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ROIConfig, roi_longitudinal_range_start_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ROIConfig, roi_longitudinal_range_end_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ROIConfig, parking_start_range_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::ROIConfig, parking_inwards_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, xy_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, phi_grid_resolution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, next_node_num_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, step_size_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, traj_forward_penalty_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, traj_backward_penalty_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, traj_gear_switch_penalty_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, traj_steer_penalty_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, traj_steer_change_penalty_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, grid_a_star_xy_resolution_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, node_radius_),
  PROTOBUF_FIELD_OFFSET(::autoagric::planning::WarmStartConfig, s_curve_config_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::planning::PlannerOpenSpaceConfig)},
  { 13, -1, -1, sizeof(::autoagric::planning::ROIConfig)},
  { 23, -1, -1, sizeof(::autoagric::planning::WarmStartConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_PlannerOpenSpaceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_ROIConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::planning::_WarmStartConfig_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2autoagric/planning/planner_open_space_"
  "config.proto\022\022autoagric.planning\032$autoag"
  "ric/planning/task_config.proto\"\277\002\n\026Plann"
  "erOpenSpaceConfig\0221\n\nroi_config\030\001 \001(\0132\035."
  "autoagric.planning.ROIConfig\022>\n\021warm_sta"
  "rt_config\030\002 \001(\0132#.autoagric.planning.War"
  "mStartConfig\022\017\n\007delta_t\030\007 \001(\002\022%\n\035is_near"
  "_destination_threshold\030\010 \001(\001\022(\n enable_c"
  "heck_parallel_trajectory\030\t \001(\010\022#\n\033enable"
  "_linear_interpolation\030\n \001(\010\022+\n#is_near_d"
  "estination_theta_threshold\030\013 \001(\001\"\213\001\n\tROI"
  "Config\022$\n\034roi_longitudinal_range_start\030\001"
  " \001(\001\022\"\n\032roi_longitudinal_range_end\030\002 \001(\001"
  "\022\033\n\023parking_start_range\030\003 \001(\001\022\027\n\017parking"
  "_inwards\030\004 \001(\010\"\231\003\n\017WarmStartConfig\022\032\n\022xy"
  "_grid_resolution\030\001 \001(\001\022\033\n\023phi_grid_resol"
  "ution\030\002 \001(\001\022\025\n\rnext_node_num\030\003 \001(\004\022\021\n\tst"
  "ep_size\030\004 \001(\001\022\034\n\024traj_forward_penalty\030\005 "
  "\001(\001\022\035\n\025traj_backward_penalty\030\006 \001(\001\022 \n\030tr"
  "aj_gear_switch_penalty\030\007 \001(\001\022\032\n\022traj_ste"
  "er_penalty\030\010 \001(\001\022!\n\031traj_steer_change_pe"
  "nalty\030\t \001(\001\022!\n\031grid_a_star_xy_resolution"
  "\030\017 \001(\001\022\023\n\013node_radius\030\020 \001(\001\022M\n\016s_curve_c"
  "onfig\030\021 \001(\01325.autoagric.planning.Piecewi"
  "seJerkSpeedOptimizerConfig*J\n\016DualWarmUp"
  "Mode\022\t\n\005IPOPT\020\000\022\013\n\007IPOPTQP\020\001\022\010\n\004OSQP\020\002\022\t"
  "\n\005DEBUG\020\003\022\013\n\007SLACKQP\020\004*\367\001\n\024DistanceAppro"
  "achMode\022\033\n\027DISTANCE_APPROACH_IPOPT\020\000\022 \n\034"
  "DISTANCE_APPROACH_IPOPT_CUDA\020\001\022$\n DISTAN"
  "CE_APPROACH_IPOPT_FIXED_TS\020\002\022&\n\"DISTANCE"
  "_APPROACH_IPOPT_FIXED_DUAL\020\003\022%\n!DISTANCE"
  "_APPROACH_IPOPT_RELAX_END\020\004\022+\n\'DISTANCE_"
  "APPROACH_IPOPT_RELAX_END_SLACK\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_autoagric_2fplanning_2ftask_5fconfig_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto = {
  false, false, 1320, descriptor_table_protodef_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto, "autoagric/planning/planner_open_space_config.proto", 
  &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_once, descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto::offsets,
  file_level_metadata_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto, file_level_enum_descriptors_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto, file_level_service_descriptors_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter() {
  return &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto(&descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto);
namespace autoagric {
namespace planning {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualWarmUpMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto);
  return file_level_enum_descriptors_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[0];
}
bool DualWarmUpMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceApproachMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto);
  return file_level_enum_descriptors_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[1];
}
bool DistanceApproachMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PlannerOpenSpaceConfig::_Internal {
 public:
  static const ::autoagric::planning::ROIConfig& roi_config(const PlannerOpenSpaceConfig* msg);
  static const ::autoagric::planning::WarmStartConfig& warm_start_config(const PlannerOpenSpaceConfig* msg);
};

const ::autoagric::planning::ROIConfig&
PlannerOpenSpaceConfig::_Internal::roi_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->roi_config_;
}
const ::autoagric::planning::WarmStartConfig&
PlannerOpenSpaceConfig::_Internal::warm_start_config(const PlannerOpenSpaceConfig* msg) {
  return *msg->warm_start_config_;
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.PlannerOpenSpaceConfig)
}
PlannerOpenSpaceConfig::PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roi_config()) {
    roi_config_ = new ::autoagric::planning::ROIConfig(*from.roi_config_);
  } else {
    roi_config_ = nullptr;
  }
  if (from._internal_has_warm_start_config()) {
    warm_start_config_ = new ::autoagric::planning::WarmStartConfig(*from.warm_start_config_);
  } else {
    warm_start_config_ = nullptr;
  }
  ::memcpy(&is_near_destination_threshold_, &from.is_near_destination_threshold_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_theta_threshold_) -
    reinterpret_cast<char*>(&is_near_destination_threshold_)) + sizeof(is_near_destination_theta_threshold_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.PlannerOpenSpaceConfig)
}

inline void PlannerOpenSpaceConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roi_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_near_destination_theta_threshold_) -
    reinterpret_cast<char*>(&roi_config_)) + sizeof(is_near_destination_theta_threshold_));
}

PlannerOpenSpaceConfig::~PlannerOpenSpaceConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.PlannerOpenSpaceConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PlannerOpenSpaceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete roi_config_;
  if (this != internal_default_instance()) delete warm_start_config_;
}

void PlannerOpenSpaceConfig::ArenaDtor(void* object) {
  PlannerOpenSpaceConfig* _this = reinterpret_cast< PlannerOpenSpaceConfig* >(object);
  (void)_this;
}
void PlannerOpenSpaceConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlannerOpenSpaceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlannerOpenSpaceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.PlannerOpenSpaceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && roi_config_ != nullptr) {
    delete roi_config_;
  }
  roi_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && warm_start_config_ != nullptr) {
    delete warm_start_config_;
  }
  warm_start_config_ = nullptr;
  ::memset(&is_near_destination_threshold_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_near_destination_theta_threshold_) -
      reinterpret_cast<char*>(&is_near_destination_threshold_)) + sizeof(is_near_destination_theta_threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlannerOpenSpaceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.planning.ROIConfig roi_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.WarmStartConfig warm_start_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_warm_start_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float delta_t = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double is_near_destination_threshold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          is_near_destination_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool enable_check_parallel_trajectory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          enable_check_parallel_trajectory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_linear_interpolation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          enable_linear_interpolation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double is_near_destination_theta_threshold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          is_near_destination_theta_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlannerOpenSpaceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.PlannerOpenSpaceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.planning.ROIConfig roi_config = 1;
  if (this->_internal_has_roi_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::roi_config(this), target, stream);
  }

  // .autoagric.planning.WarmStartConfig warm_start_config = 2;
  if (this->_internal_has_warm_start_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::warm_start_config(this), target, stream);
  }

  // float delta_t = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delta_t = this->_internal_delta_t();
  uint32_t raw_delta_t;
  memcpy(&raw_delta_t, &tmp_delta_t, sizeof(tmp_delta_t));
  if (raw_delta_t != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_delta_t(), target);
  }

  // double is_near_destination_threshold = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_is_near_destination_threshold = this->_internal_is_near_destination_threshold();
  uint64_t raw_is_near_destination_threshold;
  memcpy(&raw_is_near_destination_threshold, &tmp_is_near_destination_threshold, sizeof(tmp_is_near_destination_threshold));
  if (raw_is_near_destination_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_is_near_destination_threshold(), target);
  }

  // bool enable_check_parallel_trajectory = 9;
  if (this->_internal_enable_check_parallel_trajectory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_enable_check_parallel_trajectory(), target);
  }

  // bool enable_linear_interpolation = 10;
  if (this->_internal_enable_linear_interpolation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_linear_interpolation(), target);
  }

  // double is_near_destination_theta_threshold = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_is_near_destination_theta_threshold = this->_internal_is_near_destination_theta_threshold();
  uint64_t raw_is_near_destination_theta_threshold;
  memcpy(&raw_is_near_destination_theta_threshold, &tmp_is_near_destination_theta_threshold, sizeof(tmp_is_near_destination_theta_threshold));
  if (raw_is_near_destination_theta_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_is_near_destination_theta_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.PlannerOpenSpaceConfig)
  return target;
}

size_t PlannerOpenSpaceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.PlannerOpenSpaceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.planning.ROIConfig roi_config = 1;
  if (this->_internal_has_roi_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_config_);
  }

  // .autoagric.planning.WarmStartConfig warm_start_config = 2;
  if (this->_internal_has_warm_start_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *warm_start_config_);
  }

  // double is_near_destination_threshold = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_is_near_destination_threshold = this->_internal_is_near_destination_threshold();
  uint64_t raw_is_near_destination_threshold;
  memcpy(&raw_is_near_destination_threshold, &tmp_is_near_destination_threshold, sizeof(tmp_is_near_destination_threshold));
  if (raw_is_near_destination_threshold != 0) {
    total_size += 1 + 8;
  }

  // float delta_t = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delta_t = this->_internal_delta_t();
  uint32_t raw_delta_t;
  memcpy(&raw_delta_t, &tmp_delta_t, sizeof(tmp_delta_t));
  if (raw_delta_t != 0) {
    total_size += 1 + 4;
  }

  // bool enable_check_parallel_trajectory = 9;
  if (this->_internal_enable_check_parallel_trajectory() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_linear_interpolation = 10;
  if (this->_internal_enable_linear_interpolation() != 0) {
    total_size += 1 + 1;
  }

  // double is_near_destination_theta_threshold = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_is_near_destination_theta_threshold = this->_internal_is_near_destination_theta_threshold();
  uint64_t raw_is_near_destination_theta_threshold;
  memcpy(&raw_is_near_destination_theta_threshold, &tmp_is_near_destination_theta_threshold, sizeof(tmp_is_near_destination_theta_threshold));
  if (raw_is_near_destination_theta_threshold != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlannerOpenSpaceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PlannerOpenSpaceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlannerOpenSpaceConfig::GetClassData() const { return &_class_data_; }

void PlannerOpenSpaceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PlannerOpenSpaceConfig *>(to)->MergeFrom(
      static_cast<const PlannerOpenSpaceConfig &>(from));
}


void PlannerOpenSpaceConfig::MergeFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.PlannerOpenSpaceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_roi_config()) {
    _internal_mutable_roi_config()->::autoagric::planning::ROIConfig::MergeFrom(from._internal_roi_config());
  }
  if (from._internal_has_warm_start_config()) {
    _internal_mutable_warm_start_config()->::autoagric::planning::WarmStartConfig::MergeFrom(from._internal_warm_start_config());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_is_near_destination_threshold = from._internal_is_near_destination_threshold();
  uint64_t raw_is_near_destination_threshold;
  memcpy(&raw_is_near_destination_threshold, &tmp_is_near_destination_threshold, sizeof(tmp_is_near_destination_threshold));
  if (raw_is_near_destination_threshold != 0) {
    _internal_set_is_near_destination_threshold(from._internal_is_near_destination_threshold());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_delta_t = from._internal_delta_t();
  uint32_t raw_delta_t;
  memcpy(&raw_delta_t, &tmp_delta_t, sizeof(tmp_delta_t));
  if (raw_delta_t != 0) {
    _internal_set_delta_t(from._internal_delta_t());
  }
  if (from._internal_enable_check_parallel_trajectory() != 0) {
    _internal_set_enable_check_parallel_trajectory(from._internal_enable_check_parallel_trajectory());
  }
  if (from._internal_enable_linear_interpolation() != 0) {
    _internal_set_enable_linear_interpolation(from._internal_enable_linear_interpolation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_is_near_destination_theta_threshold = from._internal_is_near_destination_theta_threshold();
  uint64_t raw_is_near_destination_theta_threshold;
  memcpy(&raw_is_near_destination_theta_threshold, &tmp_is_near_destination_theta_threshold, sizeof(tmp_is_near_destination_theta_threshold));
  if (raw_is_near_destination_theta_threshold != 0) {
    _internal_set_is_near_destination_theta_threshold(from._internal_is_near_destination_theta_threshold());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlannerOpenSpaceConfig::CopyFrom(const PlannerOpenSpaceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.PlannerOpenSpaceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlannerOpenSpaceConfig::IsInitialized() const {
  return true;
}

void PlannerOpenSpaceConfig::InternalSwap(PlannerOpenSpaceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlannerOpenSpaceConfig, is_near_destination_theta_threshold_)
      + sizeof(PlannerOpenSpaceConfig::is_near_destination_theta_threshold_)
      - PROTOBUF_FIELD_OFFSET(PlannerOpenSpaceConfig, roi_config_)>(
          reinterpret_cast<char*>(&roi_config_),
          reinterpret_cast<char*>(&other->roi_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlannerOpenSpaceConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[0]);
}

// ===================================================================

class ROIConfig::_Internal {
 public:
};

ROIConfig::ROIConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.ROIConfig)
}
ROIConfig::ROIConfig(const ROIConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&roi_longitudinal_range_start_, &from.roi_longitudinal_range_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&parking_inwards_) -
    reinterpret_cast<char*>(&roi_longitudinal_range_start_)) + sizeof(parking_inwards_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.ROIConfig)
}

inline void ROIConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roi_longitudinal_range_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&parking_inwards_) -
    reinterpret_cast<char*>(&roi_longitudinal_range_start_)) + sizeof(parking_inwards_));
}

ROIConfig::~ROIConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.ROIConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ROIConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ROIConfig::ArenaDtor(void* object) {
  ROIConfig* _this = reinterpret_cast< ROIConfig* >(object);
  (void)_this;
}
void ROIConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROIConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROIConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.ROIConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roi_longitudinal_range_start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parking_inwards_) -
      reinterpret_cast<char*>(&roi_longitudinal_range_start_)) + sizeof(parking_inwards_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROIConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double roi_longitudinal_range_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          roi_longitudinal_range_start_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roi_longitudinal_range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          roi_longitudinal_range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double parking_start_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          parking_start_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool parking_inwards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          parking_inwards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROIConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.ROIConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double roi_longitudinal_range_start = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roi_longitudinal_range_start = this->_internal_roi_longitudinal_range_start();
  uint64_t raw_roi_longitudinal_range_start;
  memcpy(&raw_roi_longitudinal_range_start, &tmp_roi_longitudinal_range_start, sizeof(tmp_roi_longitudinal_range_start));
  if (raw_roi_longitudinal_range_start != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_roi_longitudinal_range_start(), target);
  }

  // double roi_longitudinal_range_end = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roi_longitudinal_range_end = this->_internal_roi_longitudinal_range_end();
  uint64_t raw_roi_longitudinal_range_end;
  memcpy(&raw_roi_longitudinal_range_end, &tmp_roi_longitudinal_range_end, sizeof(tmp_roi_longitudinal_range_end));
  if (raw_roi_longitudinal_range_end != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_roi_longitudinal_range_end(), target);
  }

  // double parking_start_range = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_parking_start_range = this->_internal_parking_start_range();
  uint64_t raw_parking_start_range;
  memcpy(&raw_parking_start_range, &tmp_parking_start_range, sizeof(tmp_parking_start_range));
  if (raw_parking_start_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_parking_start_range(), target);
  }

  // bool parking_inwards = 4;
  if (this->_internal_parking_inwards() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_parking_inwards(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.ROIConfig)
  return target;
}

size_t ROIConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.ROIConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double roi_longitudinal_range_start = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roi_longitudinal_range_start = this->_internal_roi_longitudinal_range_start();
  uint64_t raw_roi_longitudinal_range_start;
  memcpy(&raw_roi_longitudinal_range_start, &tmp_roi_longitudinal_range_start, sizeof(tmp_roi_longitudinal_range_start));
  if (raw_roi_longitudinal_range_start != 0) {
    total_size += 1 + 8;
  }

  // double roi_longitudinal_range_end = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roi_longitudinal_range_end = this->_internal_roi_longitudinal_range_end();
  uint64_t raw_roi_longitudinal_range_end;
  memcpy(&raw_roi_longitudinal_range_end, &tmp_roi_longitudinal_range_end, sizeof(tmp_roi_longitudinal_range_end));
  if (raw_roi_longitudinal_range_end != 0) {
    total_size += 1 + 8;
  }

  // double parking_start_range = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_parking_start_range = this->_internal_parking_start_range();
  uint64_t raw_parking_start_range;
  memcpy(&raw_parking_start_range, &tmp_parking_start_range, sizeof(tmp_parking_start_range));
  if (raw_parking_start_range != 0) {
    total_size += 1 + 8;
  }

  // bool parking_inwards = 4;
  if (this->_internal_parking_inwards() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROIConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROIConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROIConfig::GetClassData() const { return &_class_data_; }

void ROIConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROIConfig *>(to)->MergeFrom(
      static_cast<const ROIConfig &>(from));
}


void ROIConfig::MergeFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.ROIConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roi_longitudinal_range_start = from._internal_roi_longitudinal_range_start();
  uint64_t raw_roi_longitudinal_range_start;
  memcpy(&raw_roi_longitudinal_range_start, &tmp_roi_longitudinal_range_start, sizeof(tmp_roi_longitudinal_range_start));
  if (raw_roi_longitudinal_range_start != 0) {
    _internal_set_roi_longitudinal_range_start(from._internal_roi_longitudinal_range_start());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roi_longitudinal_range_end = from._internal_roi_longitudinal_range_end();
  uint64_t raw_roi_longitudinal_range_end;
  memcpy(&raw_roi_longitudinal_range_end, &tmp_roi_longitudinal_range_end, sizeof(tmp_roi_longitudinal_range_end));
  if (raw_roi_longitudinal_range_end != 0) {
    _internal_set_roi_longitudinal_range_end(from._internal_roi_longitudinal_range_end());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_parking_start_range = from._internal_parking_start_range();
  uint64_t raw_parking_start_range;
  memcpy(&raw_parking_start_range, &tmp_parking_start_range, sizeof(tmp_parking_start_range));
  if (raw_parking_start_range != 0) {
    _internal_set_parking_start_range(from._internal_parking_start_range());
  }
  if (from._internal_parking_inwards() != 0) {
    _internal_set_parking_inwards(from._internal_parking_inwards());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROIConfig::CopyFrom(const ROIConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.ROIConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROIConfig::IsInitialized() const {
  return true;
}

void ROIConfig::InternalSwap(ROIConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ROIConfig, parking_inwards_)
      + sizeof(ROIConfig::parking_inwards_)
      - PROTOBUF_FIELD_OFFSET(ROIConfig, roi_longitudinal_range_start_)>(
          reinterpret_cast<char*>(&roi_longitudinal_range_start_),
          reinterpret_cast<char*>(&other->roi_longitudinal_range_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ROIConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[1]);
}

// ===================================================================

class WarmStartConfig::_Internal {
 public:
  static const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config(const WarmStartConfig* msg);
};

const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig&
WarmStartConfig::_Internal::s_curve_config(const WarmStartConfig* msg) {
  return *msg->s_curve_config_;
}
void WarmStartConfig::clear_s_curve_config() {
  if (GetArenaForAllocation() == nullptr && s_curve_config_ != nullptr) {
    delete s_curve_config_;
  }
  s_curve_config_ = nullptr;
}
WarmStartConfig::WarmStartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.planning.WarmStartConfig)
}
WarmStartConfig::WarmStartConfig(const WarmStartConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_s_curve_config()) {
    s_curve_config_ = new ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig(*from.s_curve_config_);
  } else {
    s_curve_config_ = nullptr;
  }
  ::memcpy(&xy_grid_resolution_, &from.xy_grid_resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&xy_grid_resolution_)) + sizeof(node_radius_));
  // @@protoc_insertion_point(copy_constructor:autoagric.planning.WarmStartConfig)
}

inline void WarmStartConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&s_curve_config_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_radius_) -
    reinterpret_cast<char*>(&s_curve_config_)) + sizeof(node_radius_));
}

WarmStartConfig::~WarmStartConfig() {
  // @@protoc_insertion_point(destructor:autoagric.planning.WarmStartConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WarmStartConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete s_curve_config_;
}

void WarmStartConfig::ArenaDtor(void* object) {
  WarmStartConfig* _this = reinterpret_cast< WarmStartConfig* >(object);
  (void)_this;
}
void WarmStartConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WarmStartConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WarmStartConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.planning.WarmStartConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && s_curve_config_ != nullptr) {
    delete s_curve_config_;
  }
  s_curve_config_ = nullptr;
  ::memset(&xy_grid_resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_radius_) -
      reinterpret_cast<char*>(&xy_grid_resolution_)) + sizeof(node_radius_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WarmStartConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double xy_grid_resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          xy_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double phi_grid_resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          phi_grid_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 next_node_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          next_node_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double step_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          step_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traj_forward_penalty = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          traj_forward_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traj_backward_penalty = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          traj_backward_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traj_gear_switch_penalty = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          traj_gear_switch_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traj_steer_penalty = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          traj_steer_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double traj_steer_change_penalty = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          traj_steer_change_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double grid_a_star_xy_resolution = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          grid_a_star_xy_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double node_radius = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          node_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_s_curve_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WarmStartConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.planning.WarmStartConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double xy_grid_resolution = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xy_grid_resolution = this->_internal_xy_grid_resolution();
  uint64_t raw_xy_grid_resolution;
  memcpy(&raw_xy_grid_resolution, &tmp_xy_grid_resolution, sizeof(tmp_xy_grid_resolution));
  if (raw_xy_grid_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_xy_grid_resolution(), target);
  }

  // double phi_grid_resolution = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_phi_grid_resolution = this->_internal_phi_grid_resolution();
  uint64_t raw_phi_grid_resolution;
  memcpy(&raw_phi_grid_resolution, &tmp_phi_grid_resolution, sizeof(tmp_phi_grid_resolution));
  if (raw_phi_grid_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_phi_grid_resolution(), target);
  }

  // uint64 next_node_num = 3;
  if (this->_internal_next_node_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_next_node_num(), target);
  }

  // double step_size = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_step_size = this->_internal_step_size();
  uint64_t raw_step_size;
  memcpy(&raw_step_size, &tmp_step_size, sizeof(tmp_step_size));
  if (raw_step_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_step_size(), target);
  }

  // double traj_forward_penalty = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_forward_penalty = this->_internal_traj_forward_penalty();
  uint64_t raw_traj_forward_penalty;
  memcpy(&raw_traj_forward_penalty, &tmp_traj_forward_penalty, sizeof(tmp_traj_forward_penalty));
  if (raw_traj_forward_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_traj_forward_penalty(), target);
  }

  // double traj_backward_penalty = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_backward_penalty = this->_internal_traj_backward_penalty();
  uint64_t raw_traj_backward_penalty;
  memcpy(&raw_traj_backward_penalty, &tmp_traj_backward_penalty, sizeof(tmp_traj_backward_penalty));
  if (raw_traj_backward_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_traj_backward_penalty(), target);
  }

  // double traj_gear_switch_penalty = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_gear_switch_penalty = this->_internal_traj_gear_switch_penalty();
  uint64_t raw_traj_gear_switch_penalty;
  memcpy(&raw_traj_gear_switch_penalty, &tmp_traj_gear_switch_penalty, sizeof(tmp_traj_gear_switch_penalty));
  if (raw_traj_gear_switch_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_traj_gear_switch_penalty(), target);
  }

  // double traj_steer_penalty = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_steer_penalty = this->_internal_traj_steer_penalty();
  uint64_t raw_traj_steer_penalty;
  memcpy(&raw_traj_steer_penalty, &tmp_traj_steer_penalty, sizeof(tmp_traj_steer_penalty));
  if (raw_traj_steer_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_traj_steer_penalty(), target);
  }

  // double traj_steer_change_penalty = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_steer_change_penalty = this->_internal_traj_steer_change_penalty();
  uint64_t raw_traj_steer_change_penalty;
  memcpy(&raw_traj_steer_change_penalty, &tmp_traj_steer_change_penalty, sizeof(tmp_traj_steer_change_penalty));
  if (raw_traj_steer_change_penalty != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_traj_steer_change_penalty(), target);
  }

  // double grid_a_star_xy_resolution = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grid_a_star_xy_resolution = this->_internal_grid_a_star_xy_resolution();
  uint64_t raw_grid_a_star_xy_resolution;
  memcpy(&raw_grid_a_star_xy_resolution, &tmp_grid_a_star_xy_resolution, sizeof(tmp_grid_a_star_xy_resolution));
  if (raw_grid_a_star_xy_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_grid_a_star_xy_resolution(), target);
  }

  // double node_radius = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_node_radius = this->_internal_node_radius();
  uint64_t raw_node_radius;
  memcpy(&raw_node_radius, &tmp_node_radius, sizeof(tmp_node_radius));
  if (raw_node_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_node_radius(), target);
  }

  // .autoagric.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (this->_internal_has_s_curve_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::s_curve_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.planning.WarmStartConfig)
  return target;
}

size_t WarmStartConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.planning.WarmStartConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  if (this->_internal_has_s_curve_config()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_curve_config_);
  }

  // double xy_grid_resolution = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xy_grid_resolution = this->_internal_xy_grid_resolution();
  uint64_t raw_xy_grid_resolution;
  memcpy(&raw_xy_grid_resolution, &tmp_xy_grid_resolution, sizeof(tmp_xy_grid_resolution));
  if (raw_xy_grid_resolution != 0) {
    total_size += 1 + 8;
  }

  // double phi_grid_resolution = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_phi_grid_resolution = this->_internal_phi_grid_resolution();
  uint64_t raw_phi_grid_resolution;
  memcpy(&raw_phi_grid_resolution, &tmp_phi_grid_resolution, sizeof(tmp_phi_grid_resolution));
  if (raw_phi_grid_resolution != 0) {
    total_size += 1 + 8;
  }

  // uint64 next_node_num = 3;
  if (this->_internal_next_node_num() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_next_node_num());
  }

  // double step_size = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_step_size = this->_internal_step_size();
  uint64_t raw_step_size;
  memcpy(&raw_step_size, &tmp_step_size, sizeof(tmp_step_size));
  if (raw_step_size != 0) {
    total_size += 1 + 8;
  }

  // double traj_forward_penalty = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_forward_penalty = this->_internal_traj_forward_penalty();
  uint64_t raw_traj_forward_penalty;
  memcpy(&raw_traj_forward_penalty, &tmp_traj_forward_penalty, sizeof(tmp_traj_forward_penalty));
  if (raw_traj_forward_penalty != 0) {
    total_size += 1 + 8;
  }

  // double traj_backward_penalty = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_backward_penalty = this->_internal_traj_backward_penalty();
  uint64_t raw_traj_backward_penalty;
  memcpy(&raw_traj_backward_penalty, &tmp_traj_backward_penalty, sizeof(tmp_traj_backward_penalty));
  if (raw_traj_backward_penalty != 0) {
    total_size += 1 + 8;
  }

  // double traj_gear_switch_penalty = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_gear_switch_penalty = this->_internal_traj_gear_switch_penalty();
  uint64_t raw_traj_gear_switch_penalty;
  memcpy(&raw_traj_gear_switch_penalty, &tmp_traj_gear_switch_penalty, sizeof(tmp_traj_gear_switch_penalty));
  if (raw_traj_gear_switch_penalty != 0) {
    total_size += 1 + 8;
  }

  // double traj_steer_penalty = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_steer_penalty = this->_internal_traj_steer_penalty();
  uint64_t raw_traj_steer_penalty;
  memcpy(&raw_traj_steer_penalty, &tmp_traj_steer_penalty, sizeof(tmp_traj_steer_penalty));
  if (raw_traj_steer_penalty != 0) {
    total_size += 1 + 8;
  }

  // double traj_steer_change_penalty = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_steer_change_penalty = this->_internal_traj_steer_change_penalty();
  uint64_t raw_traj_steer_change_penalty;
  memcpy(&raw_traj_steer_change_penalty, &tmp_traj_steer_change_penalty, sizeof(tmp_traj_steer_change_penalty));
  if (raw_traj_steer_change_penalty != 0) {
    total_size += 1 + 8;
  }

  // double grid_a_star_xy_resolution = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grid_a_star_xy_resolution = this->_internal_grid_a_star_xy_resolution();
  uint64_t raw_grid_a_star_xy_resolution;
  memcpy(&raw_grid_a_star_xy_resolution, &tmp_grid_a_star_xy_resolution, sizeof(tmp_grid_a_star_xy_resolution));
  if (raw_grid_a_star_xy_resolution != 0) {
    total_size += 1 + 8;
  }

  // double node_radius = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_node_radius = this->_internal_node_radius();
  uint64_t raw_node_radius;
  memcpy(&raw_node_radius, &tmp_node_radius, sizeof(tmp_node_radius));
  if (raw_node_radius != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WarmStartConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WarmStartConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WarmStartConfig::GetClassData() const { return &_class_data_; }

void WarmStartConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WarmStartConfig *>(to)->MergeFrom(
      static_cast<const WarmStartConfig &>(from));
}


void WarmStartConfig::MergeFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.planning.WarmStartConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_s_curve_config()) {
    _internal_mutable_s_curve_config()->::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig::MergeFrom(from._internal_s_curve_config());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_xy_grid_resolution = from._internal_xy_grid_resolution();
  uint64_t raw_xy_grid_resolution;
  memcpy(&raw_xy_grid_resolution, &tmp_xy_grid_resolution, sizeof(tmp_xy_grid_resolution));
  if (raw_xy_grid_resolution != 0) {
    _internal_set_xy_grid_resolution(from._internal_xy_grid_resolution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_phi_grid_resolution = from._internal_phi_grid_resolution();
  uint64_t raw_phi_grid_resolution;
  memcpy(&raw_phi_grid_resolution, &tmp_phi_grid_resolution, sizeof(tmp_phi_grid_resolution));
  if (raw_phi_grid_resolution != 0) {
    _internal_set_phi_grid_resolution(from._internal_phi_grid_resolution());
  }
  if (from._internal_next_node_num() != 0) {
    _internal_set_next_node_num(from._internal_next_node_num());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_step_size = from._internal_step_size();
  uint64_t raw_step_size;
  memcpy(&raw_step_size, &tmp_step_size, sizeof(tmp_step_size));
  if (raw_step_size != 0) {
    _internal_set_step_size(from._internal_step_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_forward_penalty = from._internal_traj_forward_penalty();
  uint64_t raw_traj_forward_penalty;
  memcpy(&raw_traj_forward_penalty, &tmp_traj_forward_penalty, sizeof(tmp_traj_forward_penalty));
  if (raw_traj_forward_penalty != 0) {
    _internal_set_traj_forward_penalty(from._internal_traj_forward_penalty());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_backward_penalty = from._internal_traj_backward_penalty();
  uint64_t raw_traj_backward_penalty;
  memcpy(&raw_traj_backward_penalty, &tmp_traj_backward_penalty, sizeof(tmp_traj_backward_penalty));
  if (raw_traj_backward_penalty != 0) {
    _internal_set_traj_backward_penalty(from._internal_traj_backward_penalty());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_gear_switch_penalty = from._internal_traj_gear_switch_penalty();
  uint64_t raw_traj_gear_switch_penalty;
  memcpy(&raw_traj_gear_switch_penalty, &tmp_traj_gear_switch_penalty, sizeof(tmp_traj_gear_switch_penalty));
  if (raw_traj_gear_switch_penalty != 0) {
    _internal_set_traj_gear_switch_penalty(from._internal_traj_gear_switch_penalty());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_steer_penalty = from._internal_traj_steer_penalty();
  uint64_t raw_traj_steer_penalty;
  memcpy(&raw_traj_steer_penalty, &tmp_traj_steer_penalty, sizeof(tmp_traj_steer_penalty));
  if (raw_traj_steer_penalty != 0) {
    _internal_set_traj_steer_penalty(from._internal_traj_steer_penalty());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_traj_steer_change_penalty = from._internal_traj_steer_change_penalty();
  uint64_t raw_traj_steer_change_penalty;
  memcpy(&raw_traj_steer_change_penalty, &tmp_traj_steer_change_penalty, sizeof(tmp_traj_steer_change_penalty));
  if (raw_traj_steer_change_penalty != 0) {
    _internal_set_traj_steer_change_penalty(from._internal_traj_steer_change_penalty());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_grid_a_star_xy_resolution = from._internal_grid_a_star_xy_resolution();
  uint64_t raw_grid_a_star_xy_resolution;
  memcpy(&raw_grid_a_star_xy_resolution, &tmp_grid_a_star_xy_resolution, sizeof(tmp_grid_a_star_xy_resolution));
  if (raw_grid_a_star_xy_resolution != 0) {
    _internal_set_grid_a_star_xy_resolution(from._internal_grid_a_star_xy_resolution());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_node_radius = from._internal_node_radius();
  uint64_t raw_node_radius;
  memcpy(&raw_node_radius, &tmp_node_radius, sizeof(tmp_node_radius));
  if (raw_node_radius != 0) {
    _internal_set_node_radius(from._internal_node_radius());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WarmStartConfig::CopyFrom(const WarmStartConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.planning.WarmStartConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarmStartConfig::IsInitialized() const {
  return true;
}

void WarmStartConfig::InternalSwap(WarmStartConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WarmStartConfig, node_radius_)
      + sizeof(WarmStartConfig::node_radius_)
      - PROTOBUF_FIELD_OFFSET(WarmStartConfig, s_curve_config_)>(
          reinterpret_cast<char*>(&s_curve_config_),
          reinterpret_cast<char*>(&other->s_curve_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WarmStartConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::planning::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage< ::autoagric::planning::PlannerOpenSpaceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::PlannerOpenSpaceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::planning::ROIConfig* Arena::CreateMaybeMessage< ::autoagric::planning::ROIConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::ROIConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::planning::WarmStartConfig* Arena::CreateMaybeMessage< ::autoagric::planning::WarmStartConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::planning::WarmStartConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
