// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/planning/planner_open_space_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/planning/task_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto;
namespace autoagric {
namespace planning {
class PlannerOpenSpaceConfig;
struct PlannerOpenSpaceConfigDefaultTypeInternal;
extern PlannerOpenSpaceConfigDefaultTypeInternal _PlannerOpenSpaceConfig_default_instance_;
class ROIConfig;
struct ROIConfigDefaultTypeInternal;
extern ROIConfigDefaultTypeInternal _ROIConfig_default_instance_;
class WarmStartConfig;
struct WarmStartConfigDefaultTypeInternal;
extern WarmStartConfigDefaultTypeInternal _WarmStartConfig_default_instance_;
}  // namespace planning
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::planning::PlannerOpenSpaceConfig* Arena::CreateMaybeMessage<::autoagric::planning::PlannerOpenSpaceConfig>(Arena*);
template<> ::autoagric::planning::ROIConfig* Arena::CreateMaybeMessage<::autoagric::planning::ROIConfig>(Arena*);
template<> ::autoagric::planning::WarmStartConfig* Arena::CreateMaybeMessage<::autoagric::planning::WarmStartConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace planning {

enum DualWarmUpMode : int {
  IPOPT = 0,
  IPOPTQP = 1,
  OSQP = 2,
  DEBUG = 3,
  SLACKQP = 4,
  DualWarmUpMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DualWarmUpMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DualWarmUpMode_IsValid(int value);
constexpr DualWarmUpMode DualWarmUpMode_MIN = IPOPT;
constexpr DualWarmUpMode DualWarmUpMode_MAX = SLACKQP;
constexpr int DualWarmUpMode_ARRAYSIZE = DualWarmUpMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DualWarmUpMode_descriptor();
template<typename T>
inline const std::string& DualWarmUpMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DualWarmUpMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DualWarmUpMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DualWarmUpMode_descriptor(), enum_t_value);
}
inline bool DualWarmUpMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DualWarmUpMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DualWarmUpMode>(
    DualWarmUpMode_descriptor(), name, value);
}
enum DistanceApproachMode : int {
  DISTANCE_APPROACH_IPOPT = 0,
  DISTANCE_APPROACH_IPOPT_CUDA = 1,
  DISTANCE_APPROACH_IPOPT_FIXED_TS = 2,
  DISTANCE_APPROACH_IPOPT_FIXED_DUAL = 3,
  DISTANCE_APPROACH_IPOPT_RELAX_END = 4,
  DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK = 5,
  DistanceApproachMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DistanceApproachMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DistanceApproachMode_IsValid(int value);
constexpr DistanceApproachMode DistanceApproachMode_MIN = DISTANCE_APPROACH_IPOPT;
constexpr DistanceApproachMode DistanceApproachMode_MAX = DISTANCE_APPROACH_IPOPT_RELAX_END_SLACK;
constexpr int DistanceApproachMode_ARRAYSIZE = DistanceApproachMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceApproachMode_descriptor();
template<typename T>
inline const std::string& DistanceApproachMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistanceApproachMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistanceApproachMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistanceApproachMode_descriptor(), enum_t_value);
}
inline bool DistanceApproachMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DistanceApproachMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistanceApproachMode>(
    DistanceApproachMode_descriptor(), name, value);
}
// ===================================================================

class PlannerOpenSpaceConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.PlannerOpenSpaceConfig) */ {
 public:
  inline PlannerOpenSpaceConfig() : PlannerOpenSpaceConfig(nullptr) {}
  ~PlannerOpenSpaceConfig() override;
  explicit constexpr PlannerOpenSpaceConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlannerOpenSpaceConfig(const PlannerOpenSpaceConfig& from);
  PlannerOpenSpaceConfig(PlannerOpenSpaceConfig&& from) noexcept
    : PlannerOpenSpaceConfig() {
    *this = ::std::move(from);
  }

  inline PlannerOpenSpaceConfig& operator=(const PlannerOpenSpaceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlannerOpenSpaceConfig& operator=(PlannerOpenSpaceConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlannerOpenSpaceConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlannerOpenSpaceConfig* internal_default_instance() {
    return reinterpret_cast<const PlannerOpenSpaceConfig*>(
               &_PlannerOpenSpaceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlannerOpenSpaceConfig& a, PlannerOpenSpaceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PlannerOpenSpaceConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlannerOpenSpaceConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlannerOpenSpaceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlannerOpenSpaceConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlannerOpenSpaceConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlannerOpenSpaceConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlannerOpenSpaceConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.PlannerOpenSpaceConfig";
  }
  protected:
  explicit PlannerOpenSpaceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiConfigFieldNumber = 1,
    kWarmStartConfigFieldNumber = 2,
    kIsNearDestinationThresholdFieldNumber = 8,
    kDeltaTFieldNumber = 7,
    kEnableCheckParallelTrajectoryFieldNumber = 9,
    kEnableLinearInterpolationFieldNumber = 10,
    kIsNearDestinationThetaThresholdFieldNumber = 11,
  };
  // .autoagric.planning.ROIConfig roi_config = 1;
  bool has_roi_config() const;
  private:
  bool _internal_has_roi_config() const;
  public:
  void clear_roi_config();
  const ::autoagric::planning::ROIConfig& roi_config() const;
  PROTOBUF_NODISCARD ::autoagric::planning::ROIConfig* release_roi_config();
  ::autoagric::planning::ROIConfig* mutable_roi_config();
  void set_allocated_roi_config(::autoagric::planning::ROIConfig* roi_config);
  private:
  const ::autoagric::planning::ROIConfig& _internal_roi_config() const;
  ::autoagric::planning::ROIConfig* _internal_mutable_roi_config();
  public:
  void unsafe_arena_set_allocated_roi_config(
      ::autoagric::planning::ROIConfig* roi_config);
  ::autoagric::planning::ROIConfig* unsafe_arena_release_roi_config();

  // .autoagric.planning.WarmStartConfig warm_start_config = 2;
  bool has_warm_start_config() const;
  private:
  bool _internal_has_warm_start_config() const;
  public:
  void clear_warm_start_config();
  const ::autoagric::planning::WarmStartConfig& warm_start_config() const;
  PROTOBUF_NODISCARD ::autoagric::planning::WarmStartConfig* release_warm_start_config();
  ::autoagric::planning::WarmStartConfig* mutable_warm_start_config();
  void set_allocated_warm_start_config(::autoagric::planning::WarmStartConfig* warm_start_config);
  private:
  const ::autoagric::planning::WarmStartConfig& _internal_warm_start_config() const;
  ::autoagric::planning::WarmStartConfig* _internal_mutable_warm_start_config();
  public:
  void unsafe_arena_set_allocated_warm_start_config(
      ::autoagric::planning::WarmStartConfig* warm_start_config);
  ::autoagric::planning::WarmStartConfig* unsafe_arena_release_warm_start_config();

  // double is_near_destination_threshold = 8;
  void clear_is_near_destination_threshold();
  double is_near_destination_threshold() const;
  void set_is_near_destination_threshold(double value);
  private:
  double _internal_is_near_destination_threshold() const;
  void _internal_set_is_near_destination_threshold(double value);
  public:

  // float delta_t = 7;
  void clear_delta_t();
  float delta_t() const;
  void set_delta_t(float value);
  private:
  float _internal_delta_t() const;
  void _internal_set_delta_t(float value);
  public:

  // bool enable_check_parallel_trajectory = 9;
  void clear_enable_check_parallel_trajectory();
  bool enable_check_parallel_trajectory() const;
  void set_enable_check_parallel_trajectory(bool value);
  private:
  bool _internal_enable_check_parallel_trajectory() const;
  void _internal_set_enable_check_parallel_trajectory(bool value);
  public:

  // bool enable_linear_interpolation = 10;
  void clear_enable_linear_interpolation();
  bool enable_linear_interpolation() const;
  void set_enable_linear_interpolation(bool value);
  private:
  bool _internal_enable_linear_interpolation() const;
  void _internal_set_enable_linear_interpolation(bool value);
  public:

  // double is_near_destination_theta_threshold = 11;
  void clear_is_near_destination_theta_threshold();
  double is_near_destination_theta_threshold() const;
  void set_is_near_destination_theta_threshold(double value);
  private:
  double _internal_is_near_destination_theta_threshold() const;
  void _internal_set_is_near_destination_theta_threshold(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.PlannerOpenSpaceConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::autoagric::planning::ROIConfig* roi_config_;
  ::autoagric::planning::WarmStartConfig* warm_start_config_;
  double is_near_destination_threshold_;
  float delta_t_;
  bool enable_check_parallel_trajectory_;
  bool enable_linear_interpolation_;
  double is_near_destination_theta_threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ROIConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.ROIConfig) */ {
 public:
  inline ROIConfig() : ROIConfig(nullptr) {}
  ~ROIConfig() override;
  explicit constexpr ROIConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ROIConfig(const ROIConfig& from);
  ROIConfig(ROIConfig&& from) noexcept
    : ROIConfig() {
    *this = ::std::move(from);
  }

  inline ROIConfig& operator=(const ROIConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIConfig& operator=(ROIConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ROIConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ROIConfig* internal_default_instance() {
    return reinterpret_cast<const ROIConfig*>(
               &_ROIConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ROIConfig& a, ROIConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ROIConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ROIConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ROIConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ROIConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.ROIConfig";
  }
  protected:
  explicit ROIConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiLongitudinalRangeStartFieldNumber = 1,
    kRoiLongitudinalRangeEndFieldNumber = 2,
    kParkingStartRangeFieldNumber = 3,
    kParkingInwardsFieldNumber = 4,
  };
  // double roi_longitudinal_range_start = 1;
  void clear_roi_longitudinal_range_start();
  double roi_longitudinal_range_start() const;
  void set_roi_longitudinal_range_start(double value);
  private:
  double _internal_roi_longitudinal_range_start() const;
  void _internal_set_roi_longitudinal_range_start(double value);
  public:

  // double roi_longitudinal_range_end = 2;
  void clear_roi_longitudinal_range_end();
  double roi_longitudinal_range_end() const;
  void set_roi_longitudinal_range_end(double value);
  private:
  double _internal_roi_longitudinal_range_end() const;
  void _internal_set_roi_longitudinal_range_end(double value);
  public:

  // double parking_start_range = 3;
  void clear_parking_start_range();
  double parking_start_range() const;
  void set_parking_start_range(double value);
  private:
  double _internal_parking_start_range() const;
  void _internal_set_parking_start_range(double value);
  public:

  // bool parking_inwards = 4;
  void clear_parking_inwards();
  bool parking_inwards() const;
  void set_parking_inwards(bool value);
  private:
  bool _internal_parking_inwards() const;
  void _internal_set_parking_inwards(bool value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.ROIConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double roi_longitudinal_range_start_;
  double roi_longitudinal_range_end_;
  double parking_start_range_;
  bool parking_inwards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class WarmStartConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.planning.WarmStartConfig) */ {
 public:
  inline WarmStartConfig() : WarmStartConfig(nullptr) {}
  ~WarmStartConfig() override;
  explicit constexpr WarmStartConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WarmStartConfig(const WarmStartConfig& from);
  WarmStartConfig(WarmStartConfig&& from) noexcept
    : WarmStartConfig() {
    *this = ::std::move(from);
  }

  inline WarmStartConfig& operator=(const WarmStartConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline WarmStartConfig& operator=(WarmStartConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WarmStartConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const WarmStartConfig* internal_default_instance() {
    return reinterpret_cast<const WarmStartConfig*>(
               &_WarmStartConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WarmStartConfig& a, WarmStartConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(WarmStartConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WarmStartConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WarmStartConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WarmStartConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WarmStartConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WarmStartConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WarmStartConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.planning.WarmStartConfig";
  }
  protected:
  explicit WarmStartConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSCurveConfigFieldNumber = 17,
    kXyGridResolutionFieldNumber = 1,
    kPhiGridResolutionFieldNumber = 2,
    kNextNodeNumFieldNumber = 3,
    kStepSizeFieldNumber = 4,
    kTrajForwardPenaltyFieldNumber = 5,
    kTrajBackwardPenaltyFieldNumber = 6,
    kTrajGearSwitchPenaltyFieldNumber = 7,
    kTrajSteerPenaltyFieldNumber = 8,
    kTrajSteerChangePenaltyFieldNumber = 9,
    kGridAStarXyResolutionFieldNumber = 15,
    kNodeRadiusFieldNumber = 16,
  };
  // .autoagric.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
  bool has_s_curve_config() const;
  private:
  bool _internal_has_s_curve_config() const;
  public:
  void clear_s_curve_config();
  const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig& s_curve_config() const;
  PROTOBUF_NODISCARD ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* release_s_curve_config();
  ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* mutable_s_curve_config();
  void set_allocated_s_curve_config(::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config);
  private:
  const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig& _internal_s_curve_config() const;
  ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* _internal_mutable_s_curve_config();
  public:
  void unsafe_arena_set_allocated_s_curve_config(
      ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config);
  ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* unsafe_arena_release_s_curve_config();

  // double xy_grid_resolution = 1;
  void clear_xy_grid_resolution();
  double xy_grid_resolution() const;
  void set_xy_grid_resolution(double value);
  private:
  double _internal_xy_grid_resolution() const;
  void _internal_set_xy_grid_resolution(double value);
  public:

  // double phi_grid_resolution = 2;
  void clear_phi_grid_resolution();
  double phi_grid_resolution() const;
  void set_phi_grid_resolution(double value);
  private:
  double _internal_phi_grid_resolution() const;
  void _internal_set_phi_grid_resolution(double value);
  public:

  // uint64 next_node_num = 3;
  void clear_next_node_num();
  uint64_t next_node_num() const;
  void set_next_node_num(uint64_t value);
  private:
  uint64_t _internal_next_node_num() const;
  void _internal_set_next_node_num(uint64_t value);
  public:

  // double step_size = 4;
  void clear_step_size();
  double step_size() const;
  void set_step_size(double value);
  private:
  double _internal_step_size() const;
  void _internal_set_step_size(double value);
  public:

  // double traj_forward_penalty = 5;
  void clear_traj_forward_penalty();
  double traj_forward_penalty() const;
  void set_traj_forward_penalty(double value);
  private:
  double _internal_traj_forward_penalty() const;
  void _internal_set_traj_forward_penalty(double value);
  public:

  // double traj_backward_penalty = 6;
  void clear_traj_backward_penalty();
  double traj_backward_penalty() const;
  void set_traj_backward_penalty(double value);
  private:
  double _internal_traj_backward_penalty() const;
  void _internal_set_traj_backward_penalty(double value);
  public:

  // double traj_gear_switch_penalty = 7;
  void clear_traj_gear_switch_penalty();
  double traj_gear_switch_penalty() const;
  void set_traj_gear_switch_penalty(double value);
  private:
  double _internal_traj_gear_switch_penalty() const;
  void _internal_set_traj_gear_switch_penalty(double value);
  public:

  // double traj_steer_penalty = 8;
  void clear_traj_steer_penalty();
  double traj_steer_penalty() const;
  void set_traj_steer_penalty(double value);
  private:
  double _internal_traj_steer_penalty() const;
  void _internal_set_traj_steer_penalty(double value);
  public:

  // double traj_steer_change_penalty = 9;
  void clear_traj_steer_change_penalty();
  double traj_steer_change_penalty() const;
  void set_traj_steer_change_penalty(double value);
  private:
  double _internal_traj_steer_change_penalty() const;
  void _internal_set_traj_steer_change_penalty(double value);
  public:

  // double grid_a_star_xy_resolution = 15;
  void clear_grid_a_star_xy_resolution();
  double grid_a_star_xy_resolution() const;
  void set_grid_a_star_xy_resolution(double value);
  private:
  double _internal_grid_a_star_xy_resolution() const;
  void _internal_set_grid_a_star_xy_resolution(double value);
  public:

  // double node_radius = 16;
  void clear_node_radius();
  double node_radius() const;
  void set_node_radius(double value);
  private:
  double _internal_node_radius() const;
  void _internal_set_node_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.planning.WarmStartConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config_;
  double xy_grid_resolution_;
  double phi_grid_resolution_;
  uint64_t next_node_num_;
  double step_size_;
  double traj_forward_penalty_;
  double traj_backward_penalty_;
  double traj_gear_switch_penalty_;
  double traj_steer_penalty_;
  double traj_steer_change_penalty_;
  double grid_a_star_xy_resolution_;
  double node_radius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlannerOpenSpaceConfig

// .autoagric.planning.ROIConfig roi_config = 1;
inline bool PlannerOpenSpaceConfig::_internal_has_roi_config() const {
  return this != internal_default_instance() && roi_config_ != nullptr;
}
inline bool PlannerOpenSpaceConfig::has_roi_config() const {
  return _internal_has_roi_config();
}
inline void PlannerOpenSpaceConfig::clear_roi_config() {
  if (GetArenaForAllocation() == nullptr && roi_config_ != nullptr) {
    delete roi_config_;
  }
  roi_config_ = nullptr;
}
inline const ::autoagric::planning::ROIConfig& PlannerOpenSpaceConfig::_internal_roi_config() const {
  const ::autoagric::planning::ROIConfig* p = roi_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::planning::ROIConfig&>(
      ::autoagric::planning::_ROIConfig_default_instance_);
}
inline const ::autoagric::planning::ROIConfig& PlannerOpenSpaceConfig::roi_config() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PlannerOpenSpaceConfig.roi_config)
  return _internal_roi_config();
}
inline void PlannerOpenSpaceConfig::unsafe_arena_set_allocated_roi_config(
    ::autoagric::planning::ROIConfig* roi_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_config_);
  }
  roi_config_ = roi_config;
  if (roi_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.planning.PlannerOpenSpaceConfig.roi_config)
}
inline ::autoagric::planning::ROIConfig* PlannerOpenSpaceConfig::release_roi_config() {
  
  ::autoagric::planning::ROIConfig* temp = roi_config_;
  roi_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::planning::ROIConfig* PlannerOpenSpaceConfig::unsafe_arena_release_roi_config() {
  // @@protoc_insertion_point(field_release:autoagric.planning.PlannerOpenSpaceConfig.roi_config)
  
  ::autoagric::planning::ROIConfig* temp = roi_config_;
  roi_config_ = nullptr;
  return temp;
}
inline ::autoagric::planning::ROIConfig* PlannerOpenSpaceConfig::_internal_mutable_roi_config() {
  
  if (roi_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::planning::ROIConfig>(GetArenaForAllocation());
    roi_config_ = p;
  }
  return roi_config_;
}
inline ::autoagric::planning::ROIConfig* PlannerOpenSpaceConfig::mutable_roi_config() {
  ::autoagric::planning::ROIConfig* _msg = _internal_mutable_roi_config();
  // @@protoc_insertion_point(field_mutable:autoagric.planning.PlannerOpenSpaceConfig.roi_config)
  return _msg;
}
inline void PlannerOpenSpaceConfig::set_allocated_roi_config(::autoagric::planning::ROIConfig* roi_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete roi_config_;
  }
  if (roi_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::ROIConfig>::GetOwningArena(roi_config);
    if (message_arena != submessage_arena) {
      roi_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_config, submessage_arena);
    }
    
  } else {
    
  }
  roi_config_ = roi_config;
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.PlannerOpenSpaceConfig.roi_config)
}

// .autoagric.planning.WarmStartConfig warm_start_config = 2;
inline bool PlannerOpenSpaceConfig::_internal_has_warm_start_config() const {
  return this != internal_default_instance() && warm_start_config_ != nullptr;
}
inline bool PlannerOpenSpaceConfig::has_warm_start_config() const {
  return _internal_has_warm_start_config();
}
inline void PlannerOpenSpaceConfig::clear_warm_start_config() {
  if (GetArenaForAllocation() == nullptr && warm_start_config_ != nullptr) {
    delete warm_start_config_;
  }
  warm_start_config_ = nullptr;
}
inline const ::autoagric::planning::WarmStartConfig& PlannerOpenSpaceConfig::_internal_warm_start_config() const {
  const ::autoagric::planning::WarmStartConfig* p = warm_start_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::planning::WarmStartConfig&>(
      ::autoagric::planning::_WarmStartConfig_default_instance_);
}
inline const ::autoagric::planning::WarmStartConfig& PlannerOpenSpaceConfig::warm_start_config() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PlannerOpenSpaceConfig.warm_start_config)
  return _internal_warm_start_config();
}
inline void PlannerOpenSpaceConfig::unsafe_arena_set_allocated_warm_start_config(
    ::autoagric::planning::WarmStartConfig* warm_start_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(warm_start_config_);
  }
  warm_start_config_ = warm_start_config;
  if (warm_start_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.planning.PlannerOpenSpaceConfig.warm_start_config)
}
inline ::autoagric::planning::WarmStartConfig* PlannerOpenSpaceConfig::release_warm_start_config() {
  
  ::autoagric::planning::WarmStartConfig* temp = warm_start_config_;
  warm_start_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::planning::WarmStartConfig* PlannerOpenSpaceConfig::unsafe_arena_release_warm_start_config() {
  // @@protoc_insertion_point(field_release:autoagric.planning.PlannerOpenSpaceConfig.warm_start_config)
  
  ::autoagric::planning::WarmStartConfig* temp = warm_start_config_;
  warm_start_config_ = nullptr;
  return temp;
}
inline ::autoagric::planning::WarmStartConfig* PlannerOpenSpaceConfig::_internal_mutable_warm_start_config() {
  
  if (warm_start_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::planning::WarmStartConfig>(GetArenaForAllocation());
    warm_start_config_ = p;
  }
  return warm_start_config_;
}
inline ::autoagric::planning::WarmStartConfig* PlannerOpenSpaceConfig::mutable_warm_start_config() {
  ::autoagric::planning::WarmStartConfig* _msg = _internal_mutable_warm_start_config();
  // @@protoc_insertion_point(field_mutable:autoagric.planning.PlannerOpenSpaceConfig.warm_start_config)
  return _msg;
}
inline void PlannerOpenSpaceConfig::set_allocated_warm_start_config(::autoagric::planning::WarmStartConfig* warm_start_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete warm_start_config_;
  }
  if (warm_start_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::autoagric::planning::WarmStartConfig>::GetOwningArena(warm_start_config);
    if (message_arena != submessage_arena) {
      warm_start_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, warm_start_config, submessage_arena);
    }
    
  } else {
    
  }
  warm_start_config_ = warm_start_config;
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.PlannerOpenSpaceConfig.warm_start_config)
}

// float delta_t = 7;
inline void PlannerOpenSpaceConfig::clear_delta_t() {
  delta_t_ = 0;
}
inline float PlannerOpenSpaceConfig::_internal_delta_t() const {
  return delta_t_;
}
inline float PlannerOpenSpaceConfig::delta_t() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PlannerOpenSpaceConfig.delta_t)
  return _internal_delta_t();
}
inline void PlannerOpenSpaceConfig::_internal_set_delta_t(float value) {
  
  delta_t_ = value;
}
inline void PlannerOpenSpaceConfig::set_delta_t(float value) {
  _internal_set_delta_t(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PlannerOpenSpaceConfig.delta_t)
}

// double is_near_destination_threshold = 8;
inline void PlannerOpenSpaceConfig::clear_is_near_destination_threshold() {
  is_near_destination_threshold_ = 0;
}
inline double PlannerOpenSpaceConfig::_internal_is_near_destination_threshold() const {
  return is_near_destination_threshold_;
}
inline double PlannerOpenSpaceConfig::is_near_destination_threshold() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
  return _internal_is_near_destination_threshold();
}
inline void PlannerOpenSpaceConfig::_internal_set_is_near_destination_threshold(double value) {
  
  is_near_destination_threshold_ = value;
}
inline void PlannerOpenSpaceConfig::set_is_near_destination_threshold(double value) {
  _internal_set_is_near_destination_threshold(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PlannerOpenSpaceConfig.is_near_destination_threshold)
}

// bool enable_check_parallel_trajectory = 9;
inline void PlannerOpenSpaceConfig::clear_enable_check_parallel_trajectory() {
  enable_check_parallel_trajectory_ = false;
}
inline bool PlannerOpenSpaceConfig::_internal_enable_check_parallel_trajectory() const {
  return enable_check_parallel_trajectory_;
}
inline bool PlannerOpenSpaceConfig::enable_check_parallel_trajectory() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
  return _internal_enable_check_parallel_trajectory();
}
inline void PlannerOpenSpaceConfig::_internal_set_enable_check_parallel_trajectory(bool value) {
  
  enable_check_parallel_trajectory_ = value;
}
inline void PlannerOpenSpaceConfig::set_enable_check_parallel_trajectory(bool value) {
  _internal_set_enable_check_parallel_trajectory(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PlannerOpenSpaceConfig.enable_check_parallel_trajectory)
}

// bool enable_linear_interpolation = 10;
inline void PlannerOpenSpaceConfig::clear_enable_linear_interpolation() {
  enable_linear_interpolation_ = false;
}
inline bool PlannerOpenSpaceConfig::_internal_enable_linear_interpolation() const {
  return enable_linear_interpolation_;
}
inline bool PlannerOpenSpaceConfig::enable_linear_interpolation() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
  return _internal_enable_linear_interpolation();
}
inline void PlannerOpenSpaceConfig::_internal_set_enable_linear_interpolation(bool value) {
  
  enable_linear_interpolation_ = value;
}
inline void PlannerOpenSpaceConfig::set_enable_linear_interpolation(bool value) {
  _internal_set_enable_linear_interpolation(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PlannerOpenSpaceConfig.enable_linear_interpolation)
}

// double is_near_destination_theta_threshold = 11;
inline void PlannerOpenSpaceConfig::clear_is_near_destination_theta_threshold() {
  is_near_destination_theta_threshold_ = 0;
}
inline double PlannerOpenSpaceConfig::_internal_is_near_destination_theta_threshold() const {
  return is_near_destination_theta_threshold_;
}
inline double PlannerOpenSpaceConfig::is_near_destination_theta_threshold() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
  return _internal_is_near_destination_theta_threshold();
}
inline void PlannerOpenSpaceConfig::_internal_set_is_near_destination_theta_threshold(double value) {
  
  is_near_destination_theta_threshold_ = value;
}
inline void PlannerOpenSpaceConfig::set_is_near_destination_theta_threshold(double value) {
  _internal_set_is_near_destination_theta_threshold(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.PlannerOpenSpaceConfig.is_near_destination_theta_threshold)
}

// -------------------------------------------------------------------

// ROIConfig

// double roi_longitudinal_range_start = 1;
inline void ROIConfig::clear_roi_longitudinal_range_start() {
  roi_longitudinal_range_start_ = 0;
}
inline double ROIConfig::_internal_roi_longitudinal_range_start() const {
  return roi_longitudinal_range_start_;
}
inline double ROIConfig::roi_longitudinal_range_start() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ROIConfig.roi_longitudinal_range_start)
  return _internal_roi_longitudinal_range_start();
}
inline void ROIConfig::_internal_set_roi_longitudinal_range_start(double value) {
  
  roi_longitudinal_range_start_ = value;
}
inline void ROIConfig::set_roi_longitudinal_range_start(double value) {
  _internal_set_roi_longitudinal_range_start(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ROIConfig.roi_longitudinal_range_start)
}

// double roi_longitudinal_range_end = 2;
inline void ROIConfig::clear_roi_longitudinal_range_end() {
  roi_longitudinal_range_end_ = 0;
}
inline double ROIConfig::_internal_roi_longitudinal_range_end() const {
  return roi_longitudinal_range_end_;
}
inline double ROIConfig::roi_longitudinal_range_end() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ROIConfig.roi_longitudinal_range_end)
  return _internal_roi_longitudinal_range_end();
}
inline void ROIConfig::_internal_set_roi_longitudinal_range_end(double value) {
  
  roi_longitudinal_range_end_ = value;
}
inline void ROIConfig::set_roi_longitudinal_range_end(double value) {
  _internal_set_roi_longitudinal_range_end(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ROIConfig.roi_longitudinal_range_end)
}

// double parking_start_range = 3;
inline void ROIConfig::clear_parking_start_range() {
  parking_start_range_ = 0;
}
inline double ROIConfig::_internal_parking_start_range() const {
  return parking_start_range_;
}
inline double ROIConfig::parking_start_range() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ROIConfig.parking_start_range)
  return _internal_parking_start_range();
}
inline void ROIConfig::_internal_set_parking_start_range(double value) {
  
  parking_start_range_ = value;
}
inline void ROIConfig::set_parking_start_range(double value) {
  _internal_set_parking_start_range(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ROIConfig.parking_start_range)
}

// bool parking_inwards = 4;
inline void ROIConfig::clear_parking_inwards() {
  parking_inwards_ = false;
}
inline bool ROIConfig::_internal_parking_inwards() const {
  return parking_inwards_;
}
inline bool ROIConfig::parking_inwards() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.ROIConfig.parking_inwards)
  return _internal_parking_inwards();
}
inline void ROIConfig::_internal_set_parking_inwards(bool value) {
  
  parking_inwards_ = value;
}
inline void ROIConfig::set_parking_inwards(bool value) {
  _internal_set_parking_inwards(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.ROIConfig.parking_inwards)
}

// -------------------------------------------------------------------

// WarmStartConfig

// double xy_grid_resolution = 1;
inline void WarmStartConfig::clear_xy_grid_resolution() {
  xy_grid_resolution_ = 0;
}
inline double WarmStartConfig::_internal_xy_grid_resolution() const {
  return xy_grid_resolution_;
}
inline double WarmStartConfig::xy_grid_resolution() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.xy_grid_resolution)
  return _internal_xy_grid_resolution();
}
inline void WarmStartConfig::_internal_set_xy_grid_resolution(double value) {
  
  xy_grid_resolution_ = value;
}
inline void WarmStartConfig::set_xy_grid_resolution(double value) {
  _internal_set_xy_grid_resolution(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.xy_grid_resolution)
}

// double phi_grid_resolution = 2;
inline void WarmStartConfig::clear_phi_grid_resolution() {
  phi_grid_resolution_ = 0;
}
inline double WarmStartConfig::_internal_phi_grid_resolution() const {
  return phi_grid_resolution_;
}
inline double WarmStartConfig::phi_grid_resolution() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.phi_grid_resolution)
  return _internal_phi_grid_resolution();
}
inline void WarmStartConfig::_internal_set_phi_grid_resolution(double value) {
  
  phi_grid_resolution_ = value;
}
inline void WarmStartConfig::set_phi_grid_resolution(double value) {
  _internal_set_phi_grid_resolution(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.phi_grid_resolution)
}

// uint64 next_node_num = 3;
inline void WarmStartConfig::clear_next_node_num() {
  next_node_num_ = uint64_t{0u};
}
inline uint64_t WarmStartConfig::_internal_next_node_num() const {
  return next_node_num_;
}
inline uint64_t WarmStartConfig::next_node_num() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.next_node_num)
  return _internal_next_node_num();
}
inline void WarmStartConfig::_internal_set_next_node_num(uint64_t value) {
  
  next_node_num_ = value;
}
inline void WarmStartConfig::set_next_node_num(uint64_t value) {
  _internal_set_next_node_num(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.next_node_num)
}

// double step_size = 4;
inline void WarmStartConfig::clear_step_size() {
  step_size_ = 0;
}
inline double WarmStartConfig::_internal_step_size() const {
  return step_size_;
}
inline double WarmStartConfig::step_size() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.step_size)
  return _internal_step_size();
}
inline void WarmStartConfig::_internal_set_step_size(double value) {
  
  step_size_ = value;
}
inline void WarmStartConfig::set_step_size(double value) {
  _internal_set_step_size(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.step_size)
}

// double traj_forward_penalty = 5;
inline void WarmStartConfig::clear_traj_forward_penalty() {
  traj_forward_penalty_ = 0;
}
inline double WarmStartConfig::_internal_traj_forward_penalty() const {
  return traj_forward_penalty_;
}
inline double WarmStartConfig::traj_forward_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.traj_forward_penalty)
  return _internal_traj_forward_penalty();
}
inline void WarmStartConfig::_internal_set_traj_forward_penalty(double value) {
  
  traj_forward_penalty_ = value;
}
inline void WarmStartConfig::set_traj_forward_penalty(double value) {
  _internal_set_traj_forward_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.traj_forward_penalty)
}

// double traj_backward_penalty = 6;
inline void WarmStartConfig::clear_traj_backward_penalty() {
  traj_backward_penalty_ = 0;
}
inline double WarmStartConfig::_internal_traj_backward_penalty() const {
  return traj_backward_penalty_;
}
inline double WarmStartConfig::traj_backward_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.traj_backward_penalty)
  return _internal_traj_backward_penalty();
}
inline void WarmStartConfig::_internal_set_traj_backward_penalty(double value) {
  
  traj_backward_penalty_ = value;
}
inline void WarmStartConfig::set_traj_backward_penalty(double value) {
  _internal_set_traj_backward_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.traj_backward_penalty)
}

// double traj_gear_switch_penalty = 7;
inline void WarmStartConfig::clear_traj_gear_switch_penalty() {
  traj_gear_switch_penalty_ = 0;
}
inline double WarmStartConfig::_internal_traj_gear_switch_penalty() const {
  return traj_gear_switch_penalty_;
}
inline double WarmStartConfig::traj_gear_switch_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.traj_gear_switch_penalty)
  return _internal_traj_gear_switch_penalty();
}
inline void WarmStartConfig::_internal_set_traj_gear_switch_penalty(double value) {
  
  traj_gear_switch_penalty_ = value;
}
inline void WarmStartConfig::set_traj_gear_switch_penalty(double value) {
  _internal_set_traj_gear_switch_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.traj_gear_switch_penalty)
}

// double traj_steer_penalty = 8;
inline void WarmStartConfig::clear_traj_steer_penalty() {
  traj_steer_penalty_ = 0;
}
inline double WarmStartConfig::_internal_traj_steer_penalty() const {
  return traj_steer_penalty_;
}
inline double WarmStartConfig::traj_steer_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.traj_steer_penalty)
  return _internal_traj_steer_penalty();
}
inline void WarmStartConfig::_internal_set_traj_steer_penalty(double value) {
  
  traj_steer_penalty_ = value;
}
inline void WarmStartConfig::set_traj_steer_penalty(double value) {
  _internal_set_traj_steer_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.traj_steer_penalty)
}

// double traj_steer_change_penalty = 9;
inline void WarmStartConfig::clear_traj_steer_change_penalty() {
  traj_steer_change_penalty_ = 0;
}
inline double WarmStartConfig::_internal_traj_steer_change_penalty() const {
  return traj_steer_change_penalty_;
}
inline double WarmStartConfig::traj_steer_change_penalty() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.traj_steer_change_penalty)
  return _internal_traj_steer_change_penalty();
}
inline void WarmStartConfig::_internal_set_traj_steer_change_penalty(double value) {
  
  traj_steer_change_penalty_ = value;
}
inline void WarmStartConfig::set_traj_steer_change_penalty(double value) {
  _internal_set_traj_steer_change_penalty(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.traj_steer_change_penalty)
}

// double grid_a_star_xy_resolution = 15;
inline void WarmStartConfig::clear_grid_a_star_xy_resolution() {
  grid_a_star_xy_resolution_ = 0;
}
inline double WarmStartConfig::_internal_grid_a_star_xy_resolution() const {
  return grid_a_star_xy_resolution_;
}
inline double WarmStartConfig::grid_a_star_xy_resolution() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.grid_a_star_xy_resolution)
  return _internal_grid_a_star_xy_resolution();
}
inline void WarmStartConfig::_internal_set_grid_a_star_xy_resolution(double value) {
  
  grid_a_star_xy_resolution_ = value;
}
inline void WarmStartConfig::set_grid_a_star_xy_resolution(double value) {
  _internal_set_grid_a_star_xy_resolution(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.grid_a_star_xy_resolution)
}

// double node_radius = 16;
inline void WarmStartConfig::clear_node_radius() {
  node_radius_ = 0;
}
inline double WarmStartConfig::_internal_node_radius() const {
  return node_radius_;
}
inline double WarmStartConfig::node_radius() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.node_radius)
  return _internal_node_radius();
}
inline void WarmStartConfig::_internal_set_node_radius(double value) {
  
  node_radius_ = value;
}
inline void WarmStartConfig::set_node_radius(double value) {
  _internal_set_node_radius(value);
  // @@protoc_insertion_point(field_set:autoagric.planning.WarmStartConfig.node_radius)
}

// .autoagric.planning.PiecewiseJerkSpeedOptimizerConfig s_curve_config = 17;
inline bool WarmStartConfig::_internal_has_s_curve_config() const {
  return this != internal_default_instance() && s_curve_config_ != nullptr;
}
inline bool WarmStartConfig::has_s_curve_config() const {
  return _internal_has_s_curve_config();
}
inline const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig& WarmStartConfig::_internal_s_curve_config() const {
  const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* p = s_curve_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig&>(
      ::autoagric::planning::_PiecewiseJerkSpeedOptimizerConfig_default_instance_);
}
inline const ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig& WarmStartConfig::s_curve_config() const {
  // @@protoc_insertion_point(field_get:autoagric.planning.WarmStartConfig.s_curve_config)
  return _internal_s_curve_config();
}
inline void WarmStartConfig::unsafe_arena_set_allocated_s_curve_config(
    ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_curve_config_);
  }
  s_curve_config_ = s_curve_config;
  if (s_curve_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.planning.WarmStartConfig.s_curve_config)
}
inline ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::release_s_curve_config() {
  
  ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::unsafe_arena_release_s_curve_config() {
  // @@protoc_insertion_point(field_release:autoagric.planning.WarmStartConfig.s_curve_config)
  
  ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* temp = s_curve_config_;
  s_curve_config_ = nullptr;
  return temp;
}
inline ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::_internal_mutable_s_curve_config() {
  
  if (s_curve_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig>(GetArenaForAllocation());
    s_curve_config_ = p;
  }
  return s_curve_config_;
}
inline ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* WarmStartConfig::mutable_s_curve_config() {
  ::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* _msg = _internal_mutable_s_curve_config();
  // @@protoc_insertion_point(field_mutable:autoagric.planning.WarmStartConfig.s_curve_config)
  return _msg;
}
inline void WarmStartConfig::set_allocated_s_curve_config(::autoagric::planning::PiecewiseJerkSpeedOptimizerConfig* s_curve_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_curve_config_);
  }
  if (s_curve_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s_curve_config));
    if (message_arena != submessage_arena) {
      s_curve_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s_curve_config, submessage_arena);
    }
    
  } else {
    
  }
  s_curve_config_ = s_curve_config;
  // @@protoc_insertion_point(field_set_allocated:autoagric.planning.WarmStartConfig.s_curve_config)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning
}  // namespace autoagric

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::autoagric::planning::DualWarmUpMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::planning::DualWarmUpMode>() {
  return ::autoagric::planning::DualWarmUpMode_descriptor();
}
template <> struct is_proto_enum< ::autoagric::planning::DistanceApproachMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoagric::planning::DistanceApproachMode>() {
  return ::autoagric::planning::DistanceApproachMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fplanning_2fplanner_5fopen_5fspace_5fconfig_2eproto
