// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/common/vehicle_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcommon_2fvehicle_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcommon_2fvehicle_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/canbus/chassis.pb.h"
#include "autoagric/localization/pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcommon_2fvehicle_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcommon_2fvehicle_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcommon_2fvehicle_5fstate_2eproto;
namespace autoagric {
namespace common {
class VehicleState;
struct VehicleStateDefaultTypeInternal;
extern VehicleStateDefaultTypeInternal _VehicleState_default_instance_;
}  // namespace common
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::common::VehicleState* Arena::CreateMaybeMessage<::autoagric::common::VehicleState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace common {

// ===================================================================

class VehicleState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.common.VehicleState) */ {
 public:
  inline VehicleState() : VehicleState(nullptr) {}
  ~VehicleState() override;
  explicit constexpr VehicleState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleState(const VehicleState& from);
  VehicleState(VehicleState&& from) noexcept
    : VehicleState() {
    *this = ::std::move(from);
  }

  inline VehicleState& operator=(const VehicleState& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleState& operator=(VehicleState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleState& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleState* internal_default_instance() {
    return reinterpret_cast<const VehicleState*>(
               &_VehicleState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleState& a, VehicleState& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.common.VehicleState";
  }
  protected:
  explicit VehicleState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 15,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kRollFieldNumber = 5,
    kPitchFieldNumber = 6,
    kYawFieldNumber = 7,
    kHeadingFieldNumber = 8,
    kKappaFieldNumber = 9,
    kLinearVelocityFieldNumber = 10,
    kAngularVelocityFieldNumber = 11,
    kLinearAccelerationFieldNumber = 12,
    kGearFieldNumber = 13,
    kDrivingModeFieldNumber = 14,
    kSteeringPercentageFieldNumber = 16,
  };
  // .autoagric.localization.Pose pose = 15;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::autoagric::localization::Pose& pose() const;
  PROTOBUF_NODISCARD ::autoagric::localization::Pose* release_pose();
  ::autoagric::localization::Pose* mutable_pose();
  void set_allocated_pose(::autoagric::localization::Pose* pose);
  private:
  const ::autoagric::localization::Pose& _internal_pose() const;
  ::autoagric::localization::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::autoagric::localization::Pose* pose);
  ::autoagric::localization::Pose* unsafe_arena_release_pose();

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double timestamp = 4;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // double roll = 5;
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double pitch = 6;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double yaw = 7;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // double heading = 8;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // double kappa = 9;
  void clear_kappa();
  double kappa() const;
  void set_kappa(double value);
  private:
  double _internal_kappa() const;
  void _internal_set_kappa(double value);
  public:

  // double linear_velocity = 10;
  void clear_linear_velocity();
  double linear_velocity() const;
  void set_linear_velocity(double value);
  private:
  double _internal_linear_velocity() const;
  void _internal_set_linear_velocity(double value);
  public:

  // double angular_velocity = 11;
  void clear_angular_velocity();
  double angular_velocity() const;
  void set_angular_velocity(double value);
  private:
  double _internal_angular_velocity() const;
  void _internal_set_angular_velocity(double value);
  public:

  // double linear_acceleration = 12;
  void clear_linear_acceleration();
  double linear_acceleration() const;
  void set_linear_acceleration(double value);
  private:
  double _internal_linear_acceleration() const;
  void _internal_set_linear_acceleration(double value);
  public:

  // .autoagric.canbus.Chassis.GearPosition gear = 13;
  void clear_gear();
  ::autoagric::canbus::Chassis_GearPosition gear() const;
  void set_gear(::autoagric::canbus::Chassis_GearPosition value);
  private:
  ::autoagric::canbus::Chassis_GearPosition _internal_gear() const;
  void _internal_set_gear(::autoagric::canbus::Chassis_GearPosition value);
  public:

  // .autoagric.canbus.Chassis.DrivingMode driving_mode = 14;
  void clear_driving_mode();
  ::autoagric::canbus::Chassis_DrivingMode driving_mode() const;
  void set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value);
  private:
  ::autoagric::canbus::Chassis_DrivingMode _internal_driving_mode() const;
  void _internal_set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value);
  public:

  // double steering_percentage = 16;
  void clear_steering_percentage();
  double steering_percentage() const;
  void set_steering_percentage(double value);
  private:
  double _internal_steering_percentage() const;
  void _internal_set_steering_percentage(double value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.common.VehicleState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::autoagric::localization::Pose* pose_;
  double x_;
  double y_;
  double z_;
  double timestamp_;
  double roll_;
  double pitch_;
  double yaw_;
  double heading_;
  double kappa_;
  double linear_velocity_;
  double angular_velocity_;
  double linear_acceleration_;
  int gear_;
  int driving_mode_;
  double steering_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_autoagric_2fcommon_2fvehicle_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleState

// double x = 1;
inline void VehicleState::clear_x() {
  x_ = 0;
}
inline double VehicleState::_internal_x() const {
  return x_;
}
inline double VehicleState::x() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.x)
  return _internal_x();
}
inline void VehicleState::_internal_set_x(double value) {
  
  x_ = value;
}
inline void VehicleState::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.x)
}

// double y = 2;
inline void VehicleState::clear_y() {
  y_ = 0;
}
inline double VehicleState::_internal_y() const {
  return y_;
}
inline double VehicleState::y() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.y)
  return _internal_y();
}
inline void VehicleState::_internal_set_y(double value) {
  
  y_ = value;
}
inline void VehicleState::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.y)
}

// double z = 3;
inline void VehicleState::clear_z() {
  z_ = 0;
}
inline double VehicleState::_internal_z() const {
  return z_;
}
inline double VehicleState::z() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.z)
  return _internal_z();
}
inline void VehicleState::_internal_set_z(double value) {
  
  z_ = value;
}
inline void VehicleState::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.z)
}

// double timestamp = 4;
inline void VehicleState::clear_timestamp() {
  timestamp_ = 0;
}
inline double VehicleState::_internal_timestamp() const {
  return timestamp_;
}
inline double VehicleState::timestamp() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.timestamp)
  return _internal_timestamp();
}
inline void VehicleState::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void VehicleState::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.timestamp)
}

// double roll = 5;
inline void VehicleState::clear_roll() {
  roll_ = 0;
}
inline double VehicleState::_internal_roll() const {
  return roll_;
}
inline double VehicleState::roll() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.roll)
  return _internal_roll();
}
inline void VehicleState::_internal_set_roll(double value) {
  
  roll_ = value;
}
inline void VehicleState::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.roll)
}

// double pitch = 6;
inline void VehicleState::clear_pitch() {
  pitch_ = 0;
}
inline double VehicleState::_internal_pitch() const {
  return pitch_;
}
inline double VehicleState::pitch() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.pitch)
  return _internal_pitch();
}
inline void VehicleState::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void VehicleState::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.pitch)
}

// double yaw = 7;
inline void VehicleState::clear_yaw() {
  yaw_ = 0;
}
inline double VehicleState::_internal_yaw() const {
  return yaw_;
}
inline double VehicleState::yaw() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.yaw)
  return _internal_yaw();
}
inline void VehicleState::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void VehicleState::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.yaw)
}

// double heading = 8;
inline void VehicleState::clear_heading() {
  heading_ = 0;
}
inline double VehicleState::_internal_heading() const {
  return heading_;
}
inline double VehicleState::heading() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.heading)
  return _internal_heading();
}
inline void VehicleState::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void VehicleState::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.heading)
}

// double kappa = 9;
inline void VehicleState::clear_kappa() {
  kappa_ = 0;
}
inline double VehicleState::_internal_kappa() const {
  return kappa_;
}
inline double VehicleState::kappa() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.kappa)
  return _internal_kappa();
}
inline void VehicleState::_internal_set_kappa(double value) {
  
  kappa_ = value;
}
inline void VehicleState::set_kappa(double value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.kappa)
}

// double linear_velocity = 10;
inline void VehicleState::clear_linear_velocity() {
  linear_velocity_ = 0;
}
inline double VehicleState::_internal_linear_velocity() const {
  return linear_velocity_;
}
inline double VehicleState::linear_velocity() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.linear_velocity)
  return _internal_linear_velocity();
}
inline void VehicleState::_internal_set_linear_velocity(double value) {
  
  linear_velocity_ = value;
}
inline void VehicleState::set_linear_velocity(double value) {
  _internal_set_linear_velocity(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.linear_velocity)
}

// double angular_velocity = 11;
inline void VehicleState::clear_angular_velocity() {
  angular_velocity_ = 0;
}
inline double VehicleState::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline double VehicleState::angular_velocity() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.angular_velocity)
  return _internal_angular_velocity();
}
inline void VehicleState::_internal_set_angular_velocity(double value) {
  
  angular_velocity_ = value;
}
inline void VehicleState::set_angular_velocity(double value) {
  _internal_set_angular_velocity(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.angular_velocity)
}

// double linear_acceleration = 12;
inline void VehicleState::clear_linear_acceleration() {
  linear_acceleration_ = 0;
}
inline double VehicleState::_internal_linear_acceleration() const {
  return linear_acceleration_;
}
inline double VehicleState::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.linear_acceleration)
  return _internal_linear_acceleration();
}
inline void VehicleState::_internal_set_linear_acceleration(double value) {
  
  linear_acceleration_ = value;
}
inline void VehicleState::set_linear_acceleration(double value) {
  _internal_set_linear_acceleration(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.linear_acceleration)
}

// .autoagric.canbus.Chassis.GearPosition gear = 13;
inline void VehicleState::clear_gear() {
  gear_ = 0;
}
inline ::autoagric::canbus::Chassis_GearPosition VehicleState::_internal_gear() const {
  return static_cast< ::autoagric::canbus::Chassis_GearPosition >(gear_);
}
inline ::autoagric::canbus::Chassis_GearPosition VehicleState::gear() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.gear)
  return _internal_gear();
}
inline void VehicleState::_internal_set_gear(::autoagric::canbus::Chassis_GearPosition value) {
  
  gear_ = value;
}
inline void VehicleState::set_gear(::autoagric::canbus::Chassis_GearPosition value) {
  _internal_set_gear(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.gear)
}

// .autoagric.canbus.Chassis.DrivingMode driving_mode = 14;
inline void VehicleState::clear_driving_mode() {
  driving_mode_ = 0;
}
inline ::autoagric::canbus::Chassis_DrivingMode VehicleState::_internal_driving_mode() const {
  return static_cast< ::autoagric::canbus::Chassis_DrivingMode >(driving_mode_);
}
inline ::autoagric::canbus::Chassis_DrivingMode VehicleState::driving_mode() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.driving_mode)
  return _internal_driving_mode();
}
inline void VehicleState::_internal_set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value) {
  
  driving_mode_ = value;
}
inline void VehicleState::set_driving_mode(::autoagric::canbus::Chassis_DrivingMode value) {
  _internal_set_driving_mode(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.driving_mode)
}

// .autoagric.localization.Pose pose = 15;
inline bool VehicleState::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool VehicleState::has_pose() const {
  return _internal_has_pose();
}
inline const ::autoagric::localization::Pose& VehicleState::_internal_pose() const {
  const ::autoagric::localization::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::localization::Pose&>(
      ::autoagric::localization::_Pose_default_instance_);
}
inline const ::autoagric::localization::Pose& VehicleState::pose() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.pose)
  return _internal_pose();
}
inline void VehicleState::unsafe_arena_set_allocated_pose(
    ::autoagric::localization::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.common.VehicleState.pose)
}
inline ::autoagric::localization::Pose* VehicleState::release_pose() {
  
  ::autoagric::localization::Pose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::localization::Pose* VehicleState::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:autoagric.common.VehicleState.pose)
  
  ::autoagric::localization::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::autoagric::localization::Pose* VehicleState::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::localization::Pose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::autoagric::localization::Pose* VehicleState::mutable_pose() {
  ::autoagric::localization::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:autoagric.common.VehicleState.pose)
  return _msg;
}
inline void VehicleState::set_allocated_pose(::autoagric::localization::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:autoagric.common.VehicleState.pose)
}

// double steering_percentage = 16;
inline void VehicleState::clear_steering_percentage() {
  steering_percentage_ = 0;
}
inline double VehicleState::_internal_steering_percentage() const {
  return steering_percentage_;
}
inline double VehicleState::steering_percentage() const {
  // @@protoc_insertion_point(field_get:autoagric.common.VehicleState.steering_percentage)
  return _internal_steering_percentage();
}
inline void VehicleState::_internal_set_steering_percentage(double value) {
  
  steering_percentage_ = value;
}
inline void VehicleState::set_steering_percentage(double value) {
  _internal_set_steering_percentage(value);
  // @@protoc_insertion_point(field_set:autoagric.common.VehicleState.steering_percentage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcommon_2fvehicle_5fstate_2eproto
