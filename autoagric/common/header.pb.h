// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/common/header.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcommon_2fheader_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcommon_2fheader_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "autoagric/common/error_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_autoagric_2fcommon_2fheader_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_autoagric_2fcommon_2fheader_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcommon_2fheader_2eproto;
namespace autoagric {
namespace common {
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace common
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> ::autoagric::common::Header* Arena::CreateMaybeMessage<::autoagric::common::Header>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autoagric {
namespace common {

// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:autoagric.common.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autoagric.common.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleNameFieldNumber = 2,
    kFrameIdFieldNumber = 9,
    kStatusFieldNumber = 8,
    kTimestampSecFieldNumber = 1,
    kLidarTimestampFieldNumber = 4,
    kCameraTimestampFieldNumber = 5,
    kSequenceNumFieldNumber = 3,
    kVersionFieldNumber = 7,
    kRadarTimestampFieldNumber = 6,
  };
  // string module_name = 2;
  void clear_module_name();
  const std::string& module_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_name();
  PROTOBUF_NODISCARD std::string* release_module_name();
  void set_allocated_module_name(std::string* module_name);
  private:
  const std::string& _internal_module_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_name(const std::string& value);
  std::string* _internal_mutable_module_name();
  public:

  // string frame_id = 9;
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_NODISCARD std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .autoagric.common.StatusPb status = 8;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::autoagric::common::StatusPb& status() const;
  PROTOBUF_NODISCARD ::autoagric::common::StatusPb* release_status();
  ::autoagric::common::StatusPb* mutable_status();
  void set_allocated_status(::autoagric::common::StatusPb* status);
  private:
  const ::autoagric::common::StatusPb& _internal_status() const;
  ::autoagric::common::StatusPb* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::autoagric::common::StatusPb* status);
  ::autoagric::common::StatusPb* unsafe_arena_release_status();

  // optional double timestamp_sec = 1;
  bool has_timestamp_sec() const;
  private:
  bool _internal_has_timestamp_sec() const;
  public:
  void clear_timestamp_sec();
  double timestamp_sec() const;
  void set_timestamp_sec(double value);
  private:
  double _internal_timestamp_sec() const;
  void _internal_set_timestamp_sec(double value);
  public:

  // uint64 lidar_timestamp = 4;
  void clear_lidar_timestamp();
  uint64_t lidar_timestamp() const;
  void set_lidar_timestamp(uint64_t value);
  private:
  uint64_t _internal_lidar_timestamp() const;
  void _internal_set_lidar_timestamp(uint64_t value);
  public:

  // uint64 camera_timestamp = 5;
  void clear_camera_timestamp();
  uint64_t camera_timestamp() const;
  void set_camera_timestamp(uint64_t value);
  private:
  uint64_t _internal_camera_timestamp() const;
  void _internal_set_camera_timestamp(uint64_t value);
  public:

  // uint32 sequence_num = 3;
  void clear_sequence_num();
  uint32_t sequence_num() const;
  void set_sequence_num(uint32_t value);
  private:
  uint32_t _internal_sequence_num() const;
  void _internal_set_sequence_num(uint32_t value);
  public:

  // uint32 version = 7;
  void clear_version();
  uint32_t version() const;
  void set_version(uint32_t value);
  private:
  uint32_t _internal_version() const;
  void _internal_set_version(uint32_t value);
  public:

  // uint64 radar_timestamp = 6;
  void clear_radar_timestamp();
  uint64_t radar_timestamp() const;
  void set_radar_timestamp(uint64_t value);
  private:
  uint64_t _internal_radar_timestamp() const;
  void _internal_set_radar_timestamp(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:autoagric.common.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::autoagric::common::StatusPb* status_;
  double timestamp_sec_;
  uint64_t lidar_timestamp_;
  uint64_t camera_timestamp_;
  uint32_t sequence_num_;
  uint32_t version_;
  uint64_t radar_timestamp_;
  friend struct ::TableStruct_autoagric_2fcommon_2fheader_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// optional double timestamp_sec = 1;
inline bool Header::_internal_has_timestamp_sec() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Header::has_timestamp_sec() const {
  return _internal_has_timestamp_sec();
}
inline void Header::clear_timestamp_sec() {
  timestamp_sec_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Header::_internal_timestamp_sec() const {
  return timestamp_sec_;
}
inline double Header::timestamp_sec() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.timestamp_sec)
  return _internal_timestamp_sec();
}
inline void Header::_internal_set_timestamp_sec(double value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_sec_ = value;
}
inline void Header::set_timestamp_sec(double value) {
  _internal_set_timestamp_sec(value);
  // @@protoc_insertion_point(field_set:autoagric.common.Header.timestamp_sec)
}

// string module_name = 2;
inline void Header::clear_module_name() {
  module_name_.ClearToEmpty();
}
inline const std::string& Header::module_name() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.module_name)
  return _internal_module_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_module_name(ArgT0&& arg0, ArgT... args) {
 
 module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autoagric.common.Header.module_name)
}
inline std::string* Header::mutable_module_name() {
  std::string* _s = _internal_mutable_module_name();
  // @@protoc_insertion_point(field_mutable:autoagric.common.Header.module_name)
  return _s;
}
inline const std::string& Header::_internal_module_name() const {
  return module_name_.Get();
}
inline void Header::_internal_set_module_name(const std::string& value) {
  
  module_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_module_name() {
  
  return module_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_module_name() {
  // @@protoc_insertion_point(field_release:autoagric.common.Header.module_name)
  return module_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_module_name(std::string* module_name) {
  if (module_name != nullptr) {
    
  } else {
    
  }
  module_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (module_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    module_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autoagric.common.Header.module_name)
}

// uint32 sequence_num = 3;
inline void Header::clear_sequence_num() {
  sequence_num_ = 0u;
}
inline uint32_t Header::_internal_sequence_num() const {
  return sequence_num_;
}
inline uint32_t Header::sequence_num() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.sequence_num)
  return _internal_sequence_num();
}
inline void Header::_internal_set_sequence_num(uint32_t value) {
  
  sequence_num_ = value;
}
inline void Header::set_sequence_num(uint32_t value) {
  _internal_set_sequence_num(value);
  // @@protoc_insertion_point(field_set:autoagric.common.Header.sequence_num)
}

// uint64 lidar_timestamp = 4;
inline void Header::clear_lidar_timestamp() {
  lidar_timestamp_ = uint64_t{0u};
}
inline uint64_t Header::_internal_lidar_timestamp() const {
  return lidar_timestamp_;
}
inline uint64_t Header::lidar_timestamp() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.lidar_timestamp)
  return _internal_lidar_timestamp();
}
inline void Header::_internal_set_lidar_timestamp(uint64_t value) {
  
  lidar_timestamp_ = value;
}
inline void Header::set_lidar_timestamp(uint64_t value) {
  _internal_set_lidar_timestamp(value);
  // @@protoc_insertion_point(field_set:autoagric.common.Header.lidar_timestamp)
}

// uint64 camera_timestamp = 5;
inline void Header::clear_camera_timestamp() {
  camera_timestamp_ = uint64_t{0u};
}
inline uint64_t Header::_internal_camera_timestamp() const {
  return camera_timestamp_;
}
inline uint64_t Header::camera_timestamp() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.camera_timestamp)
  return _internal_camera_timestamp();
}
inline void Header::_internal_set_camera_timestamp(uint64_t value) {
  
  camera_timestamp_ = value;
}
inline void Header::set_camera_timestamp(uint64_t value) {
  _internal_set_camera_timestamp(value);
  // @@protoc_insertion_point(field_set:autoagric.common.Header.camera_timestamp)
}

// uint64 radar_timestamp = 6;
inline void Header::clear_radar_timestamp() {
  radar_timestamp_ = uint64_t{0u};
}
inline uint64_t Header::_internal_radar_timestamp() const {
  return radar_timestamp_;
}
inline uint64_t Header::radar_timestamp() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.radar_timestamp)
  return _internal_radar_timestamp();
}
inline void Header::_internal_set_radar_timestamp(uint64_t value) {
  
  radar_timestamp_ = value;
}
inline void Header::set_radar_timestamp(uint64_t value) {
  _internal_set_radar_timestamp(value);
  // @@protoc_insertion_point(field_set:autoagric.common.Header.radar_timestamp)
}

// uint32 version = 7;
inline void Header::clear_version() {
  version_ = 0u;
}
inline uint32_t Header::_internal_version() const {
  return version_;
}
inline uint32_t Header::version() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.version)
  return _internal_version();
}
inline void Header::_internal_set_version(uint32_t value) {
  
  version_ = value;
}
inline void Header::set_version(uint32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:autoagric.common.Header.version)
}

// .autoagric.common.StatusPb status = 8;
inline bool Header::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Header::has_status() const {
  return _internal_has_status();
}
inline const ::autoagric::common::StatusPb& Header::_internal_status() const {
  const ::autoagric::common::StatusPb* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::autoagric::common::StatusPb&>(
      ::autoagric::common::_StatusPb_default_instance_);
}
inline const ::autoagric::common::StatusPb& Header::status() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.status)
  return _internal_status();
}
inline void Header::unsafe_arena_set_allocated_status(
    ::autoagric::common::StatusPb* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoagric.common.Header.status)
}
inline ::autoagric::common::StatusPb* Header::release_status() {
  
  ::autoagric::common::StatusPb* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autoagric::common::StatusPb* Header::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:autoagric.common.Header.status)
  
  ::autoagric::common::StatusPb* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::autoagric::common::StatusPb* Header::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::autoagric::common::StatusPb>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::autoagric::common::StatusPb* Header::mutable_status() {
  ::autoagric::common::StatusPb* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:autoagric.common.Header.status)
  return _msg;
}
inline void Header::set_allocated_status(::autoagric::common::StatusPb* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:autoagric.common.Header.status)
}

// string frame_id = 9;
inline void Header::clear_frame_id() {
  frame_id_.ClearToEmpty();
}
inline const std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:autoagric.common.Header.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_frame_id(ArgT0&& arg0, ArgT... args) {
 
 frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autoagric.common.Header.frame_id)
}
inline std::string* Header::mutable_frame_id() {
  std::string* _s = _internal_mutable_frame_id();
  // @@protoc_insertion_point(field_mutable:autoagric.common.Header.frame_id)
  return _s;
}
inline const std::string& Header::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void Header::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:autoagric.common.Header.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autoagric.common.Header.frame_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace autoagric

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_autoagric_2fcommon_2fheader_2eproto
