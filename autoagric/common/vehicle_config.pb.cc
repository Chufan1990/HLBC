// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/common/vehicle_config.proto

#include "autoagric/common/vehicle_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace common {
constexpr Transform::Transform(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , translation_(nullptr)
  , rotation_(nullptr){}
struct TransformDefaultTypeInternal {
  constexpr TransformDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformDefaultTypeInternal _Transform_default_instance_;
constexpr Extrinsics::Extrinsics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tansforms_(){}
struct ExtrinsicsDefaultTypeInternal {
  constexpr ExtrinsicsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExtrinsicsDefaultTypeInternal() {}
  union {
    Extrinsics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExtrinsicsDefaultTypeInternal _Extrinsics_default_instance_;
constexpr VehicleID::VehicleID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vin_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plate_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , other_unique_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VehicleIDDefaultTypeInternal {
  constexpr VehicleIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleIDDefaultTypeInternal() {}
  union {
    VehicleID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleIDDefaultTypeInternal _VehicleID_default_instance_;
constexpr LatencyParam::LatencyParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dead_time_(0)
  , rise_time_(0)
  , peak_time_(0)
  , settling_time_(0){}
struct LatencyParamDefaultTypeInternal {
  constexpr LatencyParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LatencyParamDefaultTypeInternal() {}
  union {
    LatencyParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LatencyParamDefaultTypeInternal _LatencyParam_default_instance_;
constexpr VehicleParam::VehicleParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehicle_id_(nullptr)
  , steering_latency_param_(nullptr)
  , throttle_latency_param_(nullptr)
  , brake_latency_param_(nullptr)
  , front_edge_to_center_(0)
  , back_edge_to_center_(0)
  , left_edge_to_center_(0)
  , right_edge_to_center_(0)
  , length_(0)
  , width_(0)
  , height_(0)
  , min_turn_radius_(0)
  , brand_(0)

  , max_abs_speed_when_stopped_(0)
  , max_acceleration_(0)
  , max_deceleration_(0)
  , max_steer_angle_(0)
  , max_steer_angle_rate_(0)
  , min_steer_angle_rate_(0)
  , steer_ratio_(0)
  , wheel_base_(0)
  , wheel_rolling_radius_(0)
  , brake_deadzone_(0)
  , throttle_deadzone_(0)
  , steer_offset_(0){}
struct VehicleParamDefaultTypeInternal {
  constexpr VehicleParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleParamDefaultTypeInternal() {}
  union {
    VehicleParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleParamDefaultTypeInternal _VehicleParam_default_instance_;
constexpr VehicleConfig::VehicleConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , vehicle_param_(nullptr)
  , extrinsics_(nullptr){}
struct VehicleConfigDefaultTypeInternal {
  constexpr VehicleConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleConfigDefaultTypeInternal() {}
  union {
    VehicleConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleConfigDefaultTypeInternal _VehicleConfig_default_instance_;
}  // namespace common
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2fcommon_2fvehicle_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2fcommon_2fvehicle_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::Transform, source_frame_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::Transform, target_frame_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::Transform, translation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::Transform, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::Extrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::Extrinsics, tansforms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleID, vin_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleID, plate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleID, other_unique_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::LatencyParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::LatencyParam, dead_time_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::LatencyParam, rise_time_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::LatencyParam, peak_time_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::LatencyParam, settling_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, brand_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, front_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, back_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, left_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, right_edge_to_center_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, length_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, width_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, height_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, min_turn_radius_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, max_steer_angle_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, max_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, min_steer_angle_rate_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, steer_ratio_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, wheel_base_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, wheel_rolling_radius_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, max_abs_speed_when_stopped_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, brake_deadzone_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, throttle_deadzone_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, steering_latency_param_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, throttle_latency_param_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, brake_latency_param_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleParam, steer_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleConfig, header_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleConfig, vehicle_param_),
  PROTOBUF_FIELD_OFFSET(::autoagric::common::VehicleConfig, extrinsics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::autoagric::common::Transform)},
  { 10, -1, -1, sizeof(::autoagric::common::Extrinsics)},
  { 17, -1, -1, sizeof(::autoagric::common::VehicleID)},
  { 26, -1, -1, sizeof(::autoagric::common::LatencyParam)},
  { 36, -1, -1, sizeof(::autoagric::common::VehicleParam)},
  { 67, -1, -1, sizeof(::autoagric::common::VehicleConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::common::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::common::_Extrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::common::_VehicleID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::common::_LatencyParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::common::_VehicleParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::common::_VehicleConfig_default_instance_),
};

const char descriptor_table_protodef_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%autoagric/common/vehicle_config.proto\022"
  "\020autoagric.common\032\035autoagric/common/head"
  "er.proto\032\037autoagric/common/geometry.prot"
  "o\"\227\001\n\tTransform\022\024\n\014source_frame\030\001 \001(\014\022\024\n"
  "\014target_frame\030\002 \001(\014\022.\n\013translation\030\003 \001(\013"
  "2\031.autoagric.common.Point3D\022.\n\010rotation\030"
  "\004 \001(\0132\034.autoagric.common.Quaternion\"<\n\nE"
  "xtrinsics\022.\n\ttansforms\030\001 \003(\0132\033.autoagric"
  ".common.Transform\"@\n\tVehicleID\022\013\n\003vin\030\001 "
  "\001(\t\022\r\n\005plate\030\002 \001(\t\022\027\n\017other_unique_id\030\003 "
  "\001(\t\"^\n\014LatencyParam\022\021\n\tdead_time\030\001 \001(\001\022\021"
  "\n\trise_time\030\002 \001(\001\022\021\n\tpeak_time\030\003 \001(\001\022\025\n\r"
  "settling_time\030\004 \001(\001\"\246\006\n\014VehicleParam\022-\n\005"
  "brand\030\001 \001(\0162\036.autoagric.common.VehicleBr"
  "and\022/\n\nvehicle_id\030\002 \001(\0132\033.autoagric.comm"
  "on.VehicleID\022\034\n\024front_edge_to_center\030\003 \001"
  "(\001\022\033\n\023back_edge_to_center\030\004 \001(\001\022\033\n\023left_"
  "edge_to_center\030\005 \001(\001\022\034\n\024right_edge_to_ce"
  "nter\030\006 \001(\001\022\016\n\006length\030\007 \001(\001\022\r\n\005width\030\010 \001("
  "\001\022\016\n\006height\030\t \001(\001\022\027\n\017min_turn_radius\030\n \001"
  "(\001\022\030\n\020max_acceleration\030\013 \001(\001\022\030\n\020max_dece"
  "leration\030\014 \001(\001\022\027\n\017max_steer_angle\030\r \001(\001\022"
  "\034\n\024max_steer_angle_rate\030\016 \001(\001\022\034\n\024min_ste"
  "er_angle_rate\030\017 \001(\001\022\023\n\013steer_ratio\030\020 \001(\001"
  "\022\022\n\nwheel_base\030\021 \001(\001\022\034\n\024wheel_rolling_ra"
  "dius\030\022 \001(\001\022\"\n\032max_abs_speed_when_stopped"
  "\030\023 \001(\002\022\026\n\016brake_deadzone\030\024 \001(\001\022\031\n\021thrott"
  "le_deadzone\030\025 \001(\001\022>\n\026steering_latency_pa"
  "ram\030\026 \001(\0132\036.autoagric.common.LatencyPara"
  "m\022>\n\026throttle_latency_param\030\027 \001(\0132\036.auto"
  "agric.common.LatencyParam\022;\n\023brake_laten"
  "cy_param\030\030 \001(\0132\036.autoagric.common.Latenc"
  "yParam\022\024\n\014steer_offset\030\031 \001(\001\"\242\001\n\rVehicle"
  "Config\022(\n\006header\030\001 \001(\0132\030.autoagric.commo"
  "n.Header\0225\n\rvehicle_param\030\002 \001(\0132\036.autoag"
  "ric.common.VehicleParam\0220\n\nextrinsics\030\003 "
  "\001(\0132\034.autoagric.common.Extrinsics*\211\001\n\014Ve"
  "hicleBrand\022\017\n\013LINCOLN_MKZ\020\000\022\007\n\003GEM\020\001\022\t\n\005"
  "LEXUS\020\002\022\013\n\007TRANSIT\020\003\022\007\n\003GE3\020\004\022\007\n\003WEY\020\005\022\014"
  "\n\010ZHONGYUN\020\006\022\006\n\002CH\020\007\022\010\n\004DKIT\020\010\022\n\n\006NEOLIX"
  "\020\t\022\t\n\005AOWEI\020\nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_deps[2] = {
  &::descriptor_table_autoagric_2fcommon_2fgeometry_2eproto,
  &::descriptor_table_autoagric_2fcommon_2fheader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto = {
  false, false, 1621, descriptor_table_protodef_autoagric_2fcommon_2fvehicle_5fconfig_2eproto, "autoagric/common/vehicle_config.proto", 
  &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once, descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_deps, 2, 6,
  schemas, file_default_instances, TableStruct_autoagric_2fcommon_2fvehicle_5fconfig_2eproto::offsets,
  file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto, file_level_enum_descriptors_autoagric_2fcommon_2fvehicle_5fconfig_2eproto, file_level_service_descriptors_autoagric_2fcommon_2fvehicle_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_getter() {
  return &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2fcommon_2fvehicle_5fconfig_2eproto(&descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto);
namespace autoagric {
namespace common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleBrand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto);
  return file_level_enum_descriptors_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[0];
}
bool VehicleBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Transform::_Internal {
 public:
  static const ::autoagric::common::Point3D& translation(const Transform* msg);
  static const ::autoagric::common::Quaternion& rotation(const Transform* msg);
};

const ::autoagric::common::Point3D&
Transform::_Internal::translation(const Transform* msg) {
  return *msg->translation_;
}
const ::autoagric::common::Quaternion&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->rotation_;
}
void Transform::clear_translation() {
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
}
void Transform::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.common.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_frame().empty()) {
    source_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_frame(), 
      GetArenaForAllocation());
  }
  target_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_frame().empty()) {
    target_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_translation()) {
    translation_ = new ::autoagric::common::Point3D(*from.translation_);
  } else {
    translation_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::autoagric::common::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.common.Transform)
}

inline void Transform::SharedCtor() {
source_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_frame_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&translation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&translation_)) + sizeof(rotation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:autoagric.common.Transform)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  source_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete translation_;
  if (this != internal_default_instance()) delete rotation_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.common.Transform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_frame_.ClearToEmpty();
  target_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && translation_ != nullptr) {
    delete translation_;
  }
  translation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes source_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes target_frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D translation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Quaternion rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.common.Transform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes source_frame = 1;
  if (!this->_internal_source_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_source_frame(), target);
  }

  // bytes target_frame = 2;
  if (!this->_internal_target_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_target_frame(), target);
  }

  // .autoagric.common.Point3D translation = 3;
  if (this->_internal_has_translation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::translation(this), target, stream);
  }

  // .autoagric.common.Quaternion rotation = 4;
  if (this->_internal_has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.common.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.common.Transform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes source_frame = 1;
  if (!this->_internal_source_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_source_frame());
  }

  // bytes target_frame = 2;
  if (!this->_internal_target_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_target_frame());
  }

  // .autoagric.common.Point3D translation = 3;
  if (this->_internal_has_translation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *translation_);
  }

  // .autoagric.common.Quaternion rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform::GetClassData() const { return &_class_data_; }

void Transform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transform *>(to)->MergeFrom(
      static_cast<const Transform &>(from));
}


void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.common.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_frame().empty()) {
    _internal_set_source_frame(from._internal_source_frame());
  }
  if (!from._internal_target_frame().empty()) {
    _internal_set_target_frame(from._internal_target_frame());
  }
  if (from._internal_has_translation()) {
    _internal_mutable_translation()->::autoagric::common::Point3D::MergeFrom(from._internal_translation());
  }
  if (from._internal_has_rotation()) {
    _internal_mutable_rotation()->::autoagric::common::Quaternion::MergeFrom(from._internal_rotation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.common.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &source_frame_, lhs_arena,
      &other->source_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_frame_, lhs_arena,
      &other->target_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, rotation_)
      + sizeof(Transform::rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, translation_)>(
          reinterpret_cast<char*>(&translation_),
          reinterpret_cast<char*>(&other->translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[0]);
}

// ===================================================================

class Extrinsics::_Internal {
 public:
};

Extrinsics::Extrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tansforms_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.common.Extrinsics)
}
Extrinsics::Extrinsics(const Extrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tansforms_(from.tansforms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autoagric.common.Extrinsics)
}

inline void Extrinsics::SharedCtor() {
}

Extrinsics::~Extrinsics() {
  // @@protoc_insertion_point(destructor:autoagric.common.Extrinsics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Extrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Extrinsics::ArenaDtor(void* object) {
  Extrinsics* _this = reinterpret_cast< Extrinsics* >(object);
  (void)_this;
}
void Extrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Extrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.common.Extrinsics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tansforms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .autoagric.common.Transform tansforms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tansforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Extrinsics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.common.Extrinsics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autoagric.common.Transform tansforms = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tansforms_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tansforms(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.common.Extrinsics)
  return target;
}

size_t Extrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.common.Extrinsics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autoagric.common.Transform tansforms = 1;
  total_size += 1UL * this->_internal_tansforms_size();
  for (const auto& msg : this->tansforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Extrinsics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Extrinsics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Extrinsics::GetClassData() const { return &_class_data_; }

void Extrinsics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Extrinsics *>(to)->MergeFrom(
      static_cast<const Extrinsics &>(from));
}


void Extrinsics::MergeFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.common.Extrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tansforms_.MergeFrom(from.tansforms_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Extrinsics::CopyFrom(const Extrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.common.Extrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsics::IsInitialized() const {
  return true;
}

void Extrinsics::InternalSwap(Extrinsics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tansforms_.InternalSwap(&other->tansforms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extrinsics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[1]);
}

// ===================================================================

class VehicleID::_Internal {
 public:
};

VehicleID::VehicleID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.common.VehicleID)
}
VehicleID::VehicleID(const VehicleID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vin().empty()) {
    vin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vin(), 
      GetArenaForAllocation());
  }
  plate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    plate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plate().empty()) {
    plate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plate(), 
      GetArenaForAllocation());
  }
  other_unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    other_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_other_unique_id().empty()) {
    other_unique_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_other_unique_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.common.VehicleID)
}

inline void VehicleID::SharedCtor() {
vin_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vin_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
plate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  plate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
other_unique_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  other_unique_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleID::~VehicleID() {
  // @@protoc_insertion_point(destructor:autoagric.common.VehicleID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vin_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  plate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  other_unique_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VehicleID::ArenaDtor(void* object) {
  VehicleID* _this = reinterpret_cast< VehicleID* >(object);
  (void)_this;
}
void VehicleID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleID::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.common.VehicleID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vin_.ClearToEmpty();
  plate_.ClearToEmpty();
  other_unique_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vin();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.common.VehicleID.vin"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string plate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_plate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.common.VehicleID.plate"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string other_unique_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_other_unique_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "autoagric.common.VehicleID.other_unique_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.common.VehicleID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vin = 1;
  if (!this->_internal_vin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vin().data(), static_cast<int>(this->_internal_vin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.common.VehicleID.vin");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vin(), target);
  }

  // string plate = 2;
  if (!this->_internal_plate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plate().data(), static_cast<int>(this->_internal_plate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.common.VehicleID.plate");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_plate(), target);
  }

  // string other_unique_id = 3;
  if (!this->_internal_other_unique_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_other_unique_id().data(), static_cast<int>(this->_internal_other_unique_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "autoagric.common.VehicleID.other_unique_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_other_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.common.VehicleID)
  return target;
}

size_t VehicleID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.common.VehicleID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vin = 1;
  if (!this->_internal_vin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vin());
  }

  // string plate = 2;
  if (!this->_internal_plate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plate());
  }

  // string other_unique_id = 3;
  if (!this->_internal_other_unique_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_other_unique_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleID::GetClassData() const { return &_class_data_; }

void VehicleID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleID *>(to)->MergeFrom(
      static_cast<const VehicleID &>(from));
}


void VehicleID::MergeFrom(const VehicleID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.common.VehicleID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vin().empty()) {
    _internal_set_vin(from._internal_vin());
  }
  if (!from._internal_plate().empty()) {
    _internal_set_plate(from._internal_plate());
  }
  if (!from._internal_other_unique_id().empty()) {
    _internal_set_other_unique_id(from._internal_other_unique_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleID::CopyFrom(const VehicleID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.common.VehicleID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleID::IsInitialized() const {
  return true;
}

void VehicleID::InternalSwap(VehicleID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &vin_, lhs_arena,
      &other->vin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plate_, lhs_arena,
      &other->plate_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &other_unique_id_, lhs_arena,
      &other->other_unique_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[2]);
}

// ===================================================================

class LatencyParam::_Internal {
 public:
};

LatencyParam::LatencyParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.common.LatencyParam)
}
LatencyParam::LatencyParam(const LatencyParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dead_time_, &from.dead_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
    reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  // @@protoc_insertion_point(copy_constructor:autoagric.common.LatencyParam)
}

inline void LatencyParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dead_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&settling_time_) -
    reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
}

LatencyParam::~LatencyParam() {
  // @@protoc_insertion_point(destructor:autoagric.common.LatencyParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LatencyParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LatencyParam::ArenaDtor(void* object) {
  LatencyParam* _this = reinterpret_cast< LatencyParam* >(object);
  (void)_this;
}
void LatencyParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LatencyParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LatencyParam::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.common.LatencyParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dead_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settling_time_) -
      reinterpret_cast<char*>(&dead_time_)) + sizeof(settling_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double dead_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          dead_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rise_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          rise_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double peak_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          peak_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double settling_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          settling_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.common.LatencyParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double dead_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dead_time = this->_internal_dead_time();
  uint64_t raw_dead_time;
  memcpy(&raw_dead_time, &tmp_dead_time, sizeof(tmp_dead_time));
  if (raw_dead_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dead_time(), target);
  }

  // double rise_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rise_time = this->_internal_rise_time();
  uint64_t raw_rise_time;
  memcpy(&raw_rise_time, &tmp_rise_time, sizeof(tmp_rise_time));
  if (raw_rise_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rise_time(), target);
  }

  // double peak_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_peak_time = this->_internal_peak_time();
  uint64_t raw_peak_time;
  memcpy(&raw_peak_time, &tmp_peak_time, sizeof(tmp_peak_time));
  if (raw_peak_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_peak_time(), target);
  }

  // double settling_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_settling_time = this->_internal_settling_time();
  uint64_t raw_settling_time;
  memcpy(&raw_settling_time, &tmp_settling_time, sizeof(tmp_settling_time));
  if (raw_settling_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_settling_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.common.LatencyParam)
  return target;
}

size_t LatencyParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.common.LatencyParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dead_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dead_time = this->_internal_dead_time();
  uint64_t raw_dead_time;
  memcpy(&raw_dead_time, &tmp_dead_time, sizeof(tmp_dead_time));
  if (raw_dead_time != 0) {
    total_size += 1 + 8;
  }

  // double rise_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rise_time = this->_internal_rise_time();
  uint64_t raw_rise_time;
  memcpy(&raw_rise_time, &tmp_rise_time, sizeof(tmp_rise_time));
  if (raw_rise_time != 0) {
    total_size += 1 + 8;
  }

  // double peak_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_peak_time = this->_internal_peak_time();
  uint64_t raw_peak_time;
  memcpy(&raw_peak_time, &tmp_peak_time, sizeof(tmp_peak_time));
  if (raw_peak_time != 0) {
    total_size += 1 + 8;
  }

  // double settling_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_settling_time = this->_internal_settling_time();
  uint64_t raw_settling_time;
  memcpy(&raw_settling_time, &tmp_settling_time, sizeof(tmp_settling_time));
  if (raw_settling_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LatencyParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyParam::GetClassData() const { return &_class_data_; }

void LatencyParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LatencyParam *>(to)->MergeFrom(
      static_cast<const LatencyParam &>(from));
}


void LatencyParam::MergeFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.common.LatencyParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_dead_time = from._internal_dead_time();
  uint64_t raw_dead_time;
  memcpy(&raw_dead_time, &tmp_dead_time, sizeof(tmp_dead_time));
  if (raw_dead_time != 0) {
    _internal_set_dead_time(from._internal_dead_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rise_time = from._internal_rise_time();
  uint64_t raw_rise_time;
  memcpy(&raw_rise_time, &tmp_rise_time, sizeof(tmp_rise_time));
  if (raw_rise_time != 0) {
    _internal_set_rise_time(from._internal_rise_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_peak_time = from._internal_peak_time();
  uint64_t raw_peak_time;
  memcpy(&raw_peak_time, &tmp_peak_time, sizeof(tmp_peak_time));
  if (raw_peak_time != 0) {
    _internal_set_peak_time(from._internal_peak_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_settling_time = from._internal_settling_time();
  uint64_t raw_settling_time;
  memcpy(&raw_settling_time, &tmp_settling_time, sizeof(tmp_settling_time));
  if (raw_settling_time != 0) {
    _internal_set_settling_time(from._internal_settling_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyParam::CopyFrom(const LatencyParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.common.LatencyParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyParam::IsInitialized() const {
  return true;
}

void LatencyParam::InternalSwap(LatencyParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyParam, settling_time_)
      + sizeof(LatencyParam::settling_time_)
      - PROTOBUF_FIELD_OFFSET(LatencyParam, dead_time_)>(
          reinterpret_cast<char*>(&dead_time_),
          reinterpret_cast<char*>(&other->dead_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[3]);
}

// ===================================================================

class VehicleParam::_Internal {
 public:
  static const ::autoagric::common::VehicleID& vehicle_id(const VehicleParam* msg);
  static const ::autoagric::common::LatencyParam& steering_latency_param(const VehicleParam* msg);
  static const ::autoagric::common::LatencyParam& throttle_latency_param(const VehicleParam* msg);
  static const ::autoagric::common::LatencyParam& brake_latency_param(const VehicleParam* msg);
};

const ::autoagric::common::VehicleID&
VehicleParam::_Internal::vehicle_id(const VehicleParam* msg) {
  return *msg->vehicle_id_;
}
const ::autoagric::common::LatencyParam&
VehicleParam::_Internal::steering_latency_param(const VehicleParam* msg) {
  return *msg->steering_latency_param_;
}
const ::autoagric::common::LatencyParam&
VehicleParam::_Internal::throttle_latency_param(const VehicleParam* msg) {
  return *msg->throttle_latency_param_;
}
const ::autoagric::common::LatencyParam&
VehicleParam::_Internal::brake_latency_param(const VehicleParam* msg) {
  return *msg->brake_latency_param_;
}
VehicleParam::VehicleParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.common.VehicleParam)
}
VehicleParam::VehicleParam(const VehicleParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vehicle_id()) {
    vehicle_id_ = new ::autoagric::common::VehicleID(*from.vehicle_id_);
  } else {
    vehicle_id_ = nullptr;
  }
  if (from._internal_has_steering_latency_param()) {
    steering_latency_param_ = new ::autoagric::common::LatencyParam(*from.steering_latency_param_);
  } else {
    steering_latency_param_ = nullptr;
  }
  if (from._internal_has_throttle_latency_param()) {
    throttle_latency_param_ = new ::autoagric::common::LatencyParam(*from.throttle_latency_param_);
  } else {
    throttle_latency_param_ = nullptr;
  }
  if (from._internal_has_brake_latency_param()) {
    brake_latency_param_ = new ::autoagric::common::LatencyParam(*from.brake_latency_param_);
  } else {
    brake_latency_param_ = nullptr;
  }
  ::memcpy(&front_edge_to_center_, &from.front_edge_to_center_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_offset_) -
    reinterpret_cast<char*>(&front_edge_to_center_)) + sizeof(steer_offset_));
  // @@protoc_insertion_point(copy_constructor:autoagric.common.VehicleParam)
}

inline void VehicleParam::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehicle_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steer_offset_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(steer_offset_));
}

VehicleParam::~VehicleParam() {
  // @@protoc_insertion_point(destructor:autoagric.common.VehicleParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete vehicle_id_;
  if (this != internal_default_instance()) delete steering_latency_param_;
  if (this != internal_default_instance()) delete throttle_latency_param_;
  if (this != internal_default_instance()) delete brake_latency_param_;
}

void VehicleParam::ArenaDtor(void* object) {
  VehicleParam* _this = reinterpret_cast< VehicleParam* >(object);
  (void)_this;
}
void VehicleParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleParam::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.common.VehicleParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && vehicle_id_ != nullptr) {
    delete vehicle_id_;
  }
  vehicle_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && steering_latency_param_ != nullptr) {
    delete steering_latency_param_;
  }
  steering_latency_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && throttle_latency_param_ != nullptr) {
    delete throttle_latency_param_;
  }
  throttle_latency_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && brake_latency_param_ != nullptr) {
    delete brake_latency_param_;
  }
  brake_latency_param_ = nullptr;
  ::memset(&front_edge_to_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_offset_) -
      reinterpret_cast<char*>(&front_edge_to_center_)) + sizeof(steer_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.common.VehicleBrand brand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_brand(static_cast<::autoagric::common::VehicleBrand>(val));
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.VehicleID vehicle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double front_edge_to_center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          front_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double back_edge_to_center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          back_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double left_edge_to_center = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          left_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double right_edge_to_center = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          right_edge_to_center_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_turn_radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          min_turn_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_acceleration = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_deceleration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_steer_angle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          max_steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max_steer_angle_rate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          max_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double min_steer_angle_rate = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          min_steer_angle_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double steer_ratio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          steer_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double wheel_base = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          wheel_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double wheel_rolling_radius = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          wheel_rolling_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float max_abs_speed_when_stopped = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          max_abs_speed_when_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double brake_deadzone = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          brake_deadzone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double throttle_deadzone = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          throttle_deadzone_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.LatencyParam steering_latency_param = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_steering_latency_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.LatencyParam throttle_latency_param = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_latency_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.LatencyParam brake_latency_param = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_brake_latency_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double steer_offset = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          steer_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.common.VehicleParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.common.VehicleBrand brand = 1;
  if (this->_internal_brand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_brand(), target);
  }

  // .autoagric.common.VehicleID vehicle_id = 2;
  if (this->_internal_has_vehicle_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_id(this), target, stream);
  }

  // double front_edge_to_center = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_edge_to_center = this->_internal_front_edge_to_center();
  uint64_t raw_front_edge_to_center;
  memcpy(&raw_front_edge_to_center, &tmp_front_edge_to_center, sizeof(tmp_front_edge_to_center));
  if (raw_front_edge_to_center != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_front_edge_to_center(), target);
  }

  // double back_edge_to_center = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_back_edge_to_center = this->_internal_back_edge_to_center();
  uint64_t raw_back_edge_to_center;
  memcpy(&raw_back_edge_to_center, &tmp_back_edge_to_center, sizeof(tmp_back_edge_to_center));
  if (raw_back_edge_to_center != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_back_edge_to_center(), target);
  }

  // double left_edge_to_center = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left_edge_to_center = this->_internal_left_edge_to_center();
  uint64_t raw_left_edge_to_center;
  memcpy(&raw_left_edge_to_center, &tmp_left_edge_to_center, sizeof(tmp_left_edge_to_center));
  if (raw_left_edge_to_center != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_left_edge_to_center(), target);
  }

  // double right_edge_to_center = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right_edge_to_center = this->_internal_right_edge_to_center();
  uint64_t raw_right_edge_to_center;
  memcpy(&raw_right_edge_to_center, &tmp_right_edge_to_center, sizeof(tmp_right_edge_to_center));
  if (raw_right_edge_to_center != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_right_edge_to_center(), target);
  }

  // double length = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_length(), target);
  }

  // double width = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_width(), target);
  }

  // double height = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_height(), target);
  }

  // double min_turn_radius = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_turn_radius = this->_internal_min_turn_radius();
  uint64_t raw_min_turn_radius;
  memcpy(&raw_min_turn_radius, &tmp_min_turn_radius, sizeof(tmp_min_turn_radius));
  if (raw_min_turn_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_min_turn_radius(), target);
  }

  // double max_acceleration = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration = this->_internal_max_acceleration();
  uint64_t raw_max_acceleration;
  memcpy(&raw_max_acceleration, &tmp_max_acceleration, sizeof(tmp_max_acceleration));
  if (raw_max_acceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_max_acceleration(), target);
  }

  // double max_deceleration = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_deceleration = this->_internal_max_deceleration();
  uint64_t raw_max_deceleration;
  memcpy(&raw_max_deceleration, &tmp_max_deceleration, sizeof(tmp_max_deceleration));
  if (raw_max_deceleration != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_max_deceleration(), target);
  }

  // double max_steer_angle = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_steer_angle = this->_internal_max_steer_angle();
  uint64_t raw_max_steer_angle;
  memcpy(&raw_max_steer_angle, &tmp_max_steer_angle, sizeof(tmp_max_steer_angle));
  if (raw_max_steer_angle != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_max_steer_angle(), target);
  }

  // double max_steer_angle_rate = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_steer_angle_rate = this->_internal_max_steer_angle_rate();
  uint64_t raw_max_steer_angle_rate;
  memcpy(&raw_max_steer_angle_rate, &tmp_max_steer_angle_rate, sizeof(tmp_max_steer_angle_rate));
  if (raw_max_steer_angle_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_max_steer_angle_rate(), target);
  }

  // double min_steer_angle_rate = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_steer_angle_rate = this->_internal_min_steer_angle_rate();
  uint64_t raw_min_steer_angle_rate;
  memcpy(&raw_min_steer_angle_rate, &tmp_min_steer_angle_rate, sizeof(tmp_min_steer_angle_rate));
  if (raw_min_steer_angle_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_min_steer_angle_rate(), target);
  }

  // double steer_ratio = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_ratio = this->_internal_steer_ratio();
  uint64_t raw_steer_ratio;
  memcpy(&raw_steer_ratio, &tmp_steer_ratio, sizeof(tmp_steer_ratio));
  if (raw_steer_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_steer_ratio(), target);
  }

  // double wheel_base = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wheel_base = this->_internal_wheel_base();
  uint64_t raw_wheel_base;
  memcpy(&raw_wheel_base, &tmp_wheel_base, sizeof(tmp_wheel_base));
  if (raw_wheel_base != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_wheel_base(), target);
  }

  // double wheel_rolling_radius = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wheel_rolling_radius = this->_internal_wheel_rolling_radius();
  uint64_t raw_wheel_rolling_radius;
  memcpy(&raw_wheel_rolling_radius, &tmp_wheel_rolling_radius, sizeof(tmp_wheel_rolling_radius));
  if (raw_wheel_rolling_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_wheel_rolling_radius(), target);
  }

  // float max_abs_speed_when_stopped = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_abs_speed_when_stopped = this->_internal_max_abs_speed_when_stopped();
  uint32_t raw_max_abs_speed_when_stopped;
  memcpy(&raw_max_abs_speed_when_stopped, &tmp_max_abs_speed_when_stopped, sizeof(tmp_max_abs_speed_when_stopped));
  if (raw_max_abs_speed_when_stopped != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_max_abs_speed_when_stopped(), target);
  }

  // double brake_deadzone = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_deadzone = this->_internal_brake_deadzone();
  uint64_t raw_brake_deadzone;
  memcpy(&raw_brake_deadzone, &tmp_brake_deadzone, sizeof(tmp_brake_deadzone));
  if (raw_brake_deadzone != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_brake_deadzone(), target);
  }

  // double throttle_deadzone = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_deadzone = this->_internal_throttle_deadzone();
  uint64_t raw_throttle_deadzone;
  memcpy(&raw_throttle_deadzone, &tmp_throttle_deadzone, sizeof(tmp_throttle_deadzone));
  if (raw_throttle_deadzone != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_throttle_deadzone(), target);
  }

  // .autoagric.common.LatencyParam steering_latency_param = 22;
  if (this->_internal_has_steering_latency_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::steering_latency_param(this), target, stream);
  }

  // .autoagric.common.LatencyParam throttle_latency_param = 23;
  if (this->_internal_has_throttle_latency_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::throttle_latency_param(this), target, stream);
  }

  // .autoagric.common.LatencyParam brake_latency_param = 24;
  if (this->_internal_has_brake_latency_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::brake_latency_param(this), target, stream);
  }

  // double steer_offset = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_offset = this->_internal_steer_offset();
  uint64_t raw_steer_offset;
  memcpy(&raw_steer_offset, &tmp_steer_offset, sizeof(tmp_steer_offset));
  if (raw_steer_offset != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_steer_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.common.VehicleParam)
  return target;
}

size_t VehicleParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.common.VehicleParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.VehicleID vehicle_id = 2;
  if (this->_internal_has_vehicle_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_id_);
  }

  // .autoagric.common.LatencyParam steering_latency_param = 22;
  if (this->_internal_has_steering_latency_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steering_latency_param_);
  }

  // .autoagric.common.LatencyParam throttle_latency_param = 23;
  if (this->_internal_has_throttle_latency_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttle_latency_param_);
  }

  // .autoagric.common.LatencyParam brake_latency_param = 24;
  if (this->_internal_has_brake_latency_param()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brake_latency_param_);
  }

  // double front_edge_to_center = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_edge_to_center = this->_internal_front_edge_to_center();
  uint64_t raw_front_edge_to_center;
  memcpy(&raw_front_edge_to_center, &tmp_front_edge_to_center, sizeof(tmp_front_edge_to_center));
  if (raw_front_edge_to_center != 0) {
    total_size += 1 + 8;
  }

  // double back_edge_to_center = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_back_edge_to_center = this->_internal_back_edge_to_center();
  uint64_t raw_back_edge_to_center;
  memcpy(&raw_back_edge_to_center, &tmp_back_edge_to_center, sizeof(tmp_back_edge_to_center));
  if (raw_back_edge_to_center != 0) {
    total_size += 1 + 8;
  }

  // double left_edge_to_center = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left_edge_to_center = this->_internal_left_edge_to_center();
  uint64_t raw_left_edge_to_center;
  memcpy(&raw_left_edge_to_center, &tmp_left_edge_to_center, sizeof(tmp_left_edge_to_center));
  if (raw_left_edge_to_center != 0) {
    total_size += 1 + 8;
  }

  // double right_edge_to_center = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right_edge_to_center = this->_internal_right_edge_to_center();
  uint64_t raw_right_edge_to_center;
  memcpy(&raw_right_edge_to_center, &tmp_right_edge_to_center, sizeof(tmp_right_edge_to_center));
  if (raw_right_edge_to_center != 0) {
    total_size += 1 + 8;
  }

  // double length = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = this->_internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 8;
  }

  // double width = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  // double height = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 8;
  }

  // double min_turn_radius = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_turn_radius = this->_internal_min_turn_radius();
  uint64_t raw_min_turn_radius;
  memcpy(&raw_min_turn_radius, &tmp_min_turn_radius, sizeof(tmp_min_turn_radius));
  if (raw_min_turn_radius != 0) {
    total_size += 1 + 8;
  }

  // .autoagric.common.VehicleBrand brand = 1;
  if (this->_internal_brand() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_brand());
  }

  // float max_abs_speed_when_stopped = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_abs_speed_when_stopped = this->_internal_max_abs_speed_when_stopped();
  uint32_t raw_max_abs_speed_when_stopped;
  memcpy(&raw_max_abs_speed_when_stopped, &tmp_max_abs_speed_when_stopped, sizeof(tmp_max_abs_speed_when_stopped));
  if (raw_max_abs_speed_when_stopped != 0) {
    total_size += 2 + 4;
  }

  // double max_acceleration = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration = this->_internal_max_acceleration();
  uint64_t raw_max_acceleration;
  memcpy(&raw_max_acceleration, &tmp_max_acceleration, sizeof(tmp_max_acceleration));
  if (raw_max_acceleration != 0) {
    total_size += 1 + 8;
  }

  // double max_deceleration = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_deceleration = this->_internal_max_deceleration();
  uint64_t raw_max_deceleration;
  memcpy(&raw_max_deceleration, &tmp_max_deceleration, sizeof(tmp_max_deceleration));
  if (raw_max_deceleration != 0) {
    total_size += 1 + 8;
  }

  // double max_steer_angle = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_steer_angle = this->_internal_max_steer_angle();
  uint64_t raw_max_steer_angle;
  memcpy(&raw_max_steer_angle, &tmp_max_steer_angle, sizeof(tmp_max_steer_angle));
  if (raw_max_steer_angle != 0) {
    total_size += 1 + 8;
  }

  // double max_steer_angle_rate = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_steer_angle_rate = this->_internal_max_steer_angle_rate();
  uint64_t raw_max_steer_angle_rate;
  memcpy(&raw_max_steer_angle_rate, &tmp_max_steer_angle_rate, sizeof(tmp_max_steer_angle_rate));
  if (raw_max_steer_angle_rate != 0) {
    total_size += 1 + 8;
  }

  // double min_steer_angle_rate = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_steer_angle_rate = this->_internal_min_steer_angle_rate();
  uint64_t raw_min_steer_angle_rate;
  memcpy(&raw_min_steer_angle_rate, &tmp_min_steer_angle_rate, sizeof(tmp_min_steer_angle_rate));
  if (raw_min_steer_angle_rate != 0) {
    total_size += 1 + 8;
  }

  // double steer_ratio = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_ratio = this->_internal_steer_ratio();
  uint64_t raw_steer_ratio;
  memcpy(&raw_steer_ratio, &tmp_steer_ratio, sizeof(tmp_steer_ratio));
  if (raw_steer_ratio != 0) {
    total_size += 2 + 8;
  }

  // double wheel_base = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wheel_base = this->_internal_wheel_base();
  uint64_t raw_wheel_base;
  memcpy(&raw_wheel_base, &tmp_wheel_base, sizeof(tmp_wheel_base));
  if (raw_wheel_base != 0) {
    total_size += 2 + 8;
  }

  // double wheel_rolling_radius = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wheel_rolling_radius = this->_internal_wheel_rolling_radius();
  uint64_t raw_wheel_rolling_radius;
  memcpy(&raw_wheel_rolling_radius, &tmp_wheel_rolling_radius, sizeof(tmp_wheel_rolling_radius));
  if (raw_wheel_rolling_radius != 0) {
    total_size += 2 + 8;
  }

  // double brake_deadzone = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_deadzone = this->_internal_brake_deadzone();
  uint64_t raw_brake_deadzone;
  memcpy(&raw_brake_deadzone, &tmp_brake_deadzone, sizeof(tmp_brake_deadzone));
  if (raw_brake_deadzone != 0) {
    total_size += 2 + 8;
  }

  // double throttle_deadzone = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_deadzone = this->_internal_throttle_deadzone();
  uint64_t raw_throttle_deadzone;
  memcpy(&raw_throttle_deadzone, &tmp_throttle_deadzone, sizeof(tmp_throttle_deadzone));
  if (raw_throttle_deadzone != 0) {
    total_size += 2 + 8;
  }

  // double steer_offset = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_offset = this->_internal_steer_offset();
  uint64_t raw_steer_offset;
  memcpy(&raw_steer_offset, &tmp_steer_offset, sizeof(tmp_steer_offset));
  if (raw_steer_offset != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleParam::GetClassData() const { return &_class_data_; }

void VehicleParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleParam *>(to)->MergeFrom(
      static_cast<const VehicleParam &>(from));
}


void VehicleParam::MergeFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.common.VehicleParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vehicle_id()) {
    _internal_mutable_vehicle_id()->::autoagric::common::VehicleID::MergeFrom(from._internal_vehicle_id());
  }
  if (from._internal_has_steering_latency_param()) {
    _internal_mutable_steering_latency_param()->::autoagric::common::LatencyParam::MergeFrom(from._internal_steering_latency_param());
  }
  if (from._internal_has_throttle_latency_param()) {
    _internal_mutable_throttle_latency_param()->::autoagric::common::LatencyParam::MergeFrom(from._internal_throttle_latency_param());
  }
  if (from._internal_has_brake_latency_param()) {
    _internal_mutable_brake_latency_param()->::autoagric::common::LatencyParam::MergeFrom(from._internal_brake_latency_param());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_front_edge_to_center = from._internal_front_edge_to_center();
  uint64_t raw_front_edge_to_center;
  memcpy(&raw_front_edge_to_center, &tmp_front_edge_to_center, sizeof(tmp_front_edge_to_center));
  if (raw_front_edge_to_center != 0) {
    _internal_set_front_edge_to_center(from._internal_front_edge_to_center());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_back_edge_to_center = from._internal_back_edge_to_center();
  uint64_t raw_back_edge_to_center;
  memcpy(&raw_back_edge_to_center, &tmp_back_edge_to_center, sizeof(tmp_back_edge_to_center));
  if (raw_back_edge_to_center != 0) {
    _internal_set_back_edge_to_center(from._internal_back_edge_to_center());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_left_edge_to_center = from._internal_left_edge_to_center();
  uint64_t raw_left_edge_to_center;
  memcpy(&raw_left_edge_to_center, &tmp_left_edge_to_center, sizeof(tmp_left_edge_to_center));
  if (raw_left_edge_to_center != 0) {
    _internal_set_left_edge_to_center(from._internal_left_edge_to_center());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_right_edge_to_center = from._internal_right_edge_to_center();
  uint64_t raw_right_edge_to_center;
  memcpy(&raw_right_edge_to_center, &tmp_right_edge_to_center, sizeof(tmp_right_edge_to_center));
  if (raw_right_edge_to_center != 0) {
    _internal_set_right_edge_to_center(from._internal_right_edge_to_center());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length = from._internal_length();
  uint64_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_turn_radius = from._internal_min_turn_radius();
  uint64_t raw_min_turn_radius;
  memcpy(&raw_min_turn_radius, &tmp_min_turn_radius, sizeof(tmp_min_turn_radius));
  if (raw_min_turn_radius != 0) {
    _internal_set_min_turn_radius(from._internal_min_turn_radius());
  }
  if (from._internal_brand() != 0) {
    _internal_set_brand(from._internal_brand());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_max_abs_speed_when_stopped = from._internal_max_abs_speed_when_stopped();
  uint32_t raw_max_abs_speed_when_stopped;
  memcpy(&raw_max_abs_speed_when_stopped, &tmp_max_abs_speed_when_stopped, sizeof(tmp_max_abs_speed_when_stopped));
  if (raw_max_abs_speed_when_stopped != 0) {
    _internal_set_max_abs_speed_when_stopped(from._internal_max_abs_speed_when_stopped());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_acceleration = from._internal_max_acceleration();
  uint64_t raw_max_acceleration;
  memcpy(&raw_max_acceleration, &tmp_max_acceleration, sizeof(tmp_max_acceleration));
  if (raw_max_acceleration != 0) {
    _internal_set_max_acceleration(from._internal_max_acceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_deceleration = from._internal_max_deceleration();
  uint64_t raw_max_deceleration;
  memcpy(&raw_max_deceleration, &tmp_max_deceleration, sizeof(tmp_max_deceleration));
  if (raw_max_deceleration != 0) {
    _internal_set_max_deceleration(from._internal_max_deceleration());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_steer_angle = from._internal_max_steer_angle();
  uint64_t raw_max_steer_angle;
  memcpy(&raw_max_steer_angle, &tmp_max_steer_angle, sizeof(tmp_max_steer_angle));
  if (raw_max_steer_angle != 0) {
    _internal_set_max_steer_angle(from._internal_max_steer_angle());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max_steer_angle_rate = from._internal_max_steer_angle_rate();
  uint64_t raw_max_steer_angle_rate;
  memcpy(&raw_max_steer_angle_rate, &tmp_max_steer_angle_rate, sizeof(tmp_max_steer_angle_rate));
  if (raw_max_steer_angle_rate != 0) {
    _internal_set_max_steer_angle_rate(from._internal_max_steer_angle_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min_steer_angle_rate = from._internal_min_steer_angle_rate();
  uint64_t raw_min_steer_angle_rate;
  memcpy(&raw_min_steer_angle_rate, &tmp_min_steer_angle_rate, sizeof(tmp_min_steer_angle_rate));
  if (raw_min_steer_angle_rate != 0) {
    _internal_set_min_steer_angle_rate(from._internal_min_steer_angle_rate());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_ratio = from._internal_steer_ratio();
  uint64_t raw_steer_ratio;
  memcpy(&raw_steer_ratio, &tmp_steer_ratio, sizeof(tmp_steer_ratio));
  if (raw_steer_ratio != 0) {
    _internal_set_steer_ratio(from._internal_steer_ratio());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wheel_base = from._internal_wheel_base();
  uint64_t raw_wheel_base;
  memcpy(&raw_wheel_base, &tmp_wheel_base, sizeof(tmp_wheel_base));
  if (raw_wheel_base != 0) {
    _internal_set_wheel_base(from._internal_wheel_base());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wheel_rolling_radius = from._internal_wheel_rolling_radius();
  uint64_t raw_wheel_rolling_radius;
  memcpy(&raw_wheel_rolling_radius, &tmp_wheel_rolling_radius, sizeof(tmp_wheel_rolling_radius));
  if (raw_wheel_rolling_radius != 0) {
    _internal_set_wheel_rolling_radius(from._internal_wheel_rolling_radius());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_brake_deadzone = from._internal_brake_deadzone();
  uint64_t raw_brake_deadzone;
  memcpy(&raw_brake_deadzone, &tmp_brake_deadzone, sizeof(tmp_brake_deadzone));
  if (raw_brake_deadzone != 0) {
    _internal_set_brake_deadzone(from._internal_brake_deadzone());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throttle_deadzone = from._internal_throttle_deadzone();
  uint64_t raw_throttle_deadzone;
  memcpy(&raw_throttle_deadzone, &tmp_throttle_deadzone, sizeof(tmp_throttle_deadzone));
  if (raw_throttle_deadzone != 0) {
    _internal_set_throttle_deadzone(from._internal_throttle_deadzone());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_steer_offset = from._internal_steer_offset();
  uint64_t raw_steer_offset;
  memcpy(&raw_steer_offset, &tmp_steer_offset, sizeof(tmp_steer_offset));
  if (raw_steer_offset != 0) {
    _internal_set_steer_offset(from._internal_steer_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleParam::CopyFrom(const VehicleParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.common.VehicleParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleParam::IsInitialized() const {
  return true;
}

void VehicleParam::InternalSwap(VehicleParam* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleParam, steer_offset_)
      + sizeof(VehicleParam::steer_offset_)
      - PROTOBUF_FIELD_OFFSET(VehicleParam, vehicle_id_)>(
          reinterpret_cast<char*>(&vehicle_id_),
          reinterpret_cast<char*>(&other->vehicle_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[4]);
}

// ===================================================================

class VehicleConfig::_Internal {
 public:
  static const ::autoagric::common::Header& header(const VehicleConfig* msg);
  static const ::autoagric::common::VehicleParam& vehicle_param(const VehicleConfig* msg);
  static const ::autoagric::common::Extrinsics& extrinsics(const VehicleConfig* msg);
};

const ::autoagric::common::Header&
VehicleConfig::_Internal::header(const VehicleConfig* msg) {
  return *msg->header_;
}
const ::autoagric::common::VehicleParam&
VehicleConfig::_Internal::vehicle_param(const VehicleConfig* msg) {
  return *msg->vehicle_param_;
}
const ::autoagric::common::Extrinsics&
VehicleConfig::_Internal::extrinsics(const VehicleConfig* msg) {
  return *msg->extrinsics_;
}
void VehicleConfig::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
VehicleConfig::VehicleConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.common.VehicleConfig)
}
VehicleConfig::VehicleConfig(const VehicleConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::autoagric::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_vehicle_param()) {
    vehicle_param_ = new ::autoagric::common::VehicleParam(*from.vehicle_param_);
  } else {
    vehicle_param_ = nullptr;
  }
  if (from._internal_has_extrinsics()) {
    extrinsics_ = new ::autoagric::common::Extrinsics(*from.extrinsics_);
  } else {
    extrinsics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autoagric.common.VehicleConfig)
}

inline void VehicleConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&extrinsics_) -
    reinterpret_cast<char*>(&header_)) + sizeof(extrinsics_));
}

VehicleConfig::~VehicleConfig() {
  // @@protoc_insertion_point(destructor:autoagric.common.VehicleConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete vehicle_param_;
  if (this != internal_default_instance()) delete extrinsics_;
}

void VehicleConfig::ArenaDtor(void* object) {
  VehicleConfig* _this = reinterpret_cast< VehicleConfig* >(object);
  (void)_this;
}
void VehicleConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.common.VehicleConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && vehicle_param_ != nullptr) {
    delete vehicle_param_;
  }
  vehicle_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && extrinsics_ != nullptr) {
    delete extrinsics_;
  }
  extrinsics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.VehicleParam vehicle_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Extrinsics extrinsics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extrinsics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.common.VehicleConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .autoagric.common.VehicleParam vehicle_param = 2;
  if (this->_internal_has_vehicle_param()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vehicle_param(this), target, stream);
  }

  // .autoagric.common.Extrinsics extrinsics = 3;
  if (this->_internal_has_extrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::extrinsics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.common.VehicleConfig)
  return target;
}

size_t VehicleConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.common.VehicleConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .autoagric.common.VehicleParam vehicle_param = 2;
  if (this->_internal_has_vehicle_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_param_);
  }

  // .autoagric.common.Extrinsics extrinsics = 3;
  if (this->_internal_has_extrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extrinsics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleConfig::GetClassData() const { return &_class_data_; }

void VehicleConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleConfig *>(to)->MergeFrom(
      static_cast<const VehicleConfig &>(from));
}


void VehicleConfig::MergeFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.common.VehicleConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::autoagric::common::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_vehicle_param()) {
    _internal_mutable_vehicle_param()->::autoagric::common::VehicleParam::MergeFrom(from._internal_vehicle_param());
  }
  if (from._internal_has_extrinsics()) {
    _internal_mutable_extrinsics()->::autoagric::common::Extrinsics::MergeFrom(from._internal_extrinsics());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleConfig::CopyFrom(const VehicleConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.common.VehicleConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleConfig::IsInitialized() const {
  return true;
}

void VehicleConfig::InternalSwap(VehicleConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleConfig, extrinsics_)
      + sizeof(VehicleConfig::extrinsics_)
      - PROTOBUF_FIELD_OFFSET(VehicleConfig, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_getter, &descriptor_table_autoagric_2fcommon_2fvehicle_5fconfig_2eproto_once,
      file_level_metadata_autoagric_2fcommon_2fvehicle_5fconfig_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::common::Transform* Arena::CreateMaybeMessage< ::autoagric::common::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::common::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::common::Extrinsics* Arena::CreateMaybeMessage< ::autoagric::common::Extrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::common::Extrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::common::VehicleID* Arena::CreateMaybeMessage< ::autoagric::common::VehicleID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::common::VehicleID >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::common::LatencyParam* Arena::CreateMaybeMessage< ::autoagric::common::LatencyParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::common::LatencyParam >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::common::VehicleParam* Arena::CreateMaybeMessage< ::autoagric::common::VehicleParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::common::VehicleParam >(arena);
}
template<> PROTOBUF_NOINLINE ::autoagric::common::VehicleConfig* Arena::CreateMaybeMessage< ::autoagric::common::VehicleConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::common::VehicleConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
