// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoagric/localization/pose.proto

#include "autoagric/localization/pose.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace autoagric {
namespace localization {
constexpr Pose::Pose(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , orientation_(nullptr)
  , linear_velocity_(nullptr)
  , linear_acceleration_(nullptr)
  , angular_velocity_(nullptr)
  , linear_acceleration_vrf_(nullptr)
  , angular_velocity_vrf_(nullptr)
  , euler_angles_(nullptr)
  , heading_(0){}
struct PoseDefaultTypeInternal {
  constexpr PoseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
}  // namespace autoagric
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_autoagric_2flocalization_2fpose_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_autoagric_2flocalization_2fpose_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_autoagric_2flocalization_2fpose_2eproto = nullptr;

const uint32_t TableStruct_autoagric_2flocalization_2fpose_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, position_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, orientation_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, heading_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, linear_acceleration_vrf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, angular_velocity_vrf_),
  PROTOBUF_FIELD_OFFSET(::autoagric::localization::Pose, euler_angles_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, -1, sizeof(::autoagric::localization::Pose)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::autoagric::localization::_Pose_default_instance_),
};

const char descriptor_table_protodef_autoagric_2flocalization_2fpose_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!autoagric/localization/pose.proto\022\026aut"
  "oagric.localization\032\037autoagric/common/ge"
  "ometry.proto\"\320\003\n\004Pose\022,\n\010position\030\001 \001(\0132"
  "\032.autoagric.common.PointENU\0221\n\013orientati"
  "on\030\002 \001(\0132\034.autoagric.common.Quaternion\0222"
  "\n\017linear_velocity\030\003 \001(\0132\031.autoagric.comm"
  "on.Point3D\0226\n\023linear_acceleration\030\004 \001(\0132"
  "\031.autoagric.common.Point3D\0223\n\020angular_ve"
  "locity\030\005 \001(\0132\031.autoagric.common.Point3D\022"
  "\024\n\007heading\030\006 \001(\001H\000\210\001\001\022:\n\027linear_accelera"
  "tion_vrf\030\007 \001(\0132\031.autoagric.common.Point3"
  "D\0227\n\024angular_velocity_vrf\030\010 \001(\0132\031.autoag"
  "ric.common.Point3D\022/\n\014euler_angles\030\t \001(\013"
  "2\031.autoagric.common.Point3DB\n\n\010_headingb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_autoagric_2flocalization_2fpose_2eproto_deps[1] = {
  &::descriptor_table_autoagric_2fcommon_2fgeometry_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_autoagric_2flocalization_2fpose_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_autoagric_2flocalization_2fpose_2eproto = {
  false, false, 567, descriptor_table_protodef_autoagric_2flocalization_2fpose_2eproto, "autoagric/localization/pose.proto", 
  &descriptor_table_autoagric_2flocalization_2fpose_2eproto_once, descriptor_table_autoagric_2flocalization_2fpose_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_autoagric_2flocalization_2fpose_2eproto::offsets,
  file_level_metadata_autoagric_2flocalization_2fpose_2eproto, file_level_enum_descriptors_autoagric_2flocalization_2fpose_2eproto, file_level_service_descriptors_autoagric_2flocalization_2fpose_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_autoagric_2flocalization_2fpose_2eproto_getter() {
  return &descriptor_table_autoagric_2flocalization_2fpose_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_autoagric_2flocalization_2fpose_2eproto(&descriptor_table_autoagric_2flocalization_2fpose_2eproto);
namespace autoagric {
namespace localization {

// ===================================================================

class Pose::_Internal {
 public:
  using HasBits = decltype(std::declval<Pose>()._has_bits_);
  static const ::autoagric::common::PointENU& position(const Pose* msg);
  static const ::autoagric::common::Quaternion& orientation(const Pose* msg);
  static const ::autoagric::common::Point3D& linear_velocity(const Pose* msg);
  static const ::autoagric::common::Point3D& linear_acceleration(const Pose* msg);
  static const ::autoagric::common::Point3D& angular_velocity(const Pose* msg);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::autoagric::common::Point3D& linear_acceleration_vrf(const Pose* msg);
  static const ::autoagric::common::Point3D& angular_velocity_vrf(const Pose* msg);
  static const ::autoagric::common::Point3D& euler_angles(const Pose* msg);
};

const ::autoagric::common::PointENU&
Pose::_Internal::position(const Pose* msg) {
  return *msg->position_;
}
const ::autoagric::common::Quaternion&
Pose::_Internal::orientation(const Pose* msg) {
  return *msg->orientation_;
}
const ::autoagric::common::Point3D&
Pose::_Internal::linear_velocity(const Pose* msg) {
  return *msg->linear_velocity_;
}
const ::autoagric::common::Point3D&
Pose::_Internal::linear_acceleration(const Pose* msg) {
  return *msg->linear_acceleration_;
}
const ::autoagric::common::Point3D&
Pose::_Internal::angular_velocity(const Pose* msg) {
  return *msg->angular_velocity_;
}
const ::autoagric::common::Point3D&
Pose::_Internal::linear_acceleration_vrf(const Pose* msg) {
  return *msg->linear_acceleration_vrf_;
}
const ::autoagric::common::Point3D&
Pose::_Internal::angular_velocity_vrf(const Pose* msg) {
  return *msg->angular_velocity_vrf_;
}
const ::autoagric::common::Point3D&
Pose::_Internal::euler_angles(const Pose* msg) {
  return *msg->euler_angles_;
}
void Pose::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Pose::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
void Pose::clear_linear_velocity() {
  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
}
void Pose::clear_linear_acceleration() {
  if (GetArenaForAllocation() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
}
void Pose::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
}
void Pose::clear_linear_acceleration_vrf() {
  if (GetArenaForAllocation() == nullptr && linear_acceleration_vrf_ != nullptr) {
    delete linear_acceleration_vrf_;
  }
  linear_acceleration_vrf_ = nullptr;
}
void Pose::clear_angular_velocity_vrf() {
  if (GetArenaForAllocation() == nullptr && angular_velocity_vrf_ != nullptr) {
    delete angular_velocity_vrf_;
  }
  angular_velocity_vrf_ = nullptr;
}
void Pose::clear_euler_angles() {
  if (GetArenaForAllocation() == nullptr && euler_angles_ != nullptr) {
    delete euler_angles_;
  }
  euler_angles_ = nullptr;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:autoagric.localization.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::autoagric::common::PointENU(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::autoagric::common::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::autoagric::common::Point3D(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::autoagric::common::Point3D(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::autoagric::common::Point3D(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration_vrf()) {
    linear_acceleration_vrf_ = new ::autoagric::common::Point3D(*from.linear_acceleration_vrf_);
  } else {
    linear_acceleration_vrf_ = nullptr;
  }
  if (from._internal_has_angular_velocity_vrf()) {
    angular_velocity_vrf_ = new ::autoagric::common::Point3D(*from.angular_velocity_vrf_);
  } else {
    angular_velocity_vrf_ = nullptr;
  }
  if (from._internal_has_euler_angles()) {
    euler_angles_ = new ::autoagric::common::Point3D(*from.euler_angles_);
  } else {
    euler_angles_ = nullptr;
  }
  heading_ = from.heading_;
  // @@protoc_insertion_point(copy_constructor:autoagric.localization.Pose)
}

inline void Pose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&heading_) -
    reinterpret_cast<char*>(&position_)) + sizeof(heading_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:autoagric.localization.Pose)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_vrf_;
  if (this != internal_default_instance()) delete angular_velocity_vrf_;
  if (this != internal_default_instance()) delete euler_angles_;
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:autoagric.localization.Pose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_acceleration_vrf_ != nullptr) {
    delete linear_acceleration_vrf_;
  }
  linear_acceleration_vrf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_vrf_ != nullptr) {
    delete angular_velocity_vrf_;
  }
  angular_velocity_vrf_ = nullptr;
  if (GetArenaForAllocation() == nullptr && euler_angles_ != nullptr) {
    delete euler_angles_;
  }
  euler_angles_ = nullptr;
  heading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .autoagric.common.PointENU position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D linear_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D linear_acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D angular_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D linear_acceleration_vrf = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration_vrf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D angular_velocity_vrf = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity_vrf(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .autoagric.common.Point3D euler_angles = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_angles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autoagric.localization.Pose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .autoagric.common.PointENU position = 1;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .autoagric.common.Quaternion orientation = 2;
  if (this->_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  // .autoagric.common.Point3D linear_velocity = 3;
  if (this->_internal_has_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::linear_velocity(this), target, stream);
  }

  // .autoagric.common.Point3D linear_acceleration = 4;
  if (this->_internal_has_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::linear_acceleration(this), target, stream);
  }

  // .autoagric.common.Point3D angular_velocity = 5;
  if (this->_internal_has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::angular_velocity(this), target, stream);
  }

  // optional double heading = 6;
  if (_internal_has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_heading(), target);
  }

  // .autoagric.common.Point3D linear_acceleration_vrf = 7;
  if (this->_internal_has_linear_acceleration_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::linear_acceleration_vrf(this), target, stream);
  }

  // .autoagric.common.Point3D angular_velocity_vrf = 8;
  if (this->_internal_has_angular_velocity_vrf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::angular_velocity_vrf(this), target, stream);
  }

  // .autoagric.common.Point3D euler_angles = 9;
  if (this->_internal_has_euler_angles()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::euler_angles(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autoagric.localization.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoagric.localization.Pose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .autoagric.common.PointENU position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .autoagric.common.Quaternion orientation = 2;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .autoagric.common.Point3D linear_velocity = 3;
  if (this->_internal_has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .autoagric.common.Point3D linear_acceleration = 4;
  if (this->_internal_has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .autoagric.common.Point3D angular_velocity = 5;
  if (this->_internal_has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .autoagric.common.Point3D linear_acceleration_vrf = 7;
  if (this->_internal_has_linear_acceleration_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_vrf_);
  }

  // .autoagric.common.Point3D angular_velocity_vrf = 8;
  if (this->_internal_has_angular_velocity_vrf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_vrf_);
  }

  // .autoagric.common.Point3D euler_angles = 9;
  if (this->_internal_has_euler_angles()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *euler_angles_);
  }

  // optional double heading = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }

void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pose *>(to)->MergeFrom(
      static_cast<const Pose &>(from));
}


void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoagric.localization.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::autoagric::common::PointENU::MergeFrom(from._internal_position());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::autoagric::common::Quaternion::MergeFrom(from._internal_orientation());
  }
  if (from._internal_has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::autoagric::common::Point3D::MergeFrom(from._internal_linear_velocity());
  }
  if (from._internal_has_linear_acceleration()) {
    _internal_mutable_linear_acceleration()->::autoagric::common::Point3D::MergeFrom(from._internal_linear_acceleration());
  }
  if (from._internal_has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::autoagric::common::Point3D::MergeFrom(from._internal_angular_velocity());
  }
  if (from._internal_has_linear_acceleration_vrf()) {
    _internal_mutable_linear_acceleration_vrf()->::autoagric::common::Point3D::MergeFrom(from._internal_linear_acceleration_vrf());
  }
  if (from._internal_has_angular_velocity_vrf()) {
    _internal_mutable_angular_velocity_vrf()->::autoagric::common::Point3D::MergeFrom(from._internal_angular_velocity_vrf());
  }
  if (from._internal_has_euler_angles()) {
    _internal_mutable_euler_angles()->::autoagric::common::Point3D::MergeFrom(from._internal_euler_angles());
  }
  if (from._internal_has_heading()) {
    _internal_set_heading(from._internal_heading());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoagric.localization.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, heading_)
      + sizeof(Pose::heading_)
      - PROTOBUF_FIELD_OFFSET(Pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_autoagric_2flocalization_2fpose_2eproto_getter, &descriptor_table_autoagric_2flocalization_2fpose_2eproto_once,
      file_level_metadata_autoagric_2flocalization_2fpose_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace localization
}  // namespace autoagric
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autoagric::localization::Pose* Arena::CreateMaybeMessage< ::autoagric::localization::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autoagric::localization::Pose >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
